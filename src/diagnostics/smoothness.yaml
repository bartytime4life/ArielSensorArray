# configs/diagnostics/smoothness.yaml

# ==============================================================================

# ðŸ§µ Spectral Smoothness Diagnostics (Î¼ spectra)

# SpectraMind V50 â€” NeurIPS 2025 Ariel Data Challenge

# ------------------------------------------------------------------------------

# Purpose:

# Compute per-bin smoothness diagnostics on Î¼ spectra:

# â€¢ L2 gradient / curvature (1st/2nd derivative magnitudes)

# â€¢ Total Variation (TV)

# â€¢ Optional Savitzkyâ€“Golay smoothing reference

# â€¢ Entropy / information-density maps

# Export heatmaps, anomaly flags, and CSV/JSON summaries.

#

# CLI override examples:

# spectramind diagnose smoothness smoothness.l2.lambda=0.05

# spectramind diagnose smoothness smoothness.tv.lambda=0.02 smoothness.flags.grad\_mag\_p95=1.75

# spectramind diagnose smoothness smoothness.plots.overlay\_symbolic\_violations=true

# spectramind diagnose smoothness smoothness.export.out\_base="\${paths.artifacts}/diagnostics/smoothness"

#

# Conventions:

# â€¢ Paths interpolate `${paths.*}` (set in configs/paths.yaml) for portability.

# â€¢ Never mutates Î¼; diagnostics are read-only.

# â€¢ All toggles explicit for CI + Hydra overrides.

# ==============================================================================

# ------------------------------------------------------------------------------

# Hydra defaults

# ------------------------------------------------------------------------------

defaults:

* override hydra/job\_logging: default
* override hydra/hydra\_logging: default

# ------------------------------------------------------------------------------

# Master block

# ------------------------------------------------------------------------------

smoothness:
enable: true

# ------------------------------------------------------------------

# Input handling

# ------------------------------------------------------------------

inputs:
mu\_path: "\${paths.artifacts}/predict/mu.npy"         # \[N\_planets, 283]
meta\_path: "\${paths.artifacts}/predict/meta.csv"     # planet\_id, split, cluster, etc.
mask\_path: null                                      # optional mask for valid bins (1=valid)
\# Optional external per-bin weights (e.g., SNR or coverage); matched to Î¼ shape
bin\_weight\_path: null                                 # .npy or .csv (length 283) for weighting aggregates

filter:
include\_splits: \["train", "val", "test"]
exclude\_planets: \[]
min\_bins\_for\_eval: 50                                 # skip planets with fewer bins (masked)

# ------------------------------------------------------------------

# Gradient / curvature settings

# ------------------------------------------------------------------

gradient:
compute\_first\_order: true                             # |âˆ‚Î¼/âˆ‚Î»|
compute\_second\_order: true                            # |âˆ‚Â²Î¼/âˆ‚Î»Â²|
kernel: "central"                                     # "forward" | "backward" | "central"
eps: 1.0e-12                                          # numerical stability
normalize\_by\_range: true                              # divide by (max-min) per planet
per\_bin\_zscore: false                                 # optional z-scoring across planets for each bin
aggregate: \["mean", "p95", "max"]

# ------------------------------------------------------------------

# Penalties / regularizers (analysis-time only; diagnostics do not mutate Î¼)

# ------------------------------------------------------------------

l2:
enable: true
lambda: 0.05                                          # weight used for reporting / ranking
aggregate: \["mean", "p95", "max"]

tv:
enable: true                                          # Total Variation = Î£ |Î”Î¼|
lambda: 0.02
per\_bin: true                                         # export per-bin TV contributions
aggregate: \["mean", "p95", "max"]

savgol:
enable: false                                         # optional reference smoother
window\_length: 9                                      # odd
polyorder: 2
mode: "interp"                                        # scipy-compatible mode
report\_residuals: true                                # |Î¼ âˆ’ Î¼\_savgol|
export\_residuals: "\${paths.artifacts}/smoothness/savgol\_residuals.csv"

# ------------------------------------------------------------------

# Entropy map (information density proxy per bin)

# ------------------------------------------------------------------

entropy:
enable: true
method: "shannon"                                     # implemented in code
window: 7
normalize: true
aggregate: \["mean", "p95", "max"]
eps: 1.0e-12

# ------------------------------------------------------------------

# Molecule / region overlays (symbolic-aware reporting)

# ------------------------------------------------------------------

molecule\_regions:
enable: true
labels: \["H2O", "CH4", "CO2", "CO", "NH3"]            # resolved in code via wavelength map
per\_region\_aggregates: \["mean", "p95", "max"]
\# Optional: treat regions differently in summaries (e.g., SNR-weighted)
region\_weighting: "uniform"                           # "uniform" | "snr" | "prior"

# ------------------------------------------------------------------

# Symbolic / calibration overlays (read-only fusion)

# ------------------------------------------------------------------

overlays:
symbolic\_mask\_path: "\${paths.artifacts}/symbolic/violations\_mask.npy"   # optional
corel\_coverage\_json: "\${paths.artifacts}/calibration/corel\_coverage.json"
temperature\_scaling\_json: "\${paths.artifacts}/calibration/temperature\_scaling.json"
use\_corel\_weights: false                               # weight aggregates by COREL coverage deltas if available

# ------------------------------------------------------------------

# Flagging heuristics (non-binding; for dashboards & CI)

# ------------------------------------------------------------------

flags:
grad\_mag\_p95: 1.50                                    # flag planet if p95(|âˆ‚Î¼/âˆ‚Î»|) > threshold
curvature\_p95: 1.25                                   # flag planet if p95(|âˆ‚Â²Î¼/âˆ‚Î»Â²|) > threshold
tv\_per\_bin\_max: 0.30                                  # optional TV-based cap per bin (report only)
entropy\_p95: 0.75                                     # flag if entropy exceeds threshold
min\_bins\_for\_eval: 50

# ------------------------------------------------------------------

# Plots

# ------------------------------------------------------------------

plots:
gradient\_heatmap: true                                # per-bin |âˆ‚Î¼/âˆ‚Î»| heatmap
curvature\_heatmap: true                               # per-bin |âˆ‚Â²Î¼/âˆ‚Î»Â²| heatmap
tv\_map: true                                          # per-bin TV contribution
entropy\_map: true
overlay\_symbolic\_violations: true                     # if symbolic masks are available
per\_region\_bar: true
dpi: 160
figsize: \[12, 4]
save\_png: true
save\_html: true
html\_interactive: true                                # enable Plotly/Altair interactive HTML
color\_map: "viridis"
out\_dir: "\${paths.artifacts}/plots/smoothness"
\# Embedding overlays (if HTML artifacts exist)
embed\_umap\_overlay: true
embed\_tsne\_overlay: true
link\_planet\_pages: true                                # if dashboard supports planet pages

# ------------------------------------------------------------------

# Exports

# ------------------------------------------------------------------

export:
out\_base: "\${paths.artifacts}/smoothness"
per\_planet\_csv: "\${smoothness.export.out\_base}/per\_planet\_metrics.csv"   # aggregates per planet
per\_bin\_csv: "\${smoothness.export.out\_base}/per\_bin\_metrics.csv"         # per-planetÃ—bin values (long format)
flags\_csv: "\${smoothness.export.out\_base}/flags.csv"                     # planets/bins exceeding thresholds
summary\_json: "\${smoothness.export.out\_base}/summary.json"               # global stats, thresholds, counts
jsonl\_events: "\${smoothness.export.out\_base}/events.jsonl"               # stepwise log for CI
first\_derivative\_npy: "\${smoothness.export.out\_base}/grad\_first.npy"     # \[N, 283]
second\_derivative\_npy: "\${smoothness.export.out\_base}/grad\_second.npy"   # \[N, 283]
tv\_npy: "\${smoothness.export.out\_base}/tv.npy"                            # \[N, 283]
entropy\_npy: "\${smoothness.export.out\_base}/entropy.npy"                  # \[N, 283]
per\_region\_csv: "\${smoothness.export.out\_base}/per\_region\_metrics.csv"    # region-aggregated metrics

# ------------------------------------------------------------------

# Reproducibility

# ------------------------------------------------------------------

reproducibility:
log\_hash: true                                        # record config hash in v50\_debug\_log.md
snapshot\_config: true                                 # save smoothness.yaml snapshot with outputs
run\_manifest: "\${smoothness.export.out\_base}/manifest.json"
record\_cli\_invocation: true
record\_env: true                                      # python/packages/cuda versions
append\_v50\_debug\_log: "\${paths.logs}/v50\_debug\_log.md"

# ------------------------------------------------------------------

# Performance & caching

# ------------------------------------------------------------------

cache:
enable: true
dir: "\${paths.cache}/smoothness"
reuse\_if\_hash\_matches: true
parallel:
workers: 8
backend: "thread"                                     # "thread" | "process"
perf:
device: "auto"                                        # "auto" | "cpu" | "cuda:0" | "mps"
dtype: "float32"
chunk\_size\_planets: 256                               # batch size for planet-wise ops

# ------------------------------------------------------------------

# Failure policy

# ------------------------------------------------------------------

policy:
fail\_on\_missing\_inputs: false
warn\_on\_small\_groups: true
continue\_on\_plot\_errors: true

# ------------------------------------------------------------------

# Report & dashboard integration

# ------------------------------------------------------------------

report:
enable: true
versioned\_html: true                                   # write v{n}.html with bumping index
out\_dir: "\${paths.artifacts}/reports"
base\_name: "smoothness\_diagnostics"
open\_in\_browser: false
include\_sections:
\- "summary\_cards"
\- "gradient\_heatmap"
\- "curvature\_heatmap"
\- "tv\_entropy\_panels"
\- "molecule\_region\_bars"
\- "flags\_table"
\- "symbolic\_overlay\_panel"

# ------------------------------------------------------------------

# CI/QA hooks (used by selftests and CI workflows)

# ------------------------------------------------------------------

ci:
require\_exports: true                                  # CI fails if expected exports missing
require\_plots: true                                    # CI fails if required plots missing
max\_html\_size\_mb: 40
sanity:
max\_nan\_fraction: 0.001
max\_empty\_rows\_fraction: 0.10
max\_flagged\_planet\_fraction: 0.95

# ------------------------------------------------------------------

# Cross-module bindings (file discovery for other tools)

# ------------------------------------------------------------------

bindings:
diagnostic\_summary\_json: "\${paths.artifacts}/diagnostics/diagnostic\_summary.json"
symbolic\_rule\_rank\_json: "\${paths.artifacts}/symbolic/rule\_rank.json"
symbolic\_mask\_npy: "\${paths.artifacts}/symbolic/violations\_mask.npy"
umap\_html: "\${paths.artifacts}/embeddings/umap.html"
tsne\_html: "\${paths.artifacts}/embeddings/tsne.html"
