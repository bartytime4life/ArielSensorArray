// src/gui/components/Modal.tsx
// ============================================================================
// ðŸªŸ Modal Component â€” SpectraMind V50 GUI (CLI-first, GUI-optional)
// ----------------------------------------------------------------------------
// Responsibilities
//   â€¢ Accessible dialog with focus handling and ESC/overlay close
//   â€¢ Tailwind-styled overlay + panel; dark-mode aware
//   â€¢ Portal render to <body> (falls back to inline if portal not available)
//   â€¢ Composable API with subcomponents: Modal.Header, Modal.Body, Modal.Footer
//
// Usage:
//   <Modal open={isOpen} onClose={() => setOpen(false)} title="Diagnostics">
//     <Modal.Body>â€¦contentâ€¦</Modal.Body>
//     <Modal.Footer>
//       <Button variant="ghost" onClick={() => setOpen(false)}>Cancel</Button>
//       <Button onClick={submit}>Run</Button>
//     </Modal.Footer>
//   </Modal>
//
// Notes:
//   â€¢ Focus trapping here is minimal (loops within dialog). For full trap, consider
//     a dedicated a11y utility, but this covers common keyboard navigation.
// ============================================================================

import * as React from "react";
import { createPortal } from "react-dom";
import clsx from "clsx";

type ModalSize = "sm" | "md" | "lg" | "xl";

export interface ModalProps {
  open: boolean;
  onClose: () => void;
  title?: React.ReactNode;
  children?: React.ReactNode;
  /** Close when clicking the backdrop overlay (default: true) */
  closeOnOverlay?: boolean;
  /** Close on Escape key (default: true) */
  closeOnEsc?: boolean;
  /** Optional size preset */
  size?: ModalSize;
  /** Optional id for aria-labelledby; will be autogenerated if omitted */
  labelledById?: string;
  /** Additional classes for the panel container */
  className?: string;
  /** Initial focus ref inside the dialog when opening */
  initialFocusRef?: React.RefObject<HTMLElement>;
}

const sizeToMaxWidth: Record<ModalSize, string> = {
  sm: "max-w-md",
  md: "max-w-lg",
  lg: "max-w-2xl",
  xl: "max-w-4xl",
};

function useIsomorphicLayoutEffect(effect: React.EffectCallback, deps: React.DependencyList) {
  const useLayout = typeof window !== "undefined" ? React.useLayoutEffect : React.useEffect;
  useLayout(effect, deps);
}

export const Modal: React.FC<ModalProps> & {
  Header: React.FC<React.HTMLAttributes<HTMLDivElement>>;
  Body: React.FC<React.HTMLAttributes<HTMLDivElement>>;
  Footer: React.FC<React.HTMLAttributes<HTMLDivElement>>;
} = ({
  open,
  onClose,
  title,
  children,
  closeOnOverlay = true,
  closeOnEsc = true,
  size = "md",
  labelledById,
  className,
  initialFocusRef,
}) => {
  const overlayRef = React.useRef<HTMLDivElement>(null);
  const panelRef = React.useRef<HTMLDivElement>(null);
  const lastActiveRef = React.useRef<HTMLElement | null>(null);
  const [mounted, setMounted] = React.useState(false);
  const titleId = React.useId();
  const computedLabelId = labelledById ?? `modal-title-${titleId}`;

  // Mount flag for portal safety
  React.useEffect(() => setMounted(true), []);

  // Lock body scroll when open
  React.useEffect(() => {
    if (!open) return;
    const original = document.body.style.overflow;
    document.body.style.overflow = "hidden";
    return () => {
      document.body.style.overflow = original;
    };
  }, [open]);

  // Save/restore focus, move focus into dialog
  useIsomorphicLayoutEffect(() => {
    if (open) {
      lastActiveRef.current = document.activeElement as HTMLElement | null;
      const target =
        initialFocusRef?.current ??
        (panelRef.current?.querySelector<HTMLElement>("[data-autofocus]") ??
          panelRef.current?.querySelector<HTMLElement>(
            'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
          ));
      target?.focus();
    } else if (lastActiveRef.current) {
      lastActiveRef.current.focus();
    }
  }, [open]);

  // ESC to close
  React.useEffect(() => {
    if (!open || !closeOnEsc) return;
    const onKey = (e: KeyboardEvent) => {
      if (e.key === "Escape") {
        e.stopPropagation();
        onClose();
      }
    };
    document.addEventListener("keydown", onKey, { capture: true });
    return () => document.removeEventListener("keydown", onKey, { capture: true } as any);
  }, [open, closeOnEsc, onClose]);

  // Minimal focus trap: loop tab within panel
  React.useEffect(() => {
    if (!open) return;
    const handleKeydown = (e: KeyboardEvent) => {
      if (e.key !== "Tab" || !panelRef.current) return;
      const focusables = Array.from(
        panelRef.current.querySelectorAll<HTMLElement>(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        )
      ).filter((el) => !el.hasAttribute("disabled"));
      if (focusables.length === 0) return;

      const first = focusables[0];
      const last = focusables[focusables.length - 1];
      const current = document.activeElement as HTMLElement | null;

      if (e.shiftKey && current === first) {
        e.preventDefault();
        last.focus();
      } else if (!e.shiftKey && current === last) {
        e.preventDefault();
        first.focus();
      }
    };
    document.addEventListener("keydown", handleKeydown);
    return () => document.removeEventListener("keydown", handleKeydown);
  }, [open]);

  if (!open) return null;

  const modalContent = (
    <div
      ref={overlayRef}
      className={clsx(
        "fixed inset-0 z-50 flex items-center justify-center",
        "bg-black/40 backdrop-blur-[1px]"
      )}
      onMouseDown={(e) => {
        if (!closeOnOverlay) return;
        if (e.target === overlayRef.current) onClose();
      }}
    >
      <div
        role="dialog"
        aria-modal="true"
        aria-labelledby={computedLabelId}
        ref={panelRef}
        className={clsx(
          "w-full mx-4 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700",
          "bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100",
          sizeToMaxWidth[size],
          className
        )}
        onMouseDown={(e) => {
          // Prevent overlay click when interacting inside the panel
          e.stopPropagation();
        }}
      >
        {/* Header (if title supplied, otherwise consumer may render one) */}
        {title !== undefined ? (
          <div className="flex items-start justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <h2 id={computedLabelId} className="text-lg font-semibold">
              {title}
            </h2>
            <button
              type="button"
              aria-label="Close dialog"
              onClick={onClose}
              className={clsx(
                "ml-3 inline-flex items-center justify-center rounded-full p-2",
                "text-gray-500 hover:text-gray-900 dark:hover:text-white",
                "hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus-visible:ring-2"
              )}
            >
              <svg
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
                className="h-5 w-5"
              >
                <path
                  fillRule="evenodd"
                  d="M10 8.586 4.293 2.879A1 1 0 1 0 2.879 4.293L8.586 10l-5.707 5.707a1 1 0 1 0 1.414 1.414L10 11.414l5.707 5.707a1 1 0 1 0 1.414-1.414L11.414 10l5.707-5.707A1 1 0 1 0 15.707 2.879L10 8.586Z"
                  clipRule="evenodd"
                />
              </svg>
            </button>
          </div>
        ) : null}

        {/* Content */}
        <div className="p-4">{children}</div>
      </div>
    </div>
  );

  if (mounted && typeof document !== "undefined") {
    return createPortal(modalContent, document.body);
  }
  // Fallback (SSR or no portal)
  return modalContent;
};

// Subcomponents for composition
const Section: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({
  className,
  ...props
}) => <div className={clsx("p-4", className)} {...props} />;

const Header: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({
  className,
  ...props
}) => (
  <div
    className={clsx(
      "p-4 border-b border-gray-200 dark:border-gray-700 text-lg font-semibold",
      className
    )}
    {...props}
  />
);

const Body: React.FC<React.HTMLAttributes<HTMLDivElement>> = (props) => (
  <Section {...props} />
);

const Footer: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({
  className,
  ...props
}) => (
  <div
    className={clsx(
      "p-4 pt-3 border-t border-gray-200 dark:border-gray-700 flex items-center justify-end gap-2",
      className
    )}
    {...props}
  />
);

Modal.Header = Header;
Modal.Body = Body;
Modal.Footer = Footer;

export default Modal;
