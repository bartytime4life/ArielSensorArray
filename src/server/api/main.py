```python
# src/server/api/main.py
# =============================================================================
# 🌐 SpectraMind V50 — API Assembly (FastAPI)
# -----------------------------------------------------------------------------
# Purpose
#   Provide a small assembly module to register the API surface for the server.
#   This file wires together:
#     • /api/authz/*        (thin admin/auth endpoints)
#     • /api/diagnostics/*  (serve CLI-produced artifacts; optional CLI trigger)
#
# Design
#   • CLI-first: this API NEVER computes diagnostics; it only orchestrates and
#     serves artifacts generated by `spectramind …` CLI.
#   • Reproducible by construction: endpoints surface versioned artifacts.
#   • Composable: can be used to build a standalone API app, or to register
#     routers onto a broader server (see `register_api(app)`).
#
# Usage
#   In a larger app (e.g., src/server/main.py):
#       from src.server.api.main import register_api
#       app = FastAPI(...)
#       register_api(app)
#
#   Standalone (for API-only server):
#       uvicorn src.server.api.main:app --reload --port 8001
#
# Environment
#   CORS_ALLOW_ORIGINS        : "*" or comma-separated list
#   CORS_ALLOW_METHODS        : e.g., "GET,POST,OPTIONS"
#   CORS_ALLOW_HEADERS        : e.g., "Content-Type,Authorization,X-API-Key"
#   CORS_ALLOW_CREDENTIALS    : "1" to enable credentials
# =============================================================================

from __future__ import annotations

import os
from typing import List

from fastapi import APIRouter, FastAPI
from fastapi.middleware.cors import CORSMiddleware

# Local API routers / registrars
from src.server.api.authz import router as authz_router
from src.server.api.diagnostics import register_routes as register_diagnostics

# -----------------------------------------------------------------------------
# CORS helpers
# -----------------------------------------------------------------------------
def _as_bool(s: str | None, default: bool = False) -> bool:
    if s is None:
        return default
    return s.strip().lower() in {"1", "true", "yes", "on"}


def _split_csv(s: str | None, *, default: str = "*") -> List[str]:
    raw = (s or default).strip()
    if raw == "*":
        return ["*"]
    return [x.strip() for x in raw.split(",") if x.strip()]


def _ensure_cors(app: FastAPI) -> None:
    # If CORS already present, skip
    for m in getattr(app, "user_middleware", []):
        if getattr(m, "cls", None) is CORSMiddleware:
            return

    allow_origins = _split_csv(os.getenv("CORS_ALLOW_ORIGINS", "*"))
    allow_methods = _split_csv(os.getenv("CORS_ALLOW_METHODS", "GET,POST,OPTIONS"))
    allow_headers = _split_csv(
        os.getenv("CORS_ALLOW_HEADERS", "Content-Type,Authorization,X-API-Key")
    )
    allow_credentials = _as_bool(os.getenv("CORS_ALLOW_CREDENTIALS", "0"))

    app.add_middleware(
        CORSMiddleware,
        allow_origins=allow_origins,
        allow_methods=allow_methods,
        allow_headers=allow_headers,
        allow_credentials=allow_credentials,
        expose_headers=["Content-Disposition"],  # useful for file downloads
    )


# -----------------------------------------------------------------------------
# API Router (lightweight top-level for misc /api routes)
# -----------------------------------------------------------------------------
api_router = APIRouter(prefix="/api", tags=["api"])

@api_router.get("/health", summary="API health")
def api_health() -> dict:
    return {"status": "ok"}


# -----------------------------------------------------------------------------
# Public registration helpers
# -----------------------------------------------------------------------------
def register_api(app: FastAPI) -> None:
    """
    Register all API routers and static mounts onto an existing FastAPI app.
    - Adds CORS (if not already present)
    - Includes /api base router and /api/authz router
    - Registers diagnostics API and mounts /artifacts
    """
    _ensure_cors(app)

    # Base API health
    app.include_router(api_router)

    # AuthZ admin/introspection endpoints
    app.include_router(authz_router)

    # Diagnostics API and static artifacts mount
    register_diagnostics(app)


def build_app() -> FastAPI:
    """
    Build a standalone FastAPI app that serves only the API surface.
    Useful for running the API as its own service:
        uvicorn src.server.api.main:app --reload --port 8001
    """
    app = FastAPI(
        title=os.getenv("APP_TITLE", "SpectraMind V50 — API"),
        description=os.getenv(
            "APP_DESC",
            "Thin FastAPI layer exposing CLI-produced artifacts and minimal authz.",
        ),
        version=os.getenv("APP_VERSION", "0.0.0-dev"),
        docs_url=os.getenv("DOCS_URL", "/docs"),
        redoc_url=os.getenv("REDOC_URL", "/redoc"),
        openapi_url=os.getenv("OPENAPI_URL", "/openapi.json"),
    )
    register_api(app)
    return app


# Standalone API app object
app = build_app()


# -----------------------------------------------------------------------------
# Uvicorn Entrypoint (API-only server)
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    import uvicorn

    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "8001"))
    reload = _as_bool(os.getenv("RELOAD"), default=False)

    uvicorn.run(app, host=host, port=port, reload=reload)
```
