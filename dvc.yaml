# ==============================================================================
# dvc.yaml — SpectraMind V50
# Declarative, CI-safe pipeline:
#   • raw → calibrated → train → predict → diagnostics → submit
#   • Hydra-driven configs, DVC params/plots, Kaggle-ready bundle
#   • Physics-informed (FGS1 Mamba, AIRS GNN) + neuro-symbolic diagnostics
#
# Usage:
#   dvc repro
#   dvc exp run -S data.mode=kaggle -S training.epochs=1
#   dvc plots show
#   dvc plots diff
# ==============================================================================

stages:

  calibrate:
    desc: "ADC, dark, flat, CDS, nonlinearity → calibrated cubes (FGS1 + AIRS)."
    cmd: |
      bash -c 'set -euo pipefail
      poetry run spectramind calibrate \
        --config-dir config \
        --config-name config_v50.yaml \
        --input ${params.data.fgs1_path} ${params.data.airs_path} \
        --output ${params.data.calibration_path} \
        --log logs/calibration.log'
    deps:
      - config/config_v50.yaml
      - src/pipeline/calibration_pipeline.py
      - ${params.data.fgs1_path}
      - ${params.data.airs_path}
    outs:
      - path: ${params.data.calibration_path}
        persist: true
    outs_no_cache:
      - logs/calibration.log
    params:
      - data.mode
      - data.fgs1_path
      - data.airs_path
      - data.calibration_path
      - calibration
    metrics:
      - logs/calibration.json:
          cache: false
    plots:
      - logs/calibration_plots

  train:
    desc: "Train V50 (FGS1 Mamba + AIRS GNN + decoder) with physics/symbolic options."
    cmd: |
      bash -c 'set -euo pipefail
      poetry run spectramind train \
        --config-dir config \
        --config-name config_v50.yaml \
        data.mode=${params.data.mode} \
        training.epochs=${params.training.epochs} \
        training.batch_size=${params.training.batch_size} \
        training.lr=${params.training.lr} \
        training.seed=${params.training.seed} \
        model.encoder=${params.model.encoder} \
        model.gnn=${params.model.gnn} \
        model.decoder=${params.model.decoder} \
        data.calibration_path=${params.data.calibration_path} \
        +outputs.dir=outputs/models'
    deps:
      - ${params.data.calibration_path}
      - config/config_v50.yaml
      - src/train/train_v50.py
      - src/models/fgs1_mamba.py
      - src/models/airs_gnn.py
      - src/models/multi_scale_decoder.py
    outs:
      - path: outputs/models
        persist: true
    params:
      - data.mode
      - data.calibration_path
      - training
      - model
    metrics:
      - outputs/models/metrics.json:
          cache: false
    plots:
      - outputs/models/loss_curve.png

  predict:
    desc: "Model inference → μ, σ predictions + summary/manifest."
    cmd: |
      bash -c 'set -euo pipefail
      poetry run spectramind predict \
        --config-dir config \
        --config-name config_v50.yaml \
        data.mode=${params.data.mode} \
        --model outputs/models \
        --input ${params.data.calibration_path} \
        --output outputs/predictions'
    deps:
      - outputs/models
      - ${params.data.calibration_path}
      - src/predict/predict_v50.py
      - config/config_v50.yaml
    outs:
      - path: outputs/predictions
        persist: true
    params:
      - data.mode
      - data.bins
      - submission.kaggle_format
    metrics:
      - outputs/predictions/summary.json:
          cache: false

  diagnostics:
    desc: "Generate HTML dashboard + JSON summary (GLL, FFT, SHAP, symbolic overlays)."
    cmd: |
      bash -c 'set -euo pipefail
      poetry run spectramind diagnose dashboard \
        --config-dir config \
        --config-name config_v50.yaml \
        data.mode=${params.data.mode} \
        --pred outputs/predictions \
        --out outputs/diagnostics \
        --html-out outputs/diagnostics/report.html'
    deps:
      - outputs/predictions
      - src/diagnostics/generate_html_report.py
      - src/diagnostics/generate_diagnostic_summary.py
      - src/diagnostics/shap_overlay.py
      - src/diagnostics/plot_umap_v50.py
      - src/diagnostics/plot_tsne_interactive.py
      - src/diagnostics/symbolic_influence_map.py
      - config/config_v50.yaml
    outs:
      - path: outputs/diagnostics
        persist: true
    params:
      - data.mode
      - diagnostics
    metrics:
      - outputs/diagnostics/diagnostic_summary.json:
          cache: false
    plots:
      - outputs/diagnostics/*.png
      - outputs/diagnostics/*.html

  submit:
    desc: "Validate & bundle Kaggle submission."
    cmd: |
      bash -c 'set -euo pipefail
      poetry run spectramind submit \
        --config-dir config \
        --config-name config_v50.yaml \
        data.mode=${params.data.mode} \
        --pred outputs/predictions \
        --bundle outputs/submission/bundle.zip \
        --meta outputs/submission/manifest.json \
        --validate ${params.submission.validate_before_zip}'
    deps:
      - outputs/predictions
      - outputs/diagnostics
      - src/cli/cli_submit.py
      - config/config_v50.yaml
    outs:
      - path: outputs/submission/bundle.zip
        persist: true
      - path: outputs/submission/manifest.json
        persist: true
    params:
      - data.mode
      - submission
    metrics:
      - outputs/submission/manifest.json:
          cache: false

# ------------------------------------------------------------------------------
# Global metrics/plots
# ------------------------------------------------------------------------------
metrics:
  - outputs/diagnostics/diagnostic_summary.json:
      cache: false

plots:
  - ROC:
      path: outputs/diagnostics/roc.csv
      x: fpr
      y: [tpr]
      title: "ROC Curve"
  - Calibration:
      path: outputs/diagnostics/reliability.csv
      x: expected
      y: [observed]
      title: "Uncertainty Calibration (Reliability)"
  - GLL:
      path: outputs/diagnostics/binwise.csv
      x: bin
      y: [gll]
      title: "Gaussian Log-Likelihood per Bin"
  - FFT:
      path: outputs/diagnostics/fft.csv
      x: frequency
      y: [power]
      title: "FFT Power Spectrum"
  - Symbolic:
      path: outputs/diagnostics/symbolic_violations.csv
      x: bin
      y: [violation_score]
      title: "Symbolic Rule Violations"
