# ==============================================================================
# dvc.yaml — SpectraMind V50 (ArielSensorArray)
# ------------------------------------------------------------------------------
# Declarative, CI‑safe pipeline:
#   • raw → calibrated → train → predict → diagnostics → submit
#   • Hydra-driven configs, DVC params/plots, Kaggle-ready bundle
#   • Physics-informed (FGS1 Mamba, AIRS GNN) + neuro‑symbolic diagnostics
#
# Usage:
#   dvc repro                 # rebuild entire pipeline
#   dvc exp run               # run an experiment with param overrides
#   dvc plots show            # render plots configured below
#   dvc plots diff            # compare plots across commits/experiments
# ==============================================================================

stages:

  # ------------------------------------------------------------------
  calibrate:
    cmd: >
      poetry run spectramind calibrate
        --config-dir config
        --config-name config_v50.yaml
        --input ${data.fgs1_path} ${data.airs_path}
        --output ${data.calibration_path}
        --log logs/calibration.log
    deps:
      - config/config_v50.yaml
      - src/pipeline/calibration_pipeline.py
      - ${data.fgs1_path}
      - ${data.airs_path}
    outs:
      - ${data.calibration_path}
    params:
      - data.fgs1_path
      - data.airs_path
      - data.calibration_path
    metrics:
      - logs/calibration.json
    plots:
      - logs/calibration_plots

  # ------------------------------------------------------------------
  train:
    cmd: >
      poetry run spectramind train
        --config-dir config
        --config-name config_v50.yaml
        training.epochs=${training.epochs}
        training.batch_size=${training.batch_size}
        training.lr=${training.lr}
        training.seed=${training.seed}
        model.encoder=${model.encoder}
        model.gnn=${model.gnn}
        model.decoder=${model.decoder}
        data.calibration_path=${data.calibration_path}
        +outputs.dir=outputs/models
    deps:
      - ${data.calibration_path}
      - config/config_v50.yaml
      - src/train/train_v50.py
      - src/models/fgs1_mamba.py
      - src/models/airs_gnn.py
      - src/models/multi_scale_decoder.py
    outs:
      - outputs/models
    params:
      - training
      - model
      - data.calibration_path
    metrics:
      - outputs/models/metrics.json
    plots:
      - outputs/models/loss_curve.png

  # ------------------------------------------------------------------
  predict:
    cmd: >
      poetry run spectramind predict
        --config-dir config
        --config-name config_v50.yaml
        --model outputs/models
        --input ${data.calibration_path}
        --output outputs/predictions
    deps:
      - outputs/models
      - ${data.calibration_path}
      - src/predict/predict_v50.py
    outs:
      - outputs/predictions
    params:
      - data.bins
      - submission.kaggle_format
    metrics:
      - outputs/predictions/summary.json

  # ------------------------------------------------------------------
  diagnostics:
    cmd: >
      poetry run spectramind diagnose dashboard
        --config-dir config
        --config-name config_v50.yaml
        --pred outputs/predictions
        --out outputs/diagnostics
        --html-out outputs/diagnostics/report.html
    deps:
      - outputs/predictions
      - src/diagnostics/generate_html_report.py
      - src/diagnostics/generate_diagnostic_summary.py
      - src/diagnostics/shap_overlay.py
      - src/diagnostics/plot_umap_v50.py
      - src/diagnostics/plot_tsne_interactive.py
      - src/diagnostics/symbolic_influence_map.py
    outs:
      - outputs/diagnostics
    params:
      - diagnostics
    metrics:
      - outputs/diagnostics/diagnostic_summary.json
    plots:
      - outputs/diagnostics/*.png
      - outputs/diagnostics/*.html

  # ------------------------------------------------------------------
  submit:
    cmd: >
      poetry run spectramind submit
        --config-dir config
        --config-name config_v50.yaml
        --pred outputs/predictions
        --bundle outputs/submission/bundle.zip
        --meta outputs/submission/manifest.json
        --validate ${submission.validate_before_zip}
    deps:
      - outputs/predictions
      - outputs/diagnostics
      - src/cli/cli_submit.py
    outs:
      - outputs/submission/bundle.zip
      - outputs/submission/manifest.json
    params:
      - submission
    metrics:
      - outputs/submission/manifest.json

# ------------------------------------------------------------------------------
# Global metrics/plots (DVC will discover series; HTML/PNG listed for convenience)
# ------------------------------------------------------------------------------
metrics:
  - outputs/diagnostics/diagnostic_summary.json:
      cache: false

plots:
  - ROC:
      path: outputs/diagnostics/roc.csv
      x: fpr
      y:
        - tpr
      title: "ROC Curve"
  - Calibration:
      path: outputs/diagnostics/reliability.csv
      x: expected
      y:
        - observed
      title: "Uncertainty Calibration (Reliability)"
  - GLL:
      path: outputs/diagnostics/binwise.csv
      x: bin
      y:
        - gll
      title: "Gaussian Log-Likelihood per Bin"
  - FFT:
      path: outputs/diagnostics/fft.csv
      x: frequency
      y:
        - power
      title: "FFT Power Spectrum"
  - Symbolic:
      path: outputs/diagnostics/symbolic_violations.csv
      x: bin
      y:
        - violation_score
      title: "Symbolic Rule Violations"

# ==============================================================================