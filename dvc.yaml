==============================================================================

dvc.yaml — SpectraMind V50 (Ultimate Upgrade: Hydra+DVC, CI-safe, Kaggle-ready)

Declarative, mission-grade pipeline:

• raw → calibrate → train → predict → diagnostics → bundle → (optional) submit

• Hydra-driven configs; DVC params/plots; robust logs/metrics; symbolic diagnostics

• Deterministic, non-interactive; safe no-ops when optional files are absent



Quickstart:

dvc repro

dvc exp run -S data.mode=kaggle -S training.epochs=1

dvc plots show

dvc plots diff



Notes:

• All CLI commands are expected to be available via poetry run spectramind

• Parameter values come from params.yaml unless overridden with -S key=value

• Stages persist key outputs to support CI caching across runs

==============================================================================

stages:

selftest:
desc: “Fast integrity checks (CLI/files/Hydra wiring).”
cmd: |
bash -euo pipefail -c ’
echo “>>> SpectraMind V50 selftest”;
poetry run spectramind selftest || poetry run spectramind selftest –deep || true
’
deps:
- config/config_v50.yaml
params:
- data.mode
outs_no_cache:
- logs/selftest.log
metrics:
- logs/selftest.json:
cache: false

calibrate:
desc: “ADC, dark, flat, CDS, nonlinearity → calibrated cubes (FGS1 + AIRS).”
cmd: |
bash -euo pipefail -c ’
mkdir -p logs;
poetry run spectramind calibrate 
–config-dir config 
–config-name config_v50.yaml 
–input ${params.data.fgs1_path} ${params.data.airs_path} 
–output ${params.data.calibration_path} 
–log logs/calibration.log 
–json logs/calibration.json
’
deps:
- config/config_v50.yaml
- src/pipeline/calibration_pipeline.py
- ${params.data.fgs1_path}
- ${params.data.airs_path}
outs:
- path: ${params.data.calibration_path}
persist: true
outs_no_cache:
- logs/calibration.log
params:
- data.mode
- data.fgs1_path
- data.airs_path
- data.calibration_path
- calibration
metrics:
- logs/calibration.json:
cache: false
plots:
- logs/calibration_plots

train:
desc: “Train V50 (FGS1 Mamba + AIRS GNN + multi-scale decoder) with physics/symbolic options.”
cmd: |
bash -euo pipefail -c ’
poetry run spectramind train 
–config-dir config 
–config-name config_v50.yaml 
data.mode=${params.data.mode} 
training.epochs=${params.training.epochs} 
training.batch_size=${params.training.batch_size} 
training.lr=${params.training.lr} 
training.seed=${params.training.seed} 
model.encoder=${params.model.encoder} 
model.gnn=${params.model.gnn} 
model.decoder=${params.model.decoder} 
data.calibration_path=${params.data.calibration_path} 
+outputs.dir=outputs/models
’
deps:
- ${params.data.calibration_path}
- config/config_v50.yaml
- src/train/train_v50.py
- src/models/fgs1_mamba.py
- src/models/airs_gnn.py
- src/models/multi_scale_decoder.py
outs:
- path: outputs/models
persist: true
params:
- data.mode
- data.calibration_path
- training
- model
metrics:
- outputs/models/metrics.json:
cache: false
plots:
- outputs/models/loss_curve.csv:
x: step
y: [train_loss, val_loss]
title: “Training/Validation Loss”

predict:
desc: “Model inference → μ, σ predictions + submission + summary/manifest.”
cmd: |
bash -euo pipefail -c ’
poetry run spectramind predict 
–config-dir config 
–config-name config_v50.yaml 
data.mode=${params.data.mode} 
–model outputs/models 
–input ${params.data.calibration_path} 
–output outputs/predictions
’
deps:
- outputs/models
- ${params.data.calibration_path}
- src/predict/predict_v50.py
- config/config_v50.yaml
outs:
- path: outputs/predictions
persist: true
params:
- data.mode
- data.bins
- submission.kaggle_format
metrics:
- outputs/predictions/summary.json:
cache: false
plots:
- outputs/predictions/uncertainty_hist.csv:
x: sigma
y: [count]
title: “σ Distribution (All Bins)”

diagnostics:
desc: “Generate HTML dashboard + JSON summary (GLL, FFT, SHAP, symbolic overlays).”
cmd: |
bash -euo pipefail -c ’
poetry run spectramind diagnose dashboard 
–config-dir config 
–config-name config_v50.yaml 
data.mode=${params.data.mode} 
–pred outputs/predictions 
–out outputs/diagnostics 
–html-out outputs/diagnostics/report.html || true
’
deps:
- outputs/predictions
- src/diagnostics/generate_html_report.py
- src/diagnostics/generate_diagnostic_summary.py
- src/diagnostics/shap_overlay.py
- src/diagnostics/plot_umap_v50.py
- src/diagnostics/plot_tsne_interactive.py
- src/diagnostics/symbolic_influence_map.py
- config/config_v50.yaml
outs:
- path: outputs/diagnostics
persist: true
params:
- data.mode
- diagnostics
metrics:
- outputs/diagnostics/diagnostic_summary.json:
cache: false
plots:
- outputs/diagnostics/.png
- outputs/diagnostics/.html

bundle:
desc: “Create reproducible bundle (manifests + diagnostics + predictions).”
cmd: |
bash -euo pipefail -c ’
poetry run spectramind repro-snapshot || true
python - <<PY
import os, tarfile, time, pathlib, json
OUT=“outputs/bundles”
pathlib.Path(OUT).mkdir(parents=True, exist_ok=True)
runid=time.strftime(”%Y%m%dT%H%M%SZ”, time.gmtime())
bundle=os.path.join(OUT, f”spectramind_ci_bundle_{runid}.tar.gz”)
with tarfile.open(bundle, “w:gz”) as tar:
for p in [“outputs/diagnostics”, “outputs/predictions”, “outputs/log_table.md”, “outputs/log_table.csv”, “outputs/manifests”]:
if os.path.exists(p):
tar.add(p, arcname=os.path.basename(p))
print(“Bundle:”, bundle)
meta={“bundle”: bundle, “ts_utc”: time.strftime(”%Y-%m-%dT%H:%M:%SZ”, time.gmtime())}
pathlib.Path(“outputs/submission”).mkdir(parents=True, exist_ok=True)
with open(“outputs/submission/manifest.json”,“w”) as f: json.dump(meta,f,indent=2)
PY
’
deps:
- outputs/diagnostics
- outputs/predictions
outs:
- path: outputs/bundles
persist: true
- path: outputs/submission/manifest.json
persist: true
metrics:
- outputs/submission/manifest.json:
cache: false

submit:
desc: “Validate & bundle Kaggle submission (guarded by params.submission.validate_before_zip).”
cmd: |
bash -euo pipefail -c ’
poetry run spectramind submit 
–config-dir config 
–config-name config_v50.yaml 
data.mode=${params.data.mode} 
–pred outputs/predictions 
–bundle outputs/submission/bundle.zip 
–meta outputs/submission/manifest.json 
–validate ${params.submission.validate_before_zip} || true
’
deps:
- outputs/predictions
- outputs/diagnostics
- outputs/submission/manifest.json
- src/cli/cli_submit.py
- config/config_v50.yaml
outs:
- path: outputs/submission/bundle.zip
persist: true
params:
- data.mode
- submission
metrics:
- outputs/submission/manifest.json:
cache: false

ablate:
desc: “Fast grid ablation (light) + leaderboard post-process.”
cmd: |
bash -euo pipefail -c ’
poetry run spectramind ablate -m ablate.sweeper=basic +ablate.search=v50_fast_grid ablation=ablation_light || true
if [ -f tools/ablation_post.py ]; then
python tools/ablation_post.py 
–csv outputs/ablate/leaderboard.csv 
–metric gll –ascending 
–top-n 5 –outdir outputs/ablate 
–html-template tools/leaderboard_template.html || true
fi
’
deps:
- outputs/models
- config/config_v50.yaml
outs:
- path: outputs/ablate
persist: true
params:
- ablation
plots:
- outputs/ablate/leaderboard.csv:
x: rank
y: [gll, rmse]
title: “Ablation Leaderboard”

——————————————————————————

Global metrics/plots

——————————————————————————

metrics:
	•	outputs/diagnostics/diagnostic_summary.json:
cache: false

plots:
	•	ROC:
path: outputs/diagnostics/roc.csv
x: fpr
y: [tpr]
title: “ROC Curve”
	•	Calibration:
path: outputs/diagnostics/reliability.csv
x: expected
y: [observed]
title: “Uncertainty Calibration (Reliability)”
	•	GLL:
path: outputs/diagnostics/binwise.csv
x: bin
y: [gll]
title: “Gaussian Log-Likelihood per Bin”
	•	FFT:
path: outputs/diagnostics/fft.csv
x: frequency
y: [power]
title: “FFT Power Spectrum”
	•	Symbolic:
path: outputs/diagnostics/symbolic_violations.csv
x: bin
y: [violation_score]
title: “Symbolic Rule Violations”