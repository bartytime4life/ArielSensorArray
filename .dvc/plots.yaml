# .dvc/plots.yaml
# ==============================================================================
# SpectraMind V50 — DVC Plots Configuration (Upgraded, Challenge-Grade)
# ------------------------------------------------------------------------------
# Purpose
#   Centralize all plot definitions used by `dvc plots show/diff` for CI and local dev.
#   These entries can be referenced or merged into dvc.yaml stages, and also
#   consumed directly with:
#     dvc plots show --targets .dvc/plots.yaml
#     dvc plots diff  --targets .dvc/plots.yaml HEAD~1
#
# Notes
#   • DVC supports CSV/TSV/JSON. For JSON, use `fields` to map nested keys to columns.
#   • Each plot entry declares x/y and a vega-lite template (under plots/templates/vega).
#   • Paths/globs point to standard SpectraMind V50 outputs written by the CLI.
#   • Keep plot `id` values unique; DVC will track revs in its own files as needed.
# ==============================================================================

version: 1

# ------------------------------------------------------------------------------
# Templates (vega-lite). If missing on disk, DVC falls back to default.
# ------------------------------------------------------------------------------
templates:
  line:            plots/templates/vega/line.json
  line_dark:       plots/templates/vega/line_dark.json
  scatter_guide:   plots/templates/vega/scatter_guide.json
  hist:            plots/templates/vega/hist.json
  heatmap:         plots/templates/vega/heatmap.json

# ------------------------------------------------------------------------------
# Plot targets
# Use:  dvc plots show .dvc/plots.yaml:<id>
#       dvc plots diff  .dvc/plots.yaml:<id> HEAD~1
# ------------------------------------------------------------------------------
plots:

  # ===========================
  # TRAINING / VALIDATION LINES
  # ===========================
  - id: train_loss
    title: "Training Loss vs Step"
    path: outputs/metrics/train_metrics.json
    # If JSON has nested structure, map fields → columns (example kept here and reused below).
    # fields:
    #   step: history[].step
    #   loss: history[].loss
    x: step
    y: loss
    template: line
    x_label: "Step"
    y_label: "Loss"
    smooth: true

  - id: val_loss
    title: "Validation Loss vs Step"
    path: outputs/metrics/val_metrics.json
    # fields:
    #   step: history[].step
    #   val_loss: history[].val_loss
    x: step
    y: val_loss
    template: line
    x_label: "Step"
    y_label: "Val Loss"
    smooth: true

  - id: lr_schedule
    title: "Learning Rate vs Step"
    path: outputs/metrics/train_metrics.json
    # fields:
    #   step: history[].step
    #   lr:   history[].lr
    x: step
    y: lr
    template: line
    x_label: "Step"
    y_label: "LR"
    smooth: false

  - id: gll_over_time
    title: "Gaussian Log-Likelihood vs Step"
    path: outputs/metrics/val_metrics.json
    # fields:
    #   step: history[].step
    #   gll:  history[].gll
    x: step
    y: gll
    template: line
    x_label: "Step"
    y_label: "GLL (↑ better)"
    smooth: true

  - id: epoch_gll
    title: "Validation GLL vs Epoch"
    path: outputs/metrics/val_metrics.csv
    x: epoch
    y: gll
    template: line
    x_label: "Epoch"
    y_label: "GLL (↑ better)"
    smooth: true

  # ===========================
  # CALIBRATION / RESIDUAL PLOTS
  # ===========================
  - id: residual_hist
    title: "Residuals Histogram | (μ - y)"
    path: outputs/diagnostics/calibration/residuals.csv
    y: residual
    template: hist
    bins: 60
    x_label: "Residual (μ - y)"
    y_label: "Count"

  - id: zscore_hist
    title: "Z-Score Histogram | (μ - y) / σ"
    path: outputs/diagnostics/calibration/residuals.csv
    y: z         # expected column: z
    template: hist
    bins: 60
    x_label: "Z-Score"
    y_label: "Count"

  - id: sigma_hist
    title: "Predicted σ Histogram"
    path: outputs/diagnostics/calibration/residuals.csv
    y: sigma
    template: hist
    bins: 60
    x_label: "Predicted σ"
    y_label: "Count"

  - id: residual_vs_sigma
    title: "|Residual| vs σ"
    path: outputs/diagnostics/calibration/residuals.csv
    x: sigma
    y: abs_residual
    template: scatter_guide   # draws y=x guide to check calibration
    x_label: "Predicted σ"
    y_label: "|μ - y|"

  - id: reliability_curve
    title: "Reliability Curve (Calibration)"
    path: outputs/diagnostics/calibration/reliability.csv
    x: expected
    y: observed
    template: scatter_guide   # diagonal = perfect calibration
    x_label: "Expected Coverage"
    y_label: "Observed Coverage"

  # ===========================
  # PER-BIN / PER-WAVELENGTH HEATMAPS
  # ===========================
  - id: gll_heatmap
    title: "Per-Bin GLL Heatmap"
    path: outputs/diagnostics/gll_per_bin.csv
    heatmap:
      x: bin
      y: step
      color: gll
      colorbar_label: "GLL"
    template: heatmap

  - id: coverage_heatmap
    title: "Per-Bin Coverage Heatmap"
    path: outputs/diagnostics/coverage_per_bin.csv
    heatmap:
      x: bin
      y: threshold      # e.g., coverage thresholds 50/80/90
      color: coverage
      colorbar_label: "Coverage"
    template: heatmap

  - id: sigma_per_bin
    title: "Predicted σ per Bin (latest)"
    path: outputs/diagnostics/sigma_per_bin.csv
    heatmap:
      x: bin
      y: channel       # e.g., 'FGS1' or 'AIRS'
      color: sigma
      colorbar_label: "σ"
    template: heatmap

  # ===========================
  # FFT / SPECTRAL DIAGNOSTICS
  # ===========================
  - id: fft_power
    title: "FFT Power (μ spectrum)"
    path: outputs/diagnostics/fft/power.csv
    x: freq
    y: power
    template: line
    x_label: "Frequency"
    y_label: "Power"
    smooth: false
    log_x: false
    log_y: true

  # ===========================
  # UMAP / t-SNE OVERVIEWS (SCATTER)
  # ===========================
  - id: umap_latents
    title: "UMAP Latents (colored by cluster)"
    path: outputs/diagnostics/umap/umap_latents.csv
    x: x
    y: y
    color: cluster
    template: scatter_guide
    x_label: "UMAP-1"
    y_label: "UMAP-2"

  - id: tsne_latents
    title: "t-SNE Latents (colored by entropy)"
    path: outputs/diagnostics/tsne/tsne_latents.csv
    x: x
    y: y
    color: entropy
    template: scatter_guide
    x_label: "t-SNE-1"
    y_label: "t-SNE-2"

  # ===========================
  # μ vs σ sanity (scatter)
  # ===========================
  - id: mu_sigma_scatter
    title: "μ vs σ (latest predictions)"
    path: outputs/diagnostics/calibration/mu_sigma.csv
    x: mu
    y: sigma
    template: scatter_guide
    x_label: "μ"
    y_label: "σ"

# ------------------------------------------------------------------------------
# Plot groups (convenience)
# Use: dvc plots show --targets .dvc/plots.yaml:group:<name>
# ------------------------------------------------------------------------------
groups:
  training:
    - train_loss
    - val_loss
    - lr_schedule
    - gll_over_time
    - epoch_gll
  calibration:
    - residual_hist
    - zscore_hist
    - sigma_hist
    - residual_vs_sigma
    - reliability_curve
    - mu_sigma_scatter
  binwise:
    - gll_heatmap
    - coverage_heatmap
    - sigma_per_bin
  spectral:
    - fft_power
  embedding:
    - umap_latents
    - tsne_latents

# ------------------------------------------------------------------------------
# Rendering hints (optional; respected by custom templates)
# ------------------------------------------------------------------------------
hints:
  dark_mode: false
  point_size: 28
  line_width: 2
  palette: "viridis"
  # If your CI uses dark backgrounds:
  # dark_mode: true