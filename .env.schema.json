{
"\$schema": "[https://json-schema.org/draft/2020-12/schema](https://json-schema.org/draft/2020-12/schema)",
"\$id": "[https://example.org/spectramind/.env.schema.json](https://example.org/spectramind/.env.schema.json)",
"title": "SpectraMind V50 .env Schema",
"description": "Mission-grade JSON Schema to validate `.env` for SpectraMind V50. Covers Hydra, Poetry/Docker, CUDA, PyTorch determinism, MLflow/W\&B, DVC/lakeFS, Kaggle, Hugging Face, diagrams (npm), containerized CI, and CLI diagnostics.",
"type": "object",
"additionalProperties": true,
"\$defs": {
"boolString": {
"description": "Boolean represented as a string literal `true` or `false`.",
"type": "string",
"enum": \["true", "false"]
},
"switch01": {
"description": "Switch represented as '0' or '1'.",
"type": "string",
"enum": \["0", "1"]
},
"uintString": {
"description": "Unsigned integer represented as a string (e.g., '0', '12').",
"type": "string",
"pattern": "^\[0-9]+\$"
},
"intString": {
"description": "Signed integer represented as a string (e.g., '-1', '0', '42').",
"type": "string",
"pattern": "^-?\[0-9]+\$"
},
"floatString": {
"description": "Floating point number represented as a string (e.g., '-0.5', '1', '3.14').",
"type": "string",
"pattern": "^-?\[0-9]+(?:\\.\[0-9]+)?\$"
},
"portString": {
"description": "TCP port as string 1..65535 (2â€“5 digits allowed).",
"type": "string",
"pattern": "^(?:\[0-9]{2,5})\$"
},
"semverLike": {
"description": "Version like '3.12' or '12.4.1'.",
"type": "string",
"pattern": "^\[0-9]+\\.\[0-9]+(\\.\[0-9]+)?\$"
},
"pathString": {
"description": "Filesystem path string (nonempty).",
"type": "string",
"minLength": 1
},
"uriString": {
"description": "URI string (http(s), file, etc.).",
"type": "string",
"format": "uri"
},
"csvList": {
"description": "Comma-separated list (no spaces) of tokens/URIs/hosts.",
"type": "string",
"pattern": "^\[^\s,]+(?:,\[^\s,]+)*\$"
},
"hostnameList": {
"description": "Comma-separated list of hostnames or host\:port.",
"type": "string",
"pattern": "^\[A-Za-z0-9.-]+(?::\[0-9]{2,5})?(?:,\[A-Za-z0-9.-]+(?::\[0-9]{2,5})?)*\$"
},
"emailString": {
"type": "string",
"format": "email"
},
"tokenLike": {
"description": "Access token / API key (at least 16 visible characters).",
"type": \["string"],
"minLength": 16
},
"logLevel": {
"type": "string",
"enum": \["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
}
},
"properties": {
"PROJECT\_NAME": {
"type": "string",
"minLength": 1,
"default": "SpectraMindV50",
"description": "Human-friendly project name."
},
"PROJECT\_STAGE": {
"type": "string",
"enum": \["dev", "test", "prod"],
"default": "dev",
"description": "Deployment stage / environment (affects CI/logging/runtime guards)."
},
"CONFIG\_FILE": {
"type": "string",
"pattern": "^(configs/).+\\.ya?ml\$",
"default": "configs/config\_v50.yaml",
"description": "Hydra root config path (composed at runtime)."
},
"HYDRA\_FULL\_ERROR": {
"\$ref": "#/\$defs/switch01",
"default": "1",
"description": "Hydra exception verbosity (1 = full trace)."
},
"PYTHON\_VERSION": {
"\$ref": "#/\$defs/semverLike",
"default": "3.12",
"description": "Python version pinned in Poetry/Docker."
},
"POETRY\_VIRTUALENVS\_CREATE": {
"\$ref": "#/\$defs/boolString",
"default": "false",
"description": "Whether Poetry should create virtualenvs (set false for Docker/Kaggle)."
},
"POETRY\_VIRTUALENVS\_IN\_PROJECT": {
"\$ref": "#/\$defs/boolString",
"default": "true",
"description": "Place Poetry venv inside project (.venv)."
},
"CUDA\_VERSION": {
"\$ref": "#/\$defs/semverLike",
"default": "12.4",
"description": "CUDA version aligned to base images / PyTorch build."
},
"CUDNN\_VERSION": {
"type": "string",
"pattern": "^\[0-9]+(\\.\[0-9]+)?\$",
"default": "9",
"description": "cuDNN major/minor version."
},
"TORCH\_DETERMINISTIC": {
"\$ref": "#/\$defs/boolString",
"default": "true",
"description": "Enable deterministic/cuDNN settings."
},
"TORCH\_ALLOW\_TF32": {
"\$ref": "#/\$defs/boolString",
"default": "false",
"description": "Permit TF32 matmul on Ampere+ if desired."
},
"GLOBAL\_SEED": {
"\$ref": "#/\$defs/intString",
"default": "1337",
"description": "Global RNG seed as string."
},
"NUM\_WORKERS": {
"\$ref": "#/\$defs/uintString",
"default": "4",
"description": "DataLoader workers (string for .env compatibility)."
},
"LOGS\_DIR": {
"\$ref": "#/\$defs/pathString",
"default": "logs",
"description": "Directory for structured logs."
},
"OUT\_DIR": {
"\$ref": "#/\$defs/pathString",
"default": "outputs",
"description": "Root directory for outputs."
},
"RUN\_HASH\_FILE": {
"type": "string",
"default": "run\_hash\_summary\_v50.json",
"description": "Reproducibility run hash summary file (written to OUT\_DIR)."
},
"DIAGNOSTICS\_DIR": {
"type": "string",
"default": "outputs/diagnostics",
"description": "Diagnostics output folder."
},
"ENABLE\_RICH\_LOGGING": {
"\$ref": "#/\$defs/boolString",
"default": "true",
"description": "Pretty console logging with Rich."
},
"LOG\_LEVEL": {
"\$ref": "#/\$defs/logLevel",
"default": "INFO"
},
"NO\_COLOR": {
"\$ref": "#/\$defs/boolString",
"default": "false",
"description": "Disable ANSI color in logs if true."
},
"TZ": {
"type": "string",
"default": "UTC",
"description": "Time zone identifier (e.g., 'UTC', 'America/Chicago')."
},
"LC\_ALL": {
"type": "string",
"default": "C.UTF-8",
"description": "Locale for stable sort/parse (CI)."
},
"MLFLOW\_TRACKING\_URI": {
"oneOf": \[
{ "\$ref": "#/\$defs/uriString" },
{ "type": "string", "const": "" }
],
"default": "",
"description": "MLflow tracking server URI. Empty for disabled."
},
"MLFLOW\_EXPERIMENT\_NAME": {
"type": \["string", "null"],
"default": null
},
"MLFLOW\_ARTIFACTS\_URI": {
"oneOf": \[
{ "\$ref": "#/\$defs/uriString" },
{ "type": "string", "const": "" }
],
"default": ""
},
"WANDB\_API\_KEY": {
"type": \["string", "null"],
"default": null,
"minLength": 16
},
"WANDB\_PROJECT": {
"type": "string",
"default": "spectramind-v50"
},
"WANDB\_ENTITY": {
"type": \["string", "null"],
"default": null
},
"WANDB\_MODE": {
"type": "string",
"enum": \["online", "offline", "disabled"],
"default": "offline"
},
"HF\_HOME": {
"type": "string",
"default": "~~/.cache/huggingface",
"description": "Local cache dir for Hugging Face Hub."
},
"HF\_TOKEN": {
"type": \["string", "null"],
"default": null,
"minLength": 16
},
"HF\_HUB\_OFFLINE": {
"\$ref": "#/\$defs/boolString",
"default": "true"
},
"TRANSFORMERS\_OFFLINE": {
"\$ref": "#/\$defs/boolString",
"default": "true"
},
"DATA\_ROOT": {
"type": "string",
"default": "data"
},
"DVC\_REMOTE": {
"type": "string",
"default": "origin"
},
"DVC\_REMOTE\_URL": {
"type": \["string", "null"],
"default": null,
"description": "Optional remote URL override."
},
"DVC\_CACHE\_DIR": {
"type": "string",
"default": ".dvc/cache"
},
"LAKEFS\_ENDPOINT": {
"oneOf": \[
{ "\$ref": "#/\$defs/uriString" },
{ "type": "string", "const": "" },
{ "type": "null" }
],
"default": null
},
"LAKEFS\_ACCESS\_KEY": {
"type": \["string", "null"],
"default": null,
"minLength": 6
},
"LAKEFS\_SECRET\_KEY": {
"type": \["string", "null"],
"default": null,
"minLength": 12
},
"AWS\_ACCESS\_KEY\_ID": {
"type": \["string", "null"],
"default": null
},
"AWS\_SECRET\_ACCESS\_KEY": {
"type": \["string", "null"],
"default": null
},
"AWS\_DEFAULT\_REGION": {
"type": \["string", "null"],
"default": null
},
"GCP\_SERVICE\_ACCOUNT\_JSON": {
"type": \["string", "null"],
"default": null
},
"AZURE\_STORAGE\_CONNECTION\_STRING": {
"type": \["string", "null"],
"default": null
},
"KAGGLE\_USERNAME": {
"type": \["string", "null"],
"default": null
},
"KAGGLE\_KEY": {
"type": \["string", "null"],
"default": null,
"minLength": 16
},
"KAGGLE\_COMPETITION": {
"type": "string",
"default": "neurips-2025-ariel",
"description": "Competition slug."
},
"KAGGLE\_SUBMISSION\_FILE": {
"type": "string",
"default": "outputs/submission.csv"
},
"KAGGLE\_SUBMISSION\_MSG": {
"type": "string",
"default": "SpectraMind V50 submission"
},
"DOCKER\_IMAGE\_NAME": {
"type": "string",
"default": "spectramindv50\:dev"
},
"DOCKER\_CONTAINER\_NAME": {
"type": "string",
"default": "spectramindv50"
},
"DOCKER\_PORT": {
"\$ref": "#/\$defs/portString",
"default": "8888"
},
"DOCKER\_GPU": {
"\$ref": "#/\$defs/switch01",
"default": "1",
"description": "1=enable `--gpus all` when GPU present."
},
"DOCKER\_BUILD\_ARGS": {
"type": \["string", "null"],
"default": null,
"description": "Additional build args (e.g., KEY=VALUE KEY2=VALUE2)."
},
"DOCKER\_BUILDKIT": {
"\$ref": "#/\$defs/switch01",
"default": "1"
},
"COMPOSE\_DOCKER\_CLI\_BUILD": {
"\$ref": "#/\$defs/switch01",
"default": "1"
},
"SPECTRAMIND\_CLI": {
"type": "string",
"default": "spectramind"
},
"DIAGNOSTICS\_REPORT": {
"type": "string",
"default": "outputs/diagnostics/report.html"
},
"ENABLE\_HTML\_DASHBOARD": {
"\$ref": "#/\$defs/boolString",
"default": "true"
},
"SECRET\_KEY\_BASE": {
"type": \["string", "null"],
"default": null,
"minLength": 16
},
"JWT\_SECRET": {
"type": \["string", "null"],
"default": null,
"minLength": 16
},
"SERVICE\_ACCOUNT\_JSON": {
"type": \["string", "null"],
"default": null
},
"API\_HOST": {
"type": "string",
"default": "127.0.0.1"
},
"API\_PORT": {
"\$ref": "#/\$defs/portString",
"default": "8000"
},
"API\_CORS\_ORIGINS": {
"oneOf": \[
{ "\$ref": "#/\$defs/csvList" },
{ "type": "string", "const": "" },
{ "type": "null" }
],
"default": null,
"description": "Comma-separated allowed origins for CORS."
},
"API\_CORS\_CREDENTIALS": {
"\$ref": "#/\$defs/boolString",
"default": "false"
},
"API\_DEBUG": {
"\$ref": "#/\$defs/boolString",
"default": "false"
},
"UVICORN\_WORKERS": {
"\$ref": "#/\$defs/uintString",
"default": "1"
},
"HTTP\_PROXY": {
"type": \["string", "null"],
"default": null
},
"HTTPS\_PROXY": {
"type": \["string", "null"],
"default": null
},
"NO\_PROXY": {
"oneOf": \[
{ "\$ref": "#/\$defs/csvList" },
{ "type": "string", "const": "" },
{ "type": "null" }
],
"default": null
},
"NODE\_OPTIONS": {
"type": \["string", "null"],
"default": null,
"description": "Advanced Node runtime options (e.g., --max\_old\_space\_size=4096)."
},
"JUPYTER\_TOKEN": {
"type": \["string", "null"],
"default": null,
"minLength": 4,
"description": "Jupyter Lab auth token (if null, use default)."
},
"TENSORBOARD\_PORT": {
"\$ref": "#/\$defs/portString",
"default": "6006"
},
"DOCS\_PORT": {
"\$ref": "#/\$defs/portString",
"default": "8000"
},
"WEB\_PORT": {
"\$ref": "#/\$defs/portString",
"default": "5173"
},
"CONTACT\_SECURITY\_EMAIL": {
"\$ref": "#/\$defs/emailString",
"default": "[security@example.org](mailto:security@example.org)",
"description": "Email for security disclosures (used by CI messages)."
}
},
"required": \[
"PROJECT\_NAME",
"PROJECT\_STAGE",
"CONFIG\_FILE",
"HYDRA\_FULL\_ERROR",
"PYTHON\_VERSION",
"POETRY\_VIRTUALENVS\_CREATE",
"POETRY\_VIRTUALENVS\_IN\_PROJECT",
"LOGS\_DIR",
"OUT\_DIR",
"RUN\_HASH\_FILE",
"DIAGNOSTICS\_DIR",
"DATA\_ROOT",
"DVC\_REMOTE",
"DVC\_CACHE\_DIR",
"KAGGLE\_COMPETITION",
"KAGGLE\_SUBMISSION\_FILE",
"KAGGLE\_SUBMISSION\_MSG",
"DOCKER\_IMAGE\_NAME",
"DOCKER\_CONTAINER\_NAME",
"DOCKER\_PORT",
"DOCKER\_BUILDKIT",
"COMPOSE\_DOCKER\_CLI\_BUILD",
"SPECTRAMIND\_CLI",
"DIAGNOSTICS\_REPORT",
"ENABLE\_RICH\_LOGGING",
"ENABLE\_HTML\_DASHBOARD"
],
"allOf": \[
{
"if": { "properties": { "PROJECT\_STAGE": { "const": "prod" } } },
"then": {
"properties": {
"WANDB\_MODE": { "const": "online" },
"API\_DEBUG": { "const": "false" }
},
"description": "In prod, W\&B must be online and API debug disabled."
}
},
{
"if": { "properties": { "WANDB\_MODE": { "const": "online" } } },
"then": {
"required": \["WANDB\_API\_KEY"],
"properties": {
"WANDB\_API\_KEY": { "\$ref": "#/\$defs/tokenLike" }
},
"description": "If W\&B is online, an API key is required."
}
},
{
"if": { "properties": { "MLFLOW\_TRACKING\_URI": { "pattern": "^https?://" } } },
"then": {
"required": \["MLFLOW\_EXPERIMENT\_NAME"],
"description": "If MLflow is configured with an HTTP(S) URI, an experiment name must be set."
}
},
{
"if": { "properties": { "DOCKER\_GPU": { "const": "1" } } },
"then": {
"properties": {
"CUDA\_VERSION": { "\$ref": "#/\$defs/semverLike" },
"TORCH\_ALLOW\_TF32": { "enum": \["true", "false"] }
},
"description": "If GPU enabled, require CUDA version set and valid TF32 toggle."
}
},
{
"if": { "properties": { "HF\_HUB\_OFFLINE": { "const": "false" } } },
"then": {
"required": \["HF\_TOKEN"],
"properties": { "HF\_TOKEN": { "\$ref": "#/\$defs/tokenLike" } },
"description": "Online HF Hub access requires an HF token."
}
},
{
"if": { "properties": { "KAGGLE\_SUBMISSION\_FILE": { "pattern": ".+" } } },
"then": {
"description": "To submit to Kaggle, username and key must be set.",
"properties": {
"KAGGLE\_USERNAME": { "type": \["string", "null"] },
"KAGGLE\_KEY": { "type": \["string", "null"], "minLength": 16 }
}
}
}
],
"examples": \[
{
"PROJECT\_NAME": "SpectraMindV50",
"PROJECT\_STAGE": "dev",
"CONFIG\_FILE": "configs/config\_v50.yaml",
"HYDRA\_FULL\_ERROR": "1",
"PYTHON\_VERSION": "3.12",
"POETRY\_VIRTUALENVS\_CREATE": "false",
"POETRY\_VIRTUALENVS\_IN\_PROJECT": "true",
"CUDA\_VERSION": "12.4",
"CUDNN\_VERSION": "9",
"TORCH\_DETERMINISTIC": "true",
"TORCH\_ALLOW\_TF32": "false",
"GLOBAL\_SEED": "1337",
"NUM\_WORKERS": "4",
"LOGS\_DIR": "logs",
"OUT\_DIR": "outputs",
"RUN\_HASH\_FILE": "run\_hash\_summary\_v50.json",
"DIAGNOSTICS\_DIR": "outputs/diagnostics",
"ENABLE\_RICH\_LOGGING": "true",
"LOG\_LEVEL": "INFO",
"NO\_COLOR": "false",
"TZ": "UTC",
"LC\_ALL": "C.UTF-8",
"MLFLOW\_TRACKING\_URI": "",
"MLFLOW\_EXPERIMENT\_NAME": null,
"MLFLOW\_ARTIFACTS\_URI": "",
"WANDB\_PROJECT": "spectramind-v50",
"WANDB\_MODE": "offline",
"HF\_HOME": "~~/.cache/huggingface",
"HF\_HUB\_OFFLINE": "true",
"TRANSFORMERS\_OFFLINE": "true",
"DATA\_ROOT": "data",
"DVC\_REMOTE": "origin",
"DVC\_CACHE\_DIR": ".dvc/cache",
"KAGGLE\_COMPETITION": "neurips-2025-ariel",
"KAGGLE\_SUBMISSION\_FILE": "outputs/submission.csv",
"KAGGLE\_SUBMISSION\_MSG": "SpectraMind V50 submission",
"DOCKER\_IMAGE\_NAME": "spectramindv50\:dev",
"DOCKER\_CONTAINER\_NAME": "spectramindv50",
"DOCKER\_PORT": "8888",
"DOCKER\_GPU": "1",
"DOCKER\_BUILDKIT": "1",
"COMPOSE\_DOCKER\_CLI\_BUILD": "1",
"SPECTRAMIND\_CLI": "spectramind",
"DIAGNOSTICS\_REPORT": "outputs/diagnostics/report.html",
"ENABLE\_HTML\_DASHBOARD": "true",
"API\_HOST": "127.0.0.1",
"API\_PORT": "8000",
"API\_CORS\_ORIGINS": "http\://localhost:3000",
"HTTP\_PROXY": null,
"HTTPS\_PROXY": null,
"NO\_PROXY": null,
"NODE\_OPTIONS": "--max\_old\_space\_size=4096",
"JUPYTER\_TOKEN": "spectra",
"TENSORBOARD\_PORT": "6006",
"DOCS\_PORT": "8000",
"WEB\_PORT": "5173",
"CONTACT\_SECURITY\_EMAIL": "[security@example.org](mailto:security@example.org)"
}
]
}
