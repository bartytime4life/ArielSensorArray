{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://example.org/spectramind/.env.schema.json",
  "title": "SpectraMind V50 .env Schema",
  "description": "Mission‑grade JSON Schema to validate `.env` for SpectraMind V50. Covers Hydra, Poetry/Docker, CUDA, MLflow/W&B, DVC/lakeFS, Kaggle, Hugging Face, diagrams (npm), and containerized CI.",

  "type": "object",
  "additionalProperties": true,

  "definitions": {
    "boolString": {
      "type": "string",
      "enum": ["true", "false"]
    },
    "switch01": {
      "type": "string",
      "enum": ["0", "1"]
    },
    "portString": {
      "type": "string",
      "pattern": "^[0-9]{2,5}$"
    },
    "pathString": {
      "type": "string",
      "minLength": 1
    }
  },

  "properties": {
    /* ------------------------------------------------------------------ */
    /* Project & Stage                                                     */
    /* ------------------------------------------------------------------ */
    "PROJECT_NAME": {
      "type": "string",
      "minLength": 1,
      "default": "SpectraMindV50",
      "description": "Human‑friendly project name."
    },
    "PROJECT_STAGE": {
      "type": "string",
      "enum": ["dev", "test", "prod"],
      "default": "dev",
      "description": "Deployment stage / environment (affects CI/logging/runtime guards)."
    },

    /* ------------------------------------------------------------------ */
    /* Hydra / Config                                                      */
    /* ------------------------------------------------------------------ */
    "CONFIG_FILE": {
      "type": "string",
      "pattern": "^(configs/).+\\.ya?ml$",
      "default": "configs/config_v50.yaml",
      "description": "Hydra root config path (composed at runtime)."
    },
    "HYDRA_FULL_ERROR": {
      "$ref": "#/definitions/switch01",
      "default": "1",
      "description": "Hydra exception verbosity (1 = full trace)."
    },

    /* ------------------------------------------------------------------ */
    /* Runtime / Toolchain                                                 */
    /* ------------------------------------------------------------------ */
    "PYTHON_VERSION": {
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$",
      "default": "3.12",
      "description": "Python version pinned in Poetry/Docker."
    },
    "POETRY_VIRTUALENVS_CREATE": {
      "$ref": "#/definitions/boolString",
      "default": "false",
      "description": "Whether Poetry should create virtualenvs (set false for Docker/Kaggle)."
    },
    "POETRY_VIRTUALENVS_IN_PROJECT": {
      "$ref": "#/definitions/boolString",
      "default": "true",
      "description": "Place Poetry venv inside project (.venv)."
    },

    /* ------------------------------------------------------------------ */
    /* GPU / CUDA                                                          */
    /* ------------------------------------------------------------------ */
    "CUDA_VERSION": {
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$",
      "default": "12.4",
      "description": "CUDA version aligned to base images / PyTorch build."
    },
    "CUDNN_VERSION": {
      "type": "string",
      "pattern": "^[0-9]+(\\.[0-9]+)?$",
      "default": "9",
      "description": "cuDNN major/minor version."
    },
    "TORCH_DETERMINISTIC": {
      "$ref": "#/definitions/boolString",
      "default": "true",
      "description": "Enable deterministic/cuDNN settings."
    },
    "NUM_WORKERS": {
      "type": "string",
      "pattern": "^[0-9]+$",
      "default": "4",
      "description": "DataLoader workers (as string for .env compatibility)."
    },

    /* ------------------------------------------------------------------ */
    /* Paths & Outputs                                                     */
    /* ------------------------------------------------------------------ */
    "LOGS_DIR": { "$ref": "#/definitions/pathString", "default": "logs" },
    "OUT_DIR":  { "$ref": "#/definitions/pathString", "default": "outputs" },
    "RUN_HASH_FILE": {
      "type": "string",
      "default": "run_hash_summary_v50.json",
      "description": "File to store reproducibility run hash summary."
    },
    "DIAGNOSTICS_DIR": {
      "type": "string",
      "default": "outputs/diagnostics",
      "description": "Diagnostics output folder."
    },

    /* ------------------------------------------------------------------ */
    /* Logging / UX                                                        */
    /* ------------------------------------------------------------------ */
    "ENABLE_RICH_LOGGING": {
      "$ref": "#/definitions/boolString",
      "default": "true",
      "description": "Pretty console logging with Rich."
    },
    "LOG_LEVEL": {
      "type": "string",
      "enum": ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
      "default": "INFO"
    },
    "NO_COLOR": {
      "$ref": "#/definitions/boolString",
      "default": "false",
      "description": "Disable ANSI color in logs if true."
    },

    /* ------------------------------------------------------------------ */
    /* MLflow / Weights & Biases                                           */
    /* ------------------------------------------------------------------ */
    "MLFLOW_TRACKING_URI": { "type": "string", "format": "uri", "nullable": true },
    "MLFLOW_EXPERIMENT_NAME": { "type": "string", "nullable": true },
    "MLFLOW_ARTIFACTS_URI": { "type": "string", "format": "uri", "nullable": true },

    "WANDB_API_KEY":  { "type": "string", "minLength": 1, "nullable": true },
    "WANDB_PROJECT":  { "type": "string", "default": "spectramind-v50" },
    "WANDB_ENTITY":   { "type": "string", "nullable": true },
    "WANDB_MODE":     { "type": "string", "enum": ["online", "offline", "disabled"], "default": "offline" },

    /* ------------------------------------------------------------------ */
    /* Hugging Face / Transformers                                         */
    /* ------------------------------------------------------------------ */
    "HF_HOME": {
      "type": "string",
      "default": "~/.cache/huggingface",
      "description": "Local cache dir for Hugging Face Hub."
    },
    "HF_TOKEN": { "type": "string", "nullable": true },
    "HF_HUB_OFFLINE": {
      "$ref": "#/definitions/boolString",
      "default": "true",
      "description": "Force offline HF Hub usage (no network)."
    },
    "TRANSFORMERS_OFFLINE": {
      "$ref": "#/definitions/boolString",
      "default": "true",
      "description": "Transformers offline mode (no network)."
    },

    /* ------------------------------------------------------------------ */
    /* Data / DVC / lakeFS                                                 */
    /* ------------------------------------------------------------------ */
    "DATA_ROOT":     { "type": "string", "default": "data" },
    "DVC_REMOTE":    { "type": "string", "default": "origin" },
    "DVC_REMOTE_URL":{ "type": "string", "nullable": true, "description": "Optional remote URL override." },
    "DVC_CACHE_DIR": { "type": "string", "default": ".dvc/cache" },

    "LAKEFS_ENDPOINT":   { "type": "string", "format": "uri", "nullable": true },
    "LAKEFS_ACCESS_KEY": { "type": "string", "nullable": true },
    "LAKEFS_SECRET_KEY": { "type": "string", "nullable": true },

    /* Optional cloud creds for DVC remotes */
    "AWS_ACCESS_KEY_ID":     { "type": "string", "nullable": true },
    "AWS_SECRET_ACCESS_KEY": { "type": "string", "nullable": true },
    "AWS_DEFAULT_REGION":    { "type": "string", "nullable": true },
    "GCP_SERVICE_ACCOUNT_JSON": { "type": "string", "nullable": true },
    "AZURE_STORAGE_CONNECTION_STRING": { "type": "string", "nullable": true },

    /* ------------------------------------------------------------------ */
    /* Kaggle                                                              */
    /* ------------------------------------------------------------------ */
    "KAGGLE_USERNAME": { "type": "string", "nullable": true },
    "KAGGLE_KEY":      { "type": "string", "nullable": true },
    "KAGGLE_COMPETITION": {
      "type": "string",
      "default": "neurips-2025-ariel",
      "description": "Competition slug."
    },
    "KAGGLE_SUBMISSION_FILE": { "type": "string", "default": "outputs/submission.csv" },
    "KAGGLE_SUBMISSION_MSG":  { "type": "string", "default": "SpectraMind V50 submission" },

    /* ------------------------------------------------------------------ */
    /* Docker / BuildKit / Runtime                                         */
    /* ------------------------------------------------------------------ */
    "DOCKER_IMAGE_NAME":   { "type": "string", "default": "spectramindv50:dev" },
    "DOCKER_CONTAINER_NAME": { "type": "string", "default": "spectramindv50" },
    "DOCKER_PORT":         { "$ref": "#/definitions/portString", "default": "8888" },
    "DOCKER_GPU":          { "$ref": "#/definitions/switch01", "default": "1", "description": "1=enable --gpus all when present." },
    "DOCKER_BUILD_ARGS":   { "type": "string", "nullable": true, "description": "Additional build args (key=value ...)." },
    "DOCKER_BUILDKIT":     { "$ref": "#/definitions/switch01", "default": "1" },
    "COMPOSE_DOCKER_CLI_BUILD": { "$ref": "#/definitions/switch01", "default": "1" },

    /* ------------------------------------------------------------------ */
    /* CLI / Diagnostics                                                   */
    /* ------------------------------------------------------------------ */
    "SPECTRAMIND_CLI":     { "type": "string", "default": "spectramind" },
    "DIAGNOSTICS_REPORT":  { "type": "string", "default": "outputs/diagnostics/report.html" },
    "ENABLE_HTML_DASHBOARD": { "$ref": "#/definitions/boolString", "default": "true" },

    /* ------------------------------------------------------------------ */
    /* Security / Secrets                                                  */
    "SECRET_KEY_BASE":     { "type": "string", "minLength": 16, "nullable": true },
    "JWT_SECRET":          { "type": "string", "minLength": 16, "nullable": true },
    "SERVICE_ACCOUNT_JSON":{ "type": "string", "nullable": true },

    /* ------------------------------------------------------------------ */
    /* Optional API / Dashboard                                            */
    /* ------------------------------------------------------------------ */
    "API_HOST": { "type": "string", "default": "127.0.0.1" },
    "API_PORT": { "$ref": "#/definitions/portString", "default": "8000" },
    "API_CORS_ORIGINS": {
      "type": "string",
      "nullable": true,
      "description": "Comma‑separated list of origins for CORS."
    },

    /* ------------------------------------------------------------------ */
    /* Node / Mermaid                                                      */
    /* ------------------------------------------------------------------ */
    "NODE_OPTIONS": {
      "type": "string",
      "nullable": true,
      "description": "Advanced Node runtime options (e.g., --max_old_space_size=4096)."
    }
  },

  "required": [
    "PROJECT_NAME",
    "PROJECT_STAGE",
    "CONFIG_FILE",
    "HYDRA_FULL_ERROR",

    "PYTHON_VERSION",
    "POETRY_VIRTUALENVS_CREATE",
    "POETRY_VIRTUALENVS_IN_PROJECT",

    "LOGS_DIR",
    "OUT_DIR",
    "RUN_HASH_FILE",
    "DIAGNOSTICS_DIR",

    "DATA_ROOT",
    "DVC_REMOTE",
    "DVC_CACHE_DIR",

    "KAGGLE_COMPETITION",
    "KAGGLE_SUBMISSION_FILE",
    "KAGGLE_SUBMISSION_MSG",

    "DOCKER_IMAGE_NAME",
    "DOCKER_CONTAINER_NAME",
    "DOCKER_PORT",
    "DOCKER_BUILDKIT",
    "COMPOSE_DOCKER_CLI_BUILD",

    "SPECTRAMIND_CLI",
    "DIAGNOSTICS_REPORT",
    "ENABLE_RICH_LOGGING",
    "ENABLE_HTML_DASHBOARD"
  ],

  "examples": [
    {
      "PROJECT_NAME": "SpectraMindV50",
      "PROJECT_STAGE": "dev",

      "CONFIG_FILE": "configs/config_v50.yaml",
      "HYDRA_FULL_ERROR": "1",

      "PYTHON_VERSION": "3.12",
      "POETRY_VIRTUALENVS_CREATE": "false",
      "POETRY_VIRTUALENVS_IN_PROJECT": "true",

      "CUDA_VERSION": "12.4",
      "CUDNN_VERSION": "9",
      "TORCH_DETERMINISTIC": "true",
      "NUM_WORKERS": "4",

      "LOGS_DIR": "logs",
      "OUT_DIR": "outputs",
      "RUN_HASH_FILE": "run_hash_summary_v50.json",
      "DIAGNOSTICS_DIR": "outputs/diagnostics",

      "ENABLE_RICH_LOGGING": "true",
      "LOG_LEVEL": "INFO",
      "NO_COLOR": "false",

      "MLFLOW_TRACKING_URI": "http://127.0.0.1:5000",
      "MLFLOW_EXPERIMENT_NAME": "spectramind-local",

      "WANDB_PROJECT": "spectramind-v50",
      "WANDB_MODE": "offline",

      "HF_HOME": "~/.cache/huggingface",
      "HF_HUB_OFFLINE": "true",
      "TRANSFORMERS_OFFLINE": "true",

      "DATA_ROOT": "data",
      "DVC_REMOTE": "origin",
      "DVC_CACHE_DIR": ".dvc/cache",

      "KAGGLE_COMPETITION": "neurips-2025-ariel",
      "KAGGLE_SUBMISSION_FILE": "outputs/submission.csv",
      "KAGGLE_SUBMISSION_MSG": "SpectraMind V50 submission",

      "DOCKER_IMAGE_NAME": "spectramindv50:dev",
      "DOCKER_CONTAINER_NAME": "spectramindv50",
      "DOCKER_PORT": "8888",
      "DOCKER_GPU": "1",
      "DOCKER_BUILDKIT": "1",
      "COMPOSE_DOCKER_CLI_BUILD": "1",

      "SPECTRAMIND_CLI": "spectramind",
      "DIAGNOSTICS_REPORT": "outputs/diagnostics/report.html",
      "ENABLE_HTML_DASHBOARD": "true",

      "API_HOST": "127.0.0.1",
      "API_PORT": "8000",
      "API_CORS_ORIGINS": "http://localhost:3000",

      "NODE_OPTIONS": "--max_old_space_size=4096"
    }
  ]
}