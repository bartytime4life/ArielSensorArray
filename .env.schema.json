{
“$schema”: “https://json-schema.org/draft/2020-12/schema”,
“$id”: “https://example.org/spectramind/.env.schema.json”,
“title”: “SpectraMind V50 .env Schema”,
“description”: “Mission-grade JSON Schema to validate .env for SpectraMind V50. Covers Hydra, Poetry/Docker, CUDA, PyTorch determinism, MLflow/W&B, DVC/lakeFS, Kaggle, Hugging Face, diagrams (npm), containerized CI, and CLI diagnostics.”,
“type”: “object”,
“additionalProperties”: true,
“propertyNames”: {
“type”: “string”,
“minLength”: 1,
“maxLength”: 128
},

“$defs”: {
“boolString”: {
“type”: “string”,
“enum”: [“true”, “false”],
“description”: “Boolean represented as string ‘true’ or ‘false’.”
},
“switch01”: {
“type”: “string”,
“enum”: [“0”, “1”],
“description”: “Switch represented as ‘0’ or ‘1’.”
},
“uintString”: {
“type”: “string”,
“pattern”: “^[0-9]+$”,
“description”: “Unsigned integer as string.”
},
“intString”: {
“type”: “string”,
“pattern”: “^-?[0-9]+$”,
“description”: “Signed integer as string.”
},
“floatString”: {
“type”: “string”,
“pattern”: “^-?[0-9]+(?:\.[0-9]+)?$”,
“description”: “Float as string.”
},
“portString”: {
“type”: “string”,
“pattern”: “^(?:[1-9]\d|[1-9]\d{2,3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$”,
“description”: “TCP port as string 10–65535.”
},
“semverLike”: {
“type”: “string”,
“pattern”: “^[0-9]+\.[0-9]+(\.[0-9]+)?$”,
“description”: “Semantic version like 3.12 or 12.4.1.”
},
“pathString”: {
“type”: “string”,
“minLength”: 1,
“description”: “Filesystem path string.”
},
“uriString”: {
“type”: “string”,
“format”: “uri”,
“description”: “URI string (http(s), file, etc.).”
},
“csvList”: {
“type”: “string”,
“pattern”: “^[^\s,]+(?:,[^\s,]+)*$”,
“description”: “Comma-separated list (no spaces).”
},
“emailString”: {
“type”: “string”,
“format”: “email”
},
“tokenLike”: {
“type”: “string”,
“minLength”: 16,
“description”: “Access token or API key.”
},
“logLevel”: {
“type”: “string”,
“enum”: [“DEBUG”, “INFO”, “WARNING”, “ERROR”, “CRITICAL”]
},
“emptyOrUri”: {
“oneOf”: [
{ “type”: “string”, “const”: “” },
{ “$ref”: “#/$defs/uriString” }
]
},
“emptyOrString”: {
“oneOf”: [
{ “type”: “string”, “const”: “” },
{ “type”: “string”, “minLength”: 1 }
]
}
},

“properties”: {
“PROJECT_NAME”: { “type”: “string”, “default”: “SpectraMindV50” },
“PROJECT_STAGE”: { “type”: “string”, “enum”: [“dev”, “test”, “prod”], “default”: “dev” },
“CONFIG_FILE”: { “type”: “string”, “pattern”: “^(configs/).+\.ya?ml$”, “default”: “configs/config_v50.yaml” },
“HYDRA_FULL_ERROR”: { “$ref”: “#/$defs/switch01”, “default”: “1” },

"PYTHON_VERSION": { "$ref": "#/$defs/semverLike", "default": "3.12" },
"POETRY_VIRTUALENVS_CREATE": { "$ref": "#/$defs/boolString", "default": "false" },
"POETRY_VIRTUALENVS_IN_PROJECT": { "$ref": "#/$defs/boolString", "default": "true" },

"CUDA_VERSION": { "$ref": "#/$defs/semverLike", "default": "12.4" },
"CUDNN_VERSION": { "type": "string", "pattern": "^[0-9]+(\\.[0-9]+)?$", "default": "9" },

"TORCH_DETERMINISTIC": { "$ref": "#/$defs/boolString", "default": "true", "description": "Enable determinism (sets cudnn.deterministic and seeds)." },
"TORCH_ALLOW_TF32": { "$ref": "#/$defs/boolString", "default": "false" },
"CUBLAS_WORKSPACE_CONFIG": {
  "type": "string",
  "enum": [":16:8", ":4096:8", ""],
  "default": "",
  "description": "Optional: enforce cuBLAS determinism when set."
},
"GLOBAL_SEED": { "$ref": "#/$defs/intString", "default": "1337" },
"NUM_WORKERS": { "$ref": "#/$defs/uintString", "default": "4" },

"LOGS_DIR": { "$ref": "#/$defs/pathString", "default": "logs" },
"OUT_DIR": { "$ref": "#/$defs/pathString", "default": "outputs" },
"RUN_HASH_FILE": { "type": "string", "default": "run_hash_summary_v50.json" },
"DIAGNOSTICS_DIR": { "type": "string", "default": "outputs/diagnostics" },

"ENABLE_RICH_LOGGING": { "$ref": "#/$defs/boolString", "default": "true" },
"LOG_LEVEL": { "$ref": "#/$defs/logLevel", "default": "INFO" },
"NO_COLOR": { "$ref": "#/$defs/boolString", "default": "false" },
"TZ": { "type": "string", "default": "UTC" },
"LC_ALL": { "type": "string", "default": "C.UTF-8" },

"MLFLOW_TRACKING_URI": { "$ref": "#/$defs/emptyOrUri", "default": "" },
"MLFLOW_EXPERIMENT_NAME": { "type": ["string","null"], "default": null },
"MLFLOW_ARTIFACTS_URI": { "$ref": "#/$defs/emptyOrUri", "default": "" },

"WANDB_API_KEY": { "type": ["string","null"], "minLength": 16, "default": null },
"WANDB_PROJECT": { "type": "string", "default": "spectramind-v50" },
"WANDB_ENTITY": { "type": ["string","null"], "default": null },
"WANDB_MODE": { "type": "string", "enum": ["online","offline","disabled"], "default": "offline" },

"HF_HOME": { "type": "string", "default": "~/.cache/huggingface" },
"HF_TOKEN": { "type": ["string","null"], "minLength": 16, "default": null },
"HF_HUB_OFFLINE": { "$ref": "#/$defs/boolString", "default": "true" },
"TRANSFORMERS_OFFLINE": { "$ref": "#/$defs/boolString", "default": "true" },

"DATA_ROOT": { "type": "string", "default": "data" },
"DVC_REMOTE": { "type": "string", "default": "origin" },
"DVC_CACHE_DIR": { "type": "string", "default": ".dvc/cache" },
"LAKEFS_SERVER": { "$ref": "#/$defs/emptyOrUri", "default": "" },
"LAKEFS_REPOSITORY": { "$ref": "#/$defs/emptyOrString", "default": "" },
"LAKEFS_ACCESS_KEY": { "oneOf": [ { "type": "string", "minLength": 8 }, { "type": "string", "const": "" } ], "default": "" },
"LAKEFS_SECRET_KEY": { "oneOf": [ { "type": "string", "minLength": 16 }, { "type": "string", "const": "" } ], "default": "" },

"KAGGLE_COMPETITION": { "type": "string", "default": "neurips-2025-ariel" },
"KAGGLE_SUBMISSION_FILE": { "type": "string", "default": "outputs/submission.csv" },
"KAGGLE_SUBMISSION_MSG": { "type": "string", "default": "SpectraMind V50 submission" },

"DOCKER_IMAGE_NAME": { "type": "string", "default": "spectramindv50:dev" },
"DOCKER_CONTAINER_NAME": { "type": "string", "default": "spectramindv50" },
"DOCKER_PORT": { "$ref": "#/$defs/portString", "default": "8888" },
"DOCKER_GPU": { "$ref": "#/$defs/switch01", "default": "1" },
"DOCKER_BUILDKIT": { "$ref": "#/$defs/switch01", "default": "1" },
"COMPOSE_DOCKER_CLI_BUILD": { "$ref": "#/$defs/switch01", "default": "1" },

"NODE_VERSION": { "$ref": "#/$defs/semverLike", "default": "20.12.2", "description": "For Mermaid/diagram toolchain in CI." },
"NPM_BIN": { "type": "string", "default": "npm" },
"MERMAID_CLI_OPTS": { "type": "string", "default": "", "description": "Additional flags for mmdc (Mermaid CLI)." },

"CI": { "$ref": "#/$defs/boolString", "default": "false" },
"GITHUB_ACTIONS": { "$ref": "#/$defs/boolString", "default": "false" },
"GIT_COMMIT": { "type": "string", "default": "" },
"GIT_BRANCH": { "type": "string", "default": "" },

"SPECTRAMIND_CLI": { "type": "string", "default": "spectramind" },
"DIAGNOSTICS_REPORT": { "type": "string", "default": "outputs/diagnostics/report.html" },
"ENABLE_HTML_DASHBOARD": { "$ref": "#/$defs/boolString", "default": "true" },
"ENABLE_TELEMETRY": { "$ref": "#/$defs/boolString", "default": "false" },

"CONTACT_SECURITY_EMAIL": { "$ref": "#/$defs/emailString", "default": "security@example.org" }

},

“required”: [
“PROJECT_NAME”,“PROJECT_STAGE”,“CONFIG_FILE”,“HYDRA_FULL_ERROR”,
“PYTHON_VERSION”,“POETRY_VIRTUALENVS_CREATE”,“POETRY_VIRTUALENVS_IN_PROJECT”,
“LOGS_DIR”,“OUT_DIR”,“RUN_HASH_FILE”,“DIAGNOSTICS_DIR”,
“DATA_ROOT”,“DVC_REMOTE”,“DVC_CACHE_DIR”,
“KAGGLE_COMPETITION”,“KAGGLE_SUBMISSION_FILE”,“KAGGLE_SUBMISSION_MSG”,
“DOCKER_IMAGE_NAME”,“DOCKER_CONTAINER_NAME”,“DOCKER_PORT”,“DOCKER_BUILDKIT”,“COMPOSE_DOCKER_CLI_BUILD”,
“SPECTRAMIND_CLI”,“DIAGNOSTICS_REPORT”,“ENABLE_RICH_LOGGING”,“ENABLE_HTML_DASHBOARD”
],

“allOf”: [
{
“if”: { “properties”: { “PROJECT_STAGE”: { “const”: “prod” } } },
“then”: {
“properties”: {
“WANDB_MODE”: { “const”: “online” },
“ENABLE_TELEMETRY”: { “const”: “true” }
},
“description”: “In prod, enable online tracking and telemetry.”
}
},
{
“if”: { “properties”: { “DOCKER_GPU”: { “const”: “1” } } },
“then”: {
“required”: [“CUDA_VERSION”],
“properties”: {
“CUDA_VERSION”: { “$ref”: “#/$defs/semverLike” },
“CUDNN_VERSION”: { “type”: “string”, “pattern”: “^[0-9]+(\.[0-9]+)?$” }
},
“description”: “If GPU enabled, require CUDA/cuDNN versions.”
}
},
{
“if”: {
“properties”: {
“MLFLOW_TRACKING_URI”: { “not”: { “const”: “” } }
}
},
“then”: {
“required”: [“MLFLOW_EXPERIMENT_NAME”],
“description”: “If MLflow tracking URI is set, an experiment name must be provided.”
}
},
{
“if”: {
“properties”: {
“HF_HUB_OFFLINE”: { “const”: “true” },
“TRANSFORMERS_OFFLINE”: { “const”: “true” }
}
},
“then”: {
“properties”: {
“HF_TOKEN”: { “type”: [“string”,“null”], “default”: null }
},
“description”: “When fully offline, token is optional.”
},
“else”: {
“properties”: {
“HF_TOKEN”: { “type”: [“string”,“null”], “minLength”: 16 }
},
“description”: “When online operations may occur, token (if used) must be >=16 chars.”
}
},
{
“if”: {
“properties”: {
“LAKEFS_SERVER”: { “not”: { “const”: “” } }
}
},
“then”: {
“required”: [“LAKEFS_REPOSITORY”,“LAKEFS_ACCESS_KEY”,“LAKEFS_SECRET_KEY”],
“description”: “If lakeFS is configured, repository and credentials must be supplied.”
}
}
],

“examples”: [
{
“PROJECT_NAME”: “SpectraMindV50”,
“PROJECT_STAGE”: “dev”,
“CONFIG_FILE”: “configs/config_v50.yaml”,
“HYDRA_FULL_ERROR”: “1”,
“PYTHON_VERSION”: “3.12”,
“POETRY_VIRTUALENVS_CREATE”: “false”,
“POETRY_VIRTUALENVS_IN_PROJECT”: “true”,
“CUDA_VERSION”: “12.4”,
“CUDNN_VERSION”: “9”,
“TORCH_DETERMINISTIC”: “true”,
“TORCH_ALLOW_TF32”: “false”,
“GLOBAL_SEED”: “1337”,
“NUM_WORKERS”: “4”,
“LOGS_DIR”: “logs”,
“OUT_DIR”: “outputs”,
“RUN_HASH_FILE”: “run_hash_summary_v50.json”,
“DIAGNOSTICS_DIR”: “outputs/diagnostics”,
“ENABLE_RICH_LOGGING”: “true”,
“LOG_LEVEL”: “INFO”,
“NO_COLOR”: “false”,
“TZ”: “UTC”,
“LC_ALL”: “C.UTF-8”,
“MLFLOW_TRACKING_URI”: “”,
“MLFLOW_EXPERIMENT_NAME”: null,
“MLFLOW_ARTIFACTS_URI”: “”,
“WANDB_API_KEY”: null,
“WANDB_PROJECT”: “spectramind-v50”,
“WANDB_ENTITY”: null,
“WANDB_MODE”: “offline”,
“HF_HOME”: “~/.cache/huggingface”,
“HF_TOKEN”: null,
“HF_HUB_OFFLINE”: “true”,
“TRANSFORMERS_OFFLINE”: “true”,
“DATA_ROOT”: “data”,
“DVC_REMOTE”: “origin”,
“DVC_CACHE_DIR”: “.dvc/cache”,
“KAGGLE_COMPETITION”: “neurips-2025-ariel”,
“KAGGLE_SUBMISSION_FILE”: “outputs/submission.csv”,
“KAGGLE_SUBMISSION_MSG”: “SpectraMind V50 submission”,
“DOCKER_IMAGE_NAME”: “spectramindv50:dev”,
“DOCKER_CONTAINER_NAME”: “spectramindv50”,
“DOCKER_PORT”: “8888”,
“DOCKER_GPU”: “1”,
“DOCKER_BUILDKIT”: “1”,
“COMPOSE_DOCKER_CLI_BUILD”: “1”,
“NODE_VERSION”: “20.12.2”,
“NPM_BIN”: “npm”,
“MERMAID_CLI_OPTS”: “”,
“CI”: “false”,
“GITHUB_ACTIONS”: “false”,
“GIT_COMMIT”: “”,
“GIT_BRANCH”: “”,
“SPECTRAMIND_CLI”: “spectramind”,
“DIAGNOSTICS_REPORT”: “outputs/diagnostics/report.html”,
“ENABLE_HTML_DASHBOARD”: “true”,
“ENABLE_TELEMETRY”: “false”,
“CONTACT_SECURITY_EMAIL”: “security@example.org”
}
]
}