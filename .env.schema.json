{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://example.org/spectramind/.env.schema.json",
  "title": "SpectraMind V50 .env Schema",
  "description": "Mission‑grade JSON Schema to validate `.env` for SpectraMind V50. Covers Hydra, Poetry/Docker, CUDA, PyTorch determinism, MLflow/W&B, DVC/lakeFS, Kaggle, Hugging Face, diagrams (npm), containerized CI, and CLI diagnostics.",
  "type": "object",
  "additionalProperties": true,

  "$defs": {
    "boolString": {
      "description": "Boolean represented as a string literal `true` or `false`.",
      "type": "string",
      "enum": ["true", "false"]
    },
    "switch01": {
      "description": "Switch represented as '0' or '1'.",
      "type": "string",
      "enum": ["0", "1"]
    },
    "uintString": {
      "description": "Unsigned integer represented as a string (e.g., '0', '12').",
      "type": "string",
      "pattern": "^[0-9]+$"
    },
    "intString": {
      "description": "Signed integer represented as a string (e.g., '-1', '0', '42').",
      "type": "string",
      "pattern": "^-?[0-9]+$"
    },
    "portString": {
      "description": "TCP port as string 1..65535 (2–5 digits allowed).",
      "type": "string",
      "pattern": "^(?:[0-9]{2,5})$"
    },
    "semverLike": {
      "description": "Version like '3.12' or '12.4.1'.",
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+(\\.[0-9]+)?$"
    },
    "pathString": {
      "description": "Filesystem path string (nonempty).",
      "type": "string",
      "minLength": 1
    },
    "uriString": {
      "description": "URI string (http(s), file, etc.).",
      "type": "string",
      "format": "uri"
    },
    "csvList": {
      "description": "Comma‑separated list (no spaces) of tokens/URIs/hosts.",
      "type": "string",
      "pattern": "^[^\\s,]+(?:,[^\\s,]+)*$"
    },
    "logLevel": {
      "type": "string",
      "enum": ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
    }
  },

  "properties": {
    "PROJECT_NAME": {
      "type": "string",
      "minLength": 1,
      "default": "SpectraMindV50",
      "description": "Human‑friendly project name."
    },
    "PROJECT_STAGE": {
      "type": "string",
      "enum": ["dev", "test", "prod"],
      "default": "dev",
      "description": "Deployment stage / environment (affects CI/logging/runtime guards)."
    },

    "CONFIG_FILE": {
      "type": "string",
      "pattern": "^(configs/).+\\.ya?ml$",
      "default": "configs/config_v50.yaml",
      "description": "Hydra root config path (composed at runtime)."
    },
    "HYDRA_FULL_ERROR": {
      "$ref": "#/$defs/switch01",
      "default": "1",
      "description": "Hydra exception verbosity (1 = full trace)."
    },

    "PYTHON_VERSION": {
      "$ref": "#/$defs/semverLike",
      "default": "3.12",
      "description": "Python version pinned in Poetry/Docker."
    },
    "POETRY_VIRTUALENVS_CREATE": {
      "$ref": "#/$defs/boolString",
      "default": "false",
      "description": "Whether Poetry should create virtualenvs (set false for Docker/Kaggle)."
    },
    "POETRY_VIRTUALENVS_IN_PROJECT": {
      "$ref": "#/$defs/boolString",
      "default": "true",
      "description": "Place Poetry venv inside project (.venv)."
    },

    "CUDA_VERSION": {
      "$ref": "#/$defs/semverLike",
      "default": "12.4",
      "description": "CUDA version aligned to base images / PyTorch build."
    },
    "CUDNN_VERSION": {
      "type": "string",
      "pattern": "^[0-9]+(\\.[0-9]+)?$",
      "default": "9",
      "description": "cuDNN major/minor version."
    },
    "TORCH_DETERMINISTIC": {
      "$ref": "#/$defs/boolString",
      "default": "true",
      "description": "Enable deterministic/cuDNN settings."
    },
    "TORCH_ALLOW_TF32": {
      "$ref": "#/$defs/boolString",
      "default": "false",
      "description": "Permit TF32 matmul on Ampere+ if desired."
    },
    "GLOBAL_SEED": {
      "$ref": "#/$defs/intString",
      "default": "1337",
      "description": "Global RNG seed as string."
    },
    "NUM_WORKERS": {
      "$ref": "#/$defs/uintString",
      "default": "4",
      "description": "DataLoader workers (string for .env compatibility)."
    },

    "LOGS_DIR": {
      "$ref": "#/$defs/pathString",
      "default": "logs",
      "description": "Directory for structured logs."
    },
    "OUT_DIR": {
      "$ref": "#/$defs/pathString",
      "default": "outputs",
      "description": "Root directory for outputs."
    },
    "RUN_HASH_FILE": {
      "type": "string",
      "default": "run_hash_summary_v50.json",
      "description": "Reproducibility run hash summary file (written to OUT_DIR)."
    },
    "DIAGNOSTICS_DIR": {
      "type": "string",
      "default": "outputs/diagnostics",
      "description": "Diagnostics output folder."
    },

    "ENABLE_RICH_LOGGING": {
      "$ref": "#/$defs/boolString",
      "default": "true",
      "description": "Pretty console logging with Rich."
    },
    "LOG_LEVEL": {
      "$ref": "#/$defs/logLevel",
      "default": "INFO"
    },
    "NO_COLOR": {
      "$ref": "#/$defs/boolString",
      "default": "false",
      "description": "Disable ANSI color in logs if true."
    },
    "TZ": {
      "type": "string",
      "default": "UTC",
      "description": "Time zone identifier (e.g., 'UTC', 'America/Chicago')."
    },
    "LC_ALL": {
      "type": "string",
      "default": "C.UTF-8",
      "description": "Locale for stable sort/parse (CI)."
    },

    "MLFLOW_TRACKING_URI": {
      "oneOf": [
        { "$ref": "#/$defs/uriString" },
        { "type": "string", "const": "" }
      ],
      "default": "",
      "description": "MLflow tracking server URI. Empty for disabled."
    },
    "MLFLOW_EXPERIMENT_NAME": {
      "type": ["string", "null"],
      "default": null
    },
    "MLFLOW_ARTIFACTS_URI": {
      "oneOf": [
        { "$ref": "#/$defs/uriString" },
        { "type": "string", "const": "" }
      ],
      "default": ""
    },

    "WANDB_API_KEY": {
      "type": ["string", "null"],
      "default": null
    },
    "WANDB_PROJECT": {
      "type": "string",
      "default": "spectramind-v50"
    },
    "WANDB_ENTITY": {
      "type": ["string", "null"],
      "default": null
    },
    "WANDB_MODE": {
      "type": "string",
      "enum": ["online", "offline", "disabled"],
      "default": "offline"
    },

    "HF_HOME": {
      "type": "string",
      "default": "~/.cache/huggingface",
      "description": "Local cache dir for Hugging Face Hub."
    },
    "HF_TOKEN": {
      "type": ["string", "null"],
      "default": null
    },
    "HF_HUB_OFFLINE": {
      "$ref": "#/$defs/boolString",
      "default": "true"
    },
    "TRANSFORMERS_OFFLINE": {
      "$ref": "#/$defs/boolString",
      "default": "true"
    },

    "DATA_ROOT": {
      "type": "string",
      "default": "data"
    },
    "DVC_REMOTE": {
      "type": "string",
      "default": "origin"
    },
    "DVC_REMOTE_URL": {
      "type": ["string", "null"],
      "default": null,
      "description": "Optional remote URL override."
    },
    "DVC_CACHE_DIR": {
      "type": "string",
      "default": ".dvc/cache"
    },

    "LAKEFS_ENDPOINT": {
      "oneOf": [
        { "$ref": "#/$defs/uriString" },
        { "type": "string", "const": "" },
        { "type": "null" }
      ],
      "default": null
    },
    "LAKEFS_ACCESS_KEY": {
      "type": ["string", "null"],
      "default": null
    },
    "LAKEFS_SECRET_KEY": {
      "type": ["string", "null"],
      "default": null
    },

    "AWS_ACCESS_KEY_ID": {
      "type": ["string", "null"],
      "default": null
    },
    "AWS_SECRET_ACCESS_KEY": {
      "type": ["string", "null"],
      "default": null
    },
    "AWS_DEFAULT_REGION": {
      "type": ["string", "null"],
      "default": null
    },
    "GCP_SERVICE_ACCOUNT_JSON": {
      "type": ["string", "null"],
      "default": null
    },
    "AZURE_STORAGE_CONNECTION_STRING": {
      "type": ["string", "null"],
      "default": null
    },

    "KAGGLE_USERNAME": {
      "type": ["string", "null"],
      "default": null
    },
    "KAGGLE_KEY": {
      "type": ["string", "null"],
      "default": null
    },
    "KAGGLE_COMPETITION": {
      "type": "string",
      "default": "neurips-2025-ariel",
      "description": "Competition slug."
    },
    "KAGGLE_SUBMISSION_FILE": {
      "type": "string",
      "default": "outputs/submission.csv"
    },
    "KAGGLE_SUBMISSION_MSG": {
      "type": "string",
      "default": "SpectraMind V50 submission"
    },

    "DOCKER_IMAGE_NAME": {
      "type": "string",
      "default": "spectramindv50:dev"
    },
    "DOCKER_CONTAINER_NAME": {
      "type": "string",
      "default": "spectramindv50"
    },
    "DOCKER_PORT": {
      "$ref": "#/$defs/portString",
      "default": "8888"
    },
    "DOCKER_GPU": {
      "$ref": "#/$defs/switch01",
      "default": "1",
      "description": "1=enable `--gpus all` when GPU present."
    },
    "DOCKER_BUILD_ARGS": {
      "type": ["string", "null"],
      "default": null,
      "description": "Additional build args (e.g., KEY=VALUE KEY2=VALUE2)."
    },
    "DOCKER_BUILDKIT": {
      "$ref": "#/$defs/switch01",
      "default": "1"
    },
    "COMPOSE_DOCKER_CLI_BUILD": {
      "$ref": "#/$defs/switch01",
      "default": "1"
    },

    "SPECTRAMIND_CLI": {
      "type": "string",
      "default": "spectramind"
    },
    "DIAGNOSTICS_REPORT": {
      "type": "string",
      "default": "outputs/diagnostics/report.html"
    },
    "ENABLE_HTML_DASHBOARD": {
      "$ref": "#/$defs/boolString",
      "default": "true"
    },

    "SECRET_KEY_BASE": {
      "type": ["string", "null"],
      "default": null,
      "minLength": 16
    },
    "JWT_SECRET": {
      "type": ["string", "null"],
      "default": null,
      "minLength": 16
    },
    "SERVICE_ACCOUNT_JSON": {
      "type": ["string", "null"],
      "default": null
    },

    "API_HOST": {
      "type": "string",
      "default": "127.0.0.1"
    },
    "API_PORT": {
      "$ref": "#/$defs/portString",
      "default": "8000"
    },
    "API_CORS_ORIGINS": {
      "oneOf": [
        { "$ref": "#/$defs/csvList" },
        { "type": "string", "const": "" },
        { "type": "null" }
      ],
      "default": null,
      "description": "Comma‑separated allowed origins for CORS."
    },

    "HTTP_PROXY": {
      "type": ["string", "null"],
      "default": null
    },
    "HTTPS_PROXY": {
      "type": ["string", "null"],
      "default": null
    },
    "NO_PROXY": {
      "oneOf": [
        { "$ref": "#/$defs/csvList" },
        { "type": "string", "const": "" },
        { "type": "null" }
      ],
      "default": null
    },

    "NODE_OPTIONS": {
      "type": ["string", "null"],
      "default": null,
      "description": "Advanced Node runtime options (e.g., --max_old_space_size=4096)."
    }
  },

  "required": [
    "PROJECT_NAME",
    "PROJECT_STAGE",
    "CONFIG_FILE",
    "HYDRA_FULL_ERROR",

    "PYTHON_VERSION",
    "POETRY_VIRTUALENVS_CREATE",
    "POETRY_VIRTUALENVS_IN_PROJECT",

    "LOGS_DIR",
    "OUT_DIR",
    "RUN_HASH_FILE",
    "DIAGNOSTICS_DIR",

    "DATA_ROOT",
    "DVC_REMOTE",
    "DVC_CACHE_DIR",

    "KAGGLE_COMPETITION",
    "KAGGLE_SUBMISSION_FILE",
    "KAGGLE_SUBMISSION_MSG",

    "DOCKER_IMAGE_NAME",
    "DOCKER_CONTAINER_NAME",
    "DOCKER_PORT",
    "DOCKER_BUILDKIT",
    "COMPOSE_DOCKER_CLI_BUILD",

    "SPECTRAMIND_CLI",
    "DIAGNOSTICS_REPORT",
    "ENABLE_RICH_LOGGING",
    "ENABLE_HTML_DASHBOARD"
  ],

  "allOf": [
    {
      "if": { "properties": { "PROJECT_STAGE": { "const": "prod" } } },
      "then": {
        "properties": {
          "WANDB_MODE": { "const": "online" }
        },
        "description": "In prod, W&B must be online."
      }
    },
    {
      "if": { "properties": { "DOCKER_GPU": { "const": "1" } } },
      "then": {
        "properties": {
          "CUDA_VERSION": { "$ref": "#/$defs/semverLike" }
        },
        "description": "If GPU enabled, require CUDA version set."
      }
    }
  ],

  "examples": [
    {
      "PROJECT_NAME": "SpectraMindV50",
      "PROJECT_STAGE": "dev",

      "CONFIG_FILE": "configs/config_v50.yaml",
      "HYDRA_FULL_ERROR": "1",

      "PYTHON_VERSION": "3.12",
      "POETRY_VIRTUALENVS_CREATE": "false",
      "POETRY_VIRTUALENVS_IN_PROJECT": "true",

      "CUDA_VERSION": "12.4",
      "CUDNN_VERSION": "9",
      "TORCH_DETERMINISTIC": "true",
      "TORCH_ALLOW_TF32": "false",
      "GLOBAL_SEED": "1337",
      "NUM_WORKERS": "4",

      "LOGS_DIR": "logs",
      "OUT_DIR": "outputs",
      "RUN_HASH_FILE": "run_hash_summary_v50.json",
      "DIAGNOSTICS_DIR": "outputs/diagnostics",

      "ENABLE_RICH_LOGGING": "true",
      "LOG_LEVEL": "INFO",
      "NO_COLOR": "false",
      "TZ": "UTC",
      "LC_ALL": "C.UTF-8",

      "MLFLOW_TRACKING_URI": "",
      "MLFLOW_EXPERIMENT_NAME": null,
      "MLFLOW_ARTIFACTS_URI": "",

      "WANDB_PROJECT": "spectramind-v50",
      "WANDB_MODE": "offline",

      "HF_HOME": "~/.cache/huggingface",
      "HF_HUB_OFFLINE": "true",
      "TRANSFORMERS_OFFLINE": "true",

      "DATA_ROOT": "data",
      "DVC_REMOTE": "origin",
      "DVC_CACHE_DIR": ".dvc/cache",

      "KAGGLE_COMPETITION": "neurips-2025-ariel",
      "KAGGLE_SUBMISSION_FILE": "outputs/submission.csv",
      "KAGGLE_SUBMISSION_MSG": "SpectraMind V50 submission",

      "DOCKER_IMAGE_NAME": "spectramindv50:dev",
      "DOCKER_CONTAINER_NAME": "spectramindv50",
      "DOCKER_PORT": "8888",
      "DOCKER_GPU": "1",
      "DOCKER_BUILDKIT": "1",
      "COMPOSE_DOCKER_CLI_BUILD": "1",

      "SPECTRAMIND_CLI": "spectramind",
      "DIAGNOSTICS_REPORT": "outputs/diagnostics/report.html",
      "ENABLE_HTML_DASHBOARD": "true",

      "API_HOST": "127.0.0.1",
      "API_PORT": "8000",
      "API_CORS_ORIGINS": "http://localhost:3000",

      "HTTP_PROXY": null,
      "HTTPS_PROXY": null,
      "NO_PROXY": null,

      "NODE_OPTIONS": "--max_old_space_size=4096"
    }
  ]
}
