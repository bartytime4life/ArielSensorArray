# ==============================================================================
# SpectraMind V50 — Example Environment File (.env.example)
# ------------------------------------------------------------------------------
# Copy this file to `.env` and adjust for your machine / CI / Kaggle.
# Do NOT commit `.env` — only this example template should be tracked.
# ==============================================================================

# -----------------------
# Core Project Settings
# -----------------------
PROJECT_NAME=SpectraMindV50
PROJECT_STAGE=dev                                  # dev | test | prod

# Hydra config & behavior
CONFIG_FILE=configs/config_v50.yaml
HYDRA_FULL_ERROR=1                                 # 1 = full Hydra tracebacks
HYDRA_RUN_DIR=outputs/hydra/${now}                 # optional: Hydra run dir
HYDRA_OVERRIDE=                                    # optional CLI overrides, e.g. "+training.seed=1337"
CONFIG_HASH_STRICT=true                            # guard: fail if resolved config hash drifts

# -----------------------
# Python / Poetry / CUDA
# -----------------------
PYTHON_VERSION=3.12
POETRY_VIRTUALENVS_CREATE=false                    # false for Docker/Kaggle
POETRY_VIRTUALENVS_IN_PROJECT=true                 # keep .venv inside repo

CUDA_VERSION=12.4
CUDNN_VERSION=9
TORCH_DETERMINISTIC=true                           # enforce deterministic/cuDNN
NUM_WORKERS=4                                      # dataloader workers (string for .env)

# -----------------------
# Logging / Reproducibility
# -----------------------
LOGS_DIR=logs
OUT_DIR=outputs
RUN_HASH_FILE=run_hash_summary_v50.json
DIAGNOSTICS_DIR=outputs/diagnostics

# Optional structured logs (not strictly required by schema)
EVENT_LOG_JSONL=logs/v50_event_log.jsonl
DEBUG_LOG_MD=logs/v50_debug_log.md

ENABLE_RICH_LOGGING=true
LOG_LEVEL=INFO                                     # DEBUG | INFO | WARNING | ERROR | CRITICAL
NO_COLOR=false                                     # true disables ANSI color in logs

# -----------------------
# Experiment Tracking (optional)
# -----------------------
MLFLOW_TRACKING_URI=                               # e.g. http://127.0.0.1:5000
MLFLOW_EXPERIMENT_NAME=spectramind-v50
MLFLOW_ARTIFACTS_URI=                              # e.g. s3://bucket/path (optional)

WANDB_API_KEY=                                     # set if using Weights & Biases
WANDB_PROJECT=spectramind-v50
WANDB_ENTITY=
WANDB_MODE=offline                                 # online | offline | disabled

# -----------------------
# Hugging Face / Transformers
# -----------------------
HF_HOME=~/.cache/huggingface
HF_TOKEN=                                          # optional auth token for private repos
HF_HUB_OFFLINE=true
TRANSFORMERS_OFFLINE=true

# -----------------------
# Data / DVC / lakeFS
# -----------------------
DATA_ROOT=data
DVC_REMOTE=origin
DVC_REMOTE_URL=                                    # optional explicit remote URL
DVC_CACHE_DIR=.dvc/cache

LAKEFS_ENDPOINT=                                   # e.g. http://localhost:8000 (optional)
LAKEFS_ACCESS_KEY=
LAKEFS_SECRET_KEY=

# Optional cloud credentials for DVC remotes (leave empty if unused)
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=
GCP_SERVICE_ACCOUNT_JSON=                          # path to JSON keyfile
AZURE_STORAGE_CONNECTION_STRING=

# -----------------------
# Kaggle Integration
# -----------------------
KAGGLE_USERNAME=
KAGGLE_KEY=
KAGGLE_COMPETITION=neurips-2025-ariel
KAGGLE_SUBMISSION_FILE=outputs/submission.csv
KAGGLE_SUBMISSION_MSG=SpectraMind V50 submission
RUNTIME_MAX_HOURS=9                                # Kaggle runtime envelope (hours)

# -----------------------
# Docker / BuildKit
# -----------------------
DOCKER_IMAGE_NAME=spectramindv50:dev
DOCKER_CONTAINER_NAME=spectramindv50
DOCKER_PORT=8888                                   # port for Jupyter/docs
DOCKER_GPU=1                                       # 1 enables --gpus all when present
DOCKER_BUILDKIT=1                                  # enable BuildKit
COMPOSE_DOCKER_CLI_BUILD=1                         # use Docker CLI for compose builds
DOCKER_BUILD_ARGS=                                 # optional: KEY=VAL KEY2=VAL ...

# -----------------------
# CLI / Diagnostics / Dashboard
# -----------------------
SPECTRAMIND_CLI=spectramind
SELFTEST_DEEP=false                                # run deep selftest (Hydra/DVC/GPU)
DIAGNOSTICS_REPORT=outputs/diagnostics/report.html
DIAGNOSTICS_JSON=outputs/diagnostics/diagnostic_summary.json
ENABLE_HTML_DASHBOARD=true
DIAGNOSTICS_HTML_OPEN=false
DIAG_ENABLE_UMAP=true
DIAG_ENABLE_TSNE=true
DIAG_ENABLE_SHAP=true
DIAG_ENABLE_SYMBOLIC=true
SUBMISSION_BUNDLE=outputs/submission_bundle.zip

# -----------------------
# Reproducibility
# -----------------------
SEED=1337

# -----------------------
# Security / Secrets (optional)
# -----------------------
SECRET_KEY_BASE=                                   # >=16 chars if set
JWT_SECRET=                                        # >=16 chars if set
SERVICE_ACCOUNT_JSON=                              # path to service account file if needed

# -----------------------
# Optional API / Dashboard
# -----------------------
API_HOST=127.0.0.1
API_PORT=8000
API_CORS_ORIGINS=                                  # comma-separated origins, e.g. http://localhost:3000

# -----------------------
# Node / Mermaid (diagrams)
# -----------------------
NODE_OPTIONS=                                      # e.g. --max_old_space_size=4096

# -----------------------
# GUI Framework (optional)
# -----------------------
GUI_FRAMEWORK=none                                 # qt | electron | react | none