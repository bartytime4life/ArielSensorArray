# ==============================================================================
# SpectraMind V50 — Example Environment File (.env.example)
# ------------------------------------------------------------------------------
# Copy this file to `.env` and adjust for your machine / CI / Kaggle.
# Do NOT commit `.env` — only this example template should be tracked.
#
# Conventions
# • Booleans are lowercase "true"/"false"
# • Integers are plain numbers (no quotes)
# • Empty means "feature disabled" or "auto-detect"
# • Paths may be absolute or repo-relative
# ==============================================================================
# Repo hygiene: you may validate this file with `.env.schema.json` using
# `spectramind test --deep` or your preferred JSON Schema validator.

# -----------------------
# Core Project Settings
# -----------------------
PROJECT_NAME=SpectraMindV50
PROJECT_STAGE=dev                                  # dev | test | prod

# Hydra config & behavior
CONFIG_FILE=configs/config_v50.yaml
HYDRA_FULL_ERROR=1                                 # 1 = full Hydra tracebacks
HYDRA_RUN_DIR=outputs/hydra/${now}                 # optional: Hydra run dir
HYDRA_OVERRIDE=                                    # optional CLI overrides, e.g. "+training.seed=1337"
CONFIG_HASH_STRICT=true                            # guard: fail if resolved config hash drifts

# Reproducibility seed (many scripts allow override via CLI)
GLOBAL_SEED=1337

# -----------------------
# Python / Poetry / CUDA
# -----------------------
PYTHON_VERSION=3.12
POETRY_VIRTUALENVS_CREATE=false                    # false for Docker/Kaggle
POETRY_VIRTUALENVS_IN_PROJECT=true                 # keep .venv inside repo

CUDA_VERSION=12.4
CUDNN_VERSION=9
TORCH_DETERMINISTIC=true                           # enforce deterministic/cuDNN
NUM_WORKERS=4                                      # dataloader workers
PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True   # recommended memory allocator (optional)
MPLBACKEND=Agg                                     # headless plotting default

# -----------------------
# Logging / Reproducibility
# -----------------------
LOGS_DIR=logs
OUT_DIR=outputs
ARTIFACTS_DIR=artifacts                            # server static mount for GUI
RUN_HASH_FILE=run_hash_summary_v50.json
DIAGNOSTICS_DIR=outputs/diagnostics
CACHE_DIR=.cache                                   # generic cache root (pip/HF/etc.)

# Structured logs
EVENT_LOG_JSONL=logs/v50_event_log.jsonl
DEBUG_LOG_MD=logs/v50_debug_log.md

ENABLE_RICH_LOGGING=true
LOG_LEVEL=INFO                                     # DEBUG | INFO | WARNING | ERROR | CRITICAL
NO_COLOR=false                                     # true disables ANSI color in logs

# Optional: JSON logging for CI ingestion
JSON_LOGGING=false
JSON_LOG_FILE=logs/v50_events.ndjson

# -----------------------
# Experiment Tracking (optional)
# -----------------------
MLFLOW_TRACKING_URI=                               # e.g. http://127.0.0.1:5000
MLFLOW_EXPERIMENT_NAME=spectramind-v50
MLFLOW_ARTIFACTS_URI=                              # e.g. s3://bucket/path (optional)
MLFLOW_ENABLE_SYSTEM_METRICS=false

WANDB_API_KEY=                                     # set if using Weights & Biases
WANDB_PROJECT=spectramind-v50
WANDB_ENTITY=
WANDB_MODE=offline                                 # online | offline | disabled
WANDB_DIR=./wandb                                  # local run dir

# -----------------------
# Hugging Face / Transformers
# -----------------------
HF_HOME=~/.cache/huggingface
HF_TOKEN=                                          # optional auth token for private repos
HF_HUB_OFFLINE=true
TRANSFORMERS_OFFLINE=true
HF_DATASETS_OFFLINE=true
HF_HUB_ENABLE_HF_TRANSFER=false                    # set true if using hf_transfer for speed

# -----------------------
# Data / DVC / lakeFS
# -----------------------
DATA_ROOT=data
DVC_REMOTE=origin
DVC_REMOTE_URL=                                    # optional explicit remote URL
DVC_CACHE_DIR=.dvc/cache
DVC_DISABLE_AUTO_PULL=false

LAKEFS_ENDPOINT=                                   # e.g. http://localhost:8000 (optional)
LAKEFS_ACCESS_KEY=
LAKEFS_SECRET_KEY=
LAKEFS_REPO=spectramind                            # optional
LAKEFS_BRANCH=main                                 # optional

# Optional cloud credentials for DVC remotes (leave empty if unused)
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=
AWS_SESSION_TOKEN=
GCP_SERVICE_ACCOUNT_JSON=                          # path to JSON keyfile
AZURE_STORAGE_CONNECTION_STRING=

# -----------------------
# Kaggle Integration
# -----------------------
KAGGLE_USERNAME=
KAGGLE_KEY=
KAGGLE_COMPETITION=neurips-2025-ariel
KAGGLE_SUBMISSION_FILE=outputs/submission.csv
KAGGLE_SUBMISSION_MSG=SpectraMind V50 submission
RUNTIME_MAX_HOURS=9                                # Kaggle runtime envelope (hours)
KAGGLE_DATASET=                                    # optional: owner/dataset-slug for artifacts
KAGGLE_NOTEBOOK_TITLE=SpectraMindV50-Inference     # optional: notebook title

# -----------------------
# Docker / BuildKit
# -----------------------
DOCKER_IMAGE_NAME=spectramindv50:dev
DOCKER_CONTAINER_NAME=spectramindv50
DOCKER_PORT=8888                                   # port for Jupyter/docs
DOCKER_GPU=1                                       # 1 enables --gpus all when present
DOCKER_BUILDKIT=1                                  # enable BuildKit
COMPOSE_DOCKER_CLI_BUILD=1                         # use Docker CLI for compose builds
DOCKER_BUILD_ARGS=                                 # optional: KEY=VAL KEY2=VAL ...
NVIDIA_VISIBLE_DEVICES=all                         # or GPU UUIDs (inside container)
NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Optional Podman parity (if you use Podman instead of Docker)
PODMAN=false

# -----------------------
# CLI / Diagnostics / Dashboard
# -----------------------
SPECTRAMIND_CLI=spectramind
SELFTEST_DEEP=false                                # run deep selftest (Hydra/DVC/GPU)
DIAGNOSTICS_REPORT=outputs/diagnostics/report.html
DIAGNOSTICS_JSON=outputs/diagnostics/diagnostic_summary.json
ENABLE_HTML_DASHBOARD=true
DIAGNOSTICS_HTML_OPEN=false
DIAG_ENABLE_UMAP=true
DIAG_ENABLE_TSNE=true
DIAG_ENABLE_SHAP=true
DIAG_ENABLE_SYMBOLIC=true
SUBMISSION_BUNDLE=outputs/submission_bundle.zip

# Projection/plot defaults (can be overridden by CLI)
UMAP_N_NEIGHBORS=15
UMAP_MIN_DIST=0.05
TSNE_PERPLEXITY=30
TSNE_N_COMPONENTS=2
SHAP_TOPK_BINS=32

# -----------------------
# API / FastAPI Dashboard (optional)
# -----------------------
API_HOST=127.0.0.1
API_PORT=8000
API_CORS_ORIGINS=                                  # comma-separated origins, e.g. http://localhost:3000
API_ENABLE_AUTH=false
API_REQUIRE_SIGNED_URLS=false

# -----------------------
# Security / Secrets (optional)
# -----------------------
SECRET_KEY_BASE=                                   # >=16 chars if set
JWT_SECRET=                                        # >=16 chars if set
SERVICE_ACCOUNT_JSON=                              # path to service account file if needed
ALLOWED_USERS=                                     # comma-separated emails/usernames
DISABLE_TELEMETRY=true

# -----------------------
# Node / Mermaid (diagrams)
# -----------------------
NODE_OPTIONS=                                      # e.g. --max_old_space_size=4096
MERMAID_CLI_BIN=npx mmdc                           # override if pinned
MERMAID_THEME=neutral

# -----------------------
# GUI Framework (optional)
# -----------------------
GUI_FRAMEWORK=none                                 # qt | electron | react | none
GUI_ASSETS_DIR=assets
GUI_OPEN_BROWSER=false

# -----------------------
# Networking / Proxies (optional)
# -----------------------
HTTP_PROXY=
HTTPS_PROXY=
NO_PROXY=localhost,127.0.0.1

# -----------------------
# CI toggles (optional)
# -----------------------
CI=false
CI_FAST_MODE=true                                  # skip heavy steps (e.g., large downloads)
CI_SAVE_ARTIFACTS=true
CI_GPU_SMOKE=false                                  # run small GPU smoke test if runner supports it

# -----------------------
# Jupyter / TensorBoard (optional)
# -----------------------
JUPYTER_ENABLE=false
JUPYTER_TOKEN=devtoken
JUPYTER_PORT=8888
TENSORBOARD_ENABLE=false
TENSORBOARD_PORT=6006

# -----------------------
# Submission / Packaging
# -----------------------
SUBMIT_AUTOVALIDATE=true
SUBMIT_INCLUDE_HTML=true
SUBMIT_INCLUDE_LOGS=true
PACKAGE_INCLUDE_SBOM=false                         # enable if you generate SBOMs via CI

# -----------------------
# Advanced (experts)
# -----------------------
OMP_NUM_THREADS=1
MKL_NUM_THREADS=1
TOKENIZERS_PARALLELISM=false
PYTHONUNBUFFERED=1
PYTHONHASHSEED=0
DETERMINISTIC_ALGO_WARNINGS=false