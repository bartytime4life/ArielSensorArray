# ==============================================================================

# SpectraMind V50 — Example Environment File (.env.example)

# ------------------------------------------------------------------------------

# Copy this file to `.env` and adjust for your machine / CI / Kaggle.

# Do NOT commit `.env` — only this example template should be tracked.

#

# Conventions

# • Booleans are lowercase "true"/"false"

# • Integers are plain numbers (no quotes)

# • Empty means "feature disabled" or "auto-detect"

# • Paths may be absolute or repo-relative

# ==============================================================================

# Repo hygiene: you may validate this file with `.env.schema.json` using

# `spectramind test --deep` or your preferred JSON Schema validator.

# -----------------------

# Core Project Settings

# -----------------------

PROJECT\_NAME=SpectraMindV50
PROJECT\_STAGE=dev                                  # dev | test | prod

# Hydra config & behavior

CONFIG\_FILE=configs/config\_v50.yaml
HYDRA\_FULL\_ERROR=1                                 # 1 = full Hydra tracebacks
HYDRA\_RUN\_DIR=outputs/hydra/\${now}                 # optional: Hydra run dir
HYDRA\_OVERRIDE=                                    # optional CLI overrides, e.g. "+training.seed=1337"
CONFIG\_HASH\_STRICT=true                            # guard: fail if resolved config hash drifts

# Reproducibility seed (many scripts allow override via CLI)

SEED=1337

# -----------------------

# Python / Poetry / CUDA

# -----------------------

PYTHON\_VERSION=3.12
POETRY\_VIRTUALENVS\_CREATE=false                    # false for Docker/Kaggle
POETRY\_VIRTUALENVS\_IN\_PROJECT=true                 # keep .venv inside repo

CUDA\_VERSION=12.4
CUDNN\_VERSION=9
TORCH\_DETERMINISTIC=true                           # enforce deterministic/cuDNN
NUM\_WORKERS=4                                      # dataloader workers (string for .env)
PYTORCH\_CUDA\_ALLOC\_CONF=expandable\_segments\:True   # recommended memory allocator (optional)
MPLBACKEND=Agg                                     # headless plotting default

# -----------------------

# Logging / Reproducibility

# -----------------------

LOGS\_DIR=logs
OUT\_DIR=outputs
ARTIFACTS\_DIR=artifacts                            # server static mount for GUI
RUN\_HASH\_FILE=run\_hash\_summary\_v50.json
DIAGNOSTICS\_DIR=outputs/diagnostics
CACHE\_DIR=.cache                                   # generic cache root (pip/HF/etc.)

# Structured logs

EVENT\_LOG\_JSONL=logs/v50\_event\_log.jsonl
DEBUG\_LOG\_MD=logs/v50\_debug\_log.md

ENABLE\_RICH\_LOGGING=true
LOG\_LEVEL=INFO                                     # DEBUG | INFO | WARNING | ERROR | CRITICAL
NO\_COLOR=false                                     # true disables ANSI color in logs

# Optional: JSON logging for CI ingestion

JSON\_LOGGING=false
JSON\_LOG\_FILE=logs/v50\_events.ndjson

# -----------------------

# Experiment Tracking (optional)

# -----------------------

MLFLOW\_TRACKING\_URI=                               # e.g. [http://127.0.0.1:5000](http://127.0.0.1:5000)
MLFLOW\_EXPERIMENT\_NAME=spectramind-v50
MLFLOW\_ARTIFACTS\_URI=                              # e.g. s3://bucket/path (optional)
MLFLOW\_ENABLE\_SYSTEM\_METRICS=false

WANDB\_API\_KEY=                                     # set if using Weights & Biases
WANDB\_PROJECT=spectramind-v50
WANDB\_ENTITY=
WANDB\_MODE=offline                                 # online | offline | disabled
WANDB\_DIR=./wandb                                  # local run dir

# -----------------------

# Hugging Face / Transformers

# -----------------------

HF\_HOME=\~/.cache/huggingface
HF\_TOKEN=                                          # optional auth token for private repos
HF\_HUB\_OFFLINE=true
TRANSFORMERS\_OFFLINE=true
HF\_DATASETS\_OFFLINE=true
HF\_HUB\_ENABLE\_HF\_TRANSFER=false                    # set true if using hf\_transfer for speed

# -----------------------

# Data / DVC / lakeFS

# -----------------------

DATA\_ROOT=data
DVC\_REMOTE=origin
DVC\_REMOTE\_URL=                                    # optional explicit remote URL
DVC\_CACHE\_DIR=.dvc/cache
DVC\_DISABLE\_AUTO\_PULL=false

LAKEFS\_ENDPOINT=                                   # e.g. [http://localhost:8000](http://localhost:8000) (optional)
LAKEFS\_ACCESS\_KEY=
LAKEFS\_SECRET\_KEY=
LAKEFS\_REPO=spectramind                            # optional
LAKEFS\_BRANCH=main                                 # optional

# Optional cloud credentials for DVC remotes (leave empty if unused)

AWS\_ACCESS\_KEY\_ID=
AWS\_SECRET\_ACCESS\_KEY=
AWS\_DEFAULT\_REGION=
AWS\_SESSION\_TOKEN=
GCP\_SERVICE\_ACCOUNT\_JSON=                          # path to JSON keyfile
AZURE\_STORAGE\_CONNECTION\_STRING=

# -----------------------

# Kaggle Integration

# -----------------------

KAGGLE\_USERNAME=
KAGGLE\_KEY=
KAGGLE\_COMPETITION=neurips-2025-ariel
KAGGLE\_SUBMISSION\_FILE=outputs/submission.csv
KAGGLE\_SUBMISSION\_MSG=SpectraMind V50 submission
RUNTIME\_MAX\_HOURS=9                                # Kaggle runtime envelope (hours)
KAGGLE\_DATASET=                                    # optional: owner/dataset-slug for artifacts
KAGGLE\_NOTEBOOK\_TITLE=SpectraMindV50-Inference     # optional: notebook title

# -----------------------

# Docker / BuildKit

# -----------------------

DOCKER\_IMAGE\_NAME=spectramindv50\:dev
DOCKER\_CONTAINER\_NAME=spectramindv50
DOCKER\_PORT=8888                                   # port for Jupyter/docs
DOCKER\_GPU=1                                       # 1 enables --gpus all when present
DOCKER\_BUILDKIT=1                                  # enable BuildKit
COMPOSE\_DOCKER\_CLI\_BUILD=1                         # use Docker CLI for compose builds
DOCKER\_BUILD\_ARGS=                                 # optional: KEY=VAL KEY2=VAL ...
NVIDIA\_VISIBLE\_DEVICES=all                         # or GPU UUIDs (inside container)
NVIDIA\_DRIVER\_CAPABILITIES=compute,utility

# Optional Podman parity (if you use Podman instead of Docker)

PODMAN=false

# -----------------------

# CLI / Diagnostics / Dashboard

# -----------------------

SPECTRAMIND\_CLI=spectramind
SELFTEST\_DEEP=false                                # run deep selftest (Hydra/DVC/GPU)
DIAGNOSTICS\_REPORT=outputs/diagnostics/report.html
DIAGNOSTICS\_JSON=outputs/diagnostics/diagnostic\_summary.json
ENABLE\_HTML\_DASHBOARD=true
DIAGNOSTICS\_HTML\_OPEN=false
DIAG\_ENABLE\_UMAP=true
DIAG\_ENABLE\_TSNE=true
DIAG\_ENABLE\_SHAP=true
DIAG\_ENABLE\_SYMBOLIC=true
SUBMISSION\_BUNDLE=outputs/submission\_bundle.zip

# Projection/plot defaults (can be overridden by CLI)

UMAP\_N\_NEIGHBORS=15
UMAP\_MIN\_DIST=0.05
TSNE\_PERPLEXITY=30
TSNE\_N\_COMPONENTS=2
SHAP\_TOPK\_BINS=32

# -----------------------

# API / FastAPI Dashboard (optional)

# -----------------------

API\_HOST=127.0.0.1
API\_PORT=8000
API\_CORS\_ORIGINS=                                  # comma-separated origins, e.g. [http://localhost:3000](http://localhost:3000)
API\_ENABLE\_AUTH=false
API\_REQUIRE\_SIGNED\_URLS=false

# -----------------------

# Security / Secrets (optional)

# -----------------------

SECRET\_KEY\_BASE=                                   # >=16 chars if set
JWT\_SECRET=                                        # >=16 chars if set
SERVICE\_ACCOUNT\_JSON=                              # path to service account file if needed
ALLOWED\_USERS=                                     # comma-separated emails/usernames
DISABLE\_TELEMETRY=true

# -----------------------

# Node / Mermaid (diagrams)

# -----------------------

NODE\_OPTIONS=                                      # e.g. --max\_old\_space\_size=4096
MERMAID\_CLI\_BIN=npx mmdc                           # override if pinned
MERMAID\_THEME=neutral

# -----------------------

# GUI Framework (optional)

# -----------------------

GUI\_FRAMEWORK=none                                 # qt | electron | react | none
GUI\_ASSETS\_DIR=assets
GUI\_OPEN\_BROWSER=false

# -----------------------

# Networking / Proxies (optional)

# -----------------------

HTTP\_PROXY=
HTTPS\_PROXY=
NO\_PROXY=localhost,127.0.0.1

# -----------------------

# CI toggles (optional)

# -----------------------

CI=false
CI\_FAST\_MODE=true                                  # skip heavy steps (e.g., large downloads)
CI\_SAVE\_ARTIFACTS=true
CI\_GPU\_SMOKE=false                                  # run small GPU smoke test if runner supports it

# -----------------------

# Jupyter / TensorBoard (optional)

# -----------------------

JUPYTER\_ENABLE=false
JUPYTER\_TOKEN=devtoken
JUPYTER\_PORT=8888
TENSORBOARD\_ENABLE=false
TENSORBOARD\_PORT=6006

# -----------------------

# Submission / Packaging

# -----------------------

SUBMIT\_AUTOVALIDATE=true
SUBMIT\_INCLUDE\_HTML=true
SUBMIT\_INCLUDE\_LOGS=true
PACKAGE\_INCLUDE\_SBOM=false                         # enable if you generate SBOMs via CI

# -----------------------

# Advanced (experts)

# -----------------------

OMP\_NUM\_THREADS=1
MKL\_NUM\_THREADS=1
TOKENIZERS\_PARALLELISM=false
PYTHONUNBUFFERED=1
PYTHONHASHSEED=0
DETERMINISTIC\_ALGO\_WARNINGS=false
