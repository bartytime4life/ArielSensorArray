[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "spectramindv50"
version = "0.1.0"
description = "NeurIPS 2025 Ariel Data Challenge â€” SpectraMind V50: neuro-symbolic, physics-informed exoplanet spectroscopy with a unified Typer CLI, Hydra configs, DVC, diagnostics, and CI."
readme = "README.md"
requires-python = ">=3.10,<3.13"
license = { text = "MIT" }
authors = [
  { name = "SpectraMind Team" },
  { name = "Andy Barta" }
]
keywords = [
  "exoplanet", "spectroscopy", "Ariel", "ESA",
  "uncertainty", "conformal", "COREL",
  "symbolic-ai", "physics-informed",
  "hydra", "cli", "dvc", "diagnostics", "umap", "tsne", "kaggle"
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Astronomy",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Typing :: Typed"
]

# ---- Core runtime ----
dependencies = [
  "typer[all]==0.12.3",
  "rich==13.7.1",
  "hydra-core==1.3.2",
  "omegaconf==2.3.0",
  "pyyaml==6.0.1",
  "pydantic==2.7.1",
  "packaging==24.1",
  "jinja2==3.1.4",
  "click==8.1.7",
  "python-dotenv==1.0.1",

  "numpy==1.26.4",
  "scipy==1.13.1",
  "pandas==2.2.2",
  "scikit-learn==1.4.2",

  "torch==2.2.2",
  "torchvision==0.17.2",
  "torchaudio==2.2.2",

  "networkx==3.2.1",
  'torch-geometric==2.5.3; platform_system != "Windows"',

  "matplotlib==3.8.4",
  "plotly==5.22.0",
  "umap-learn==0.5.6",
  "shap==0.45.0",

  "tqdm==4.66.4",
  "joblib==1.4.2",
  "psutil==5.9.8",

  "dvc==3.51.2",
  "mlflow==2.14.3",
  "wandb==0.17.6"
]

[project.optional-dependencies]
dev = [
  "pytest==8.2.0",
  "pytest-cov==5.0.0",
  "pytest-xdist==3.6.1",
  "ruff==0.6.9",
  "black==24.8.0",
  "isort==5.13.2",
  "pre-commit==3.7.1",
  "mypy==1.10.0",
  "coverage[toml]==7.6.1",
  "types-PyYAML==6.0.12.20240808",
  "types-requests==2.32.0.20240712"
]
viz = [
  "kaleido==0.2.1",
  "seaborn==0.13.2",
  "altair==5.4.1",
  "bokeh==3.4.3"
]
hf = [
  "transformers==4.41.2",
  "datasets==2.19.0",
  "accelerate==0.31.0",
  "tokenizers==0.15.2",
  "safetensors==0.4.3",
  "pyarrow==16.1.0"
]
hpo = ["optuna==3.6.1"]
lightning = ["lightning==2.3.3", "tensorboard==2.17.0"]
gcs = ["dvc[gdrive,gcs]==3.51.2"]
s3 = ["dvc[s3,boto3]==3.51.2"]
ssh = ["dvc[ssh]==3.51.2"]
azure = ["dvc[azure]==3.51.2"]
kaggle = ["kaggle==1.6.14"]

[project.scripts]
spectramind = "spectramind:app"

[project.urls]
Homepage = "https://github.com/bartytime4life/ArielSensorArray"
Repository = "https://github.com/bartytime4life/ArielSensorArray"
Issues = "https://github.com/bartytime4life/ArielSensorArray/issues"

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["spectramind*", "asa*"]
namespaces = false

[tool.setuptools.package-data]
spectramind = ["py.typed"]

# -------------------------
# Linting / Formatting
# -------------------------
[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "C4", "SIM"]
ignore = []
per-file-ignores = { "tests/**" = ["S101"], "notebooks/**" = ["E402","F401"] }

[tool.ruff.lint.isort]
profile = "black"
known-first-party = ["spectramind", "asa"]
src-paths = ["src", "tests"]

[tool.ruff.format]
quote-style = "preserve"
indent-style = "space"

[tool.black]
line-length = 100
target-version = ["py310"]
skip-string-normalization = true
exclude = '''
/(
  \.git
 | \.venv
 | venv
 | build
 | dist
 | data
 | outputs
 | logs
 | docs
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["spectramind", "asa"]
src_paths = ["src", "tests"]
skip = ["build", "dist", "data", "outputs", "logs", "docs", ".venv", "venv"]

# -------------------------
# Testing / Coverage / Mypy
# -------------------------
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra --maxfail=5 --strict-markers"
testpaths = ["tests"]
log_cli = true
log_cli_level = "INFO"
log_file = "logs/test.log"
log_file_level = "DEBUG"
log_format = "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["tests/*", "docs/*"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 75

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_ignores = true
ignore_missing_imports = true