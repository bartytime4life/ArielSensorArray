# ==============================================================================
# pyproject.toml â€” SpectraMind V50
# Neuro-symbolic, physics-informed AI for NeurIPS 2025 Ariel Data Challenge
# CLI-first, Hydra configs, DVC, diagnostics, CI/Kaggle safe
# ==============================================================================

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "spectramindv50"
version = "0.2.0"
description = "SpectraMind V50: Neuro-symbolic, physics-informed exoplanet spectroscopy with Typer CLI, Hydra configs, DVC, diagnostics, CI, and Kaggle-ready runtime."
readme = "README.md"
license = "MIT"
authors = ["SpectraMind Team", "Andy Barta"]
homepage = "https://github.com/bartytime4life/ArielSensorArray"
repository = "https://github.com/bartytime4life/ArielSensorArray"
documentation = "https://github.com/bartytime4life/ArielSensorArray"
keywords = [
  "exoplanet", "spectroscopy", "Ariel", "ESA",
  "uncertainty", "conformal", "COREL",
  "symbolic-ai", "physics-informed",
  "hydra", "cli", "dvc", "diagnostics", "umap", "tsne", "kaggle"
]

packages = [
  { include = "spectramind", from = "src" },
  { include = "asa", from = "src" }
]

[tool.poetry.scripts]
spectramind = "spectramind:app"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"

# ---- Core runtime ----
typer = { version = "0.12.3", extras = ["all"] }
rich = "13.7.1"
hydra-core = "1.3.2"
omegaconf = "2.3.0"
pyyaml = "6.0.1"
pydantic = "2.7.1"
packaging = "24.1"
jinja2 = "3.1.4"
click = "8.1.7"
python-dotenv = "1.0.1"

numpy = "1.26.4"
scipy = "1.13.1"
pandas = "2.2.2"
scikit-learn = "1.4.2"

# Deep learning
torch = "2.2.2"
torchvision = "0.17.2"
torchaudio = "2.2.2"

# Graph/SSM stack
networkx = "3.3"
torch-geometric = { version = "2.5.3", markers = "platform_system != 'Windows'" }

# Viz / Diagnostics
matplotlib = "3.8.4"
plotly = "5.22.0"
umap-learn = "0.5.6"
shap = "0.45.0"

tqdm = "4.66.4"
joblib = "1.4.2"
psutil = "5.9.8"

# MLOps
dvc = "3.51.2"
mlflow = "2.14.3"
wandb = "0.17.6"

# ==============================================================================
# Dependency Groups
# ==============================================================================

[tool.poetry.group.dev.dependencies]
pytest = "8.3.2"
pytest-cov = "5.0.0"
pytest-xdist = "3.6.1"
ruff = "0.6.9"
black = "24.8.0"
isort = "5.13.2"
pre-commit = "4.0.1"
mypy = "1.11.1"
coverage = { version = "7.6.1", extras = ["toml"] }
types-PyYAML = "6.0.12.20240808"
types-requests = "2.32.0.20240712"
nbstripout = "0.7.1"
yamllint = "1.35.1"
markdownlint-cli2 = "0.14.0"

[tool.poetry.group.viz.dependencies]
kaleido = "0.2.1"
seaborn = "0.13.2"
altair = "5.3.0"
bokeh = "3.5.1"

[tool.poetry.group.hf.dependencies]
transformers = "4.41.2"
datasets = "2.19.0"
accelerate = "0.31.0"
tokenizers = "0.15.2"
safetensors = "0.4.3"
pyarrow = "16.1.0"

[tool.poetry.group.hpo.dependencies]
optuna = "3.6.1"

[tool.poetry.group.lightning.dependencies]
lightning = "2.3.3"
tensorboard = "2.17.0"

[tool.poetry.group.symbolic.dependencies]
sympy = "1.13.2"
z3-solver = "4.13.0.0"
pyomo = "6.8.0"

[tool.poetry.group.astro.dependencies]
astropy = "6.1.2"
astroquery = "0.4.7"
lightkurve = "2.5.0"
exoplanet = "0.5.4"
celerite2 = "0.2.4"
corner = "2.2.2"

[tool.poetry.group.web.dependencies]
fastapi = "0.115.0"
uvicorn = "0.30.1"
flask = "3.0.3"
streamlit = "1.37.1"
gradio = "4.39.0"
dash = "2.17.0"
dash-bootstrap-components = "1.6.0"

[tool.poetry.group.gcs.dependencies]
dvc = { version = "3.51.2", extras = ["gdrive", "gcs"] }

[tool.poetry.group.s3.dependencies]
dvc = { version = "3.51.2", extras = ["s3", "boto3"] }

[tool.poetry.group.ssh.dependencies]
dvc = { version = "3.51.2", extras = ["ssh"] }

[tool.poetry.group.azure.dependencies]
dvc = { version = "3.51.2", extras = ["azure"] }

[tool.poetry.group.kaggle.dependencies]
kaggle = "1.6.14"

# ==============================================================================
# Tooling Configs
# ==============================================================================

[tool.ruff]
line-length = 88
target-version = "py310"
src = ["src", "tests"]

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "C4", "SIM"]
ignore = []
per-file-ignores = { "tests/**" = ["S101"], "notebooks/**" = ["E402","F401"] }

[tool.ruff.lint.isort]
profile = "black"
known-first-party = ["spectramind", "asa"]

[tool.ruff.format]
quote-style = "preserve"
indent-style = "space"

[tool.black]
line-length = 88
target-version = ["py310"]
skip-string-normalization = true
exclude = '''
/(
  \.git
 | \.venv
 | venv
 | build
 | dist
 | data
 | outputs
 | logs
 | docs
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["spectramind", "asa"]
src_paths = ["src", "tests"]
skip = ["build", "dist", "data", "outputs", "logs", "docs", ".venv", "venv"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra --maxfail=5 --strict-markers"
testpaths = ["tests"]
log_cli = true
log_cli_level = "INFO"
log_file = "logs/test.log"
log_file_level = "DEBUG"
log_format = "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["tests/*", "docs/*"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 80

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_ignores = true
ignore_missing_imports = true
pretty = true

# ==============================================================================
# Notes
# ==============================================================================
# Install runtime only:
#   poetry install --no-root
#
# Install with groups:
#   poetry install --with dev
#   poetry install --with dev,viz,hf,astro,symbolic
#   poetry install --with kaggle
#
# Production install (minimal):
#   poetry install --without dev,viz,hf,hpo,lightning,astro,symbolic,web,kaggle