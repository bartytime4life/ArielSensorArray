[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "arielsensorarray"
version = "0.1.0"
description = "NeurIPS 2025 Ariel Data Challenge â€” ArielSensorArray (CLI, Hydra, CI, DVC, pre-commit)"
authors = ["SpectraMind <devnull@example.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "asa", from = "src" }]
homepage = "https://github.com/bartytime4life/SpectraMindV50"
repository = "https://github.com/bartytime4life/SpectraMindV50"
documentation = "https://bartytime4life.github.io/SpectraMindV50"
keywords = ["exoplanet", "spectroscopy", "ariel", "neurips", "cli", "hydra", "diagnostics", "symbolic-ai"]
classifiers = [
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering :: Astronomy",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.11"
hydra-core = "^1.3.2"
typer = "^0.12.3"
pydantic = "^2.7.0"
jinja2 = "^3.1.2"
psutil = "^5.9.8"
pyyaml = "^6.0.2"
dvc = "^3.51.3"
rich = "^13.7.1"
omegaconf = "^2.3.0"

# Optional/extra (install with: poetry install -E tracking -E viz)
mlflow = { version = "^2.14.0", optional = true }
wandb  = { version = "^0.17.0", optional = true }
plotly = { version = "^5.23.0", optional = true }

[tool.poetry.extras]
tracking = ["mlflow", "wandb"]
viz = ["plotly"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
pytest-cov = "^5.0.0"
ruff = "^0.6.9"
black = "^24.8.0"
isort = "^5.13.2"
mypy = "^1.11.2"
types-PyYAML = "*"
pre-commit = "^3.8.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.39"
pymdown-extensions = "^10.9"

[tool.poetry.scripts]
asa = "asa.cli:app"
spectramind = "asa.cli:app"

[tool.black]
line-length = 100
target-version = ["py311"]
skip-string-normalization = true

[tool.isort]
profile = "black"
multi_line_output = 3
src_paths = ["src"]
force_sort_within_sections = true
combine_as_imports = true

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "SIM"]
ignore = ["E203", "E501"]
preview = false

[tool.ruff.format]
quote-style = "preserve"
docstring-code-format = true

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra --maxfail=5 --strict-markers --color=yes --cov=asa --cov-report=term-missing"
testpaths = ["tests"]
xfail_strict = true
log_cli = true
log_cli_level = "INFO"
filterwarnings = [
  "ignore::DeprecationWarning",
]

[tool.coverage.run]
branch = true
source = ["src/asa"]

[tool.coverage.report]
show_missing = true
skip_covered = true
precision = 2
exclude_lines = [
  "pragma: no cover",
  "if __name__ == \"__main__\":",
]