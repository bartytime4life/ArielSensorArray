[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

# ==============================================================================
# SpectraMind V50 — pyproject.toml (Upgraded, Challenge-Grade)
# Neuro-symbolic, physics-informed AI for NeurIPS 2025 Ariel Data Challenge
# - CLI-first (Typer), Hydra configs, DVC, diagnostics, CI/Kaggle-safe
# - Conservative, Kaggle-compatible pins; optional groups for heavy features
# - Dev tooling: ruff/black/isort/mypy/pytest/coverage; nbqa for notebooks
# - Docs site via MkDocs; extras & URLs; strict test/typing configuration
# ==============================================================================

[tool.poetry]
name = "spectramindv50"
version = "0.3.3"  # bump: stricter lint set, security tooling, filename templating, CI tune-ups
description = "SpectraMind V50: Neuro-symbolic, physics-informed exoplanet spectroscopy with Typer CLI, Hydra configs, DVC, diagnostics, CI, and Kaggle-ready runtime."
readme = "README.md"
license = "Apache-2.0"
authors = [
  "SpectraMind Team <team@spectramind.ai>",
  "Andy Barta <andrew.barta@example.com>",
]
homepage = "https://github.com/bartytime4life/SpectraMindV50"
repository = "https://github.com/bartytime4life/SpectraMindV50"
documentation = "https://github.com/bartytime4life/SpectraMindV50"
keywords = [
  "exoplanet", "spectroscopy", "Ariel", "ESA",
  "uncertainty", "conformal", "COREL",
  "symbolic-ai", "physics-informed",
  "hydra", "cli", "dvc", "diagnostics", "umap", "tsne", "kaggle"
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Astronomy",
  "Operating System :: POSIX :: Linux",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/bartytime4life/SpectraMindV50/issues"
"Discussions" = "https://github.com/bartytime4life/SpectraMindV50/discussions"
"Changelog" = "https://github.com/bartytime4life/SpectraMindV50/blob/main/CHANGELOG.md"

# Package layout — ship src/ tree; avoid accidental top-level imports
packages = [
  { include = "spectramind", from = "src" },
  { include = "asa",         from = "src" }
]

# Entrypoints: primary CLI is `spectramind`
[tool.poetry.scripts]
spectramind = "spectramind:app"
smind = "spectramind:app"  # convenience alias

[tool.poetry.dependencies]
# Python runtime policy (Kaggle/CI-safe; keep <3.13 for torch/geometric ecosystem)
python = ">=3.10,<3.13"

# Core runtime
typer = { version = "0.12.3" }
rich = "13.7.1"
hydra-core = "1.3.2"
omegaconf = "2.3.0"
pyyaml = "6.0.2"
pydantic = "2.8.2"
packaging = "24.1"
jinja2 = "3.1.4"
click = "8.1.7"
python-dotenv = "1.0.1"
typing-extensions = "4.12.2"

numpy = "1.26.4"
scipy = "1.13.1"
pandas = "2.2.2"
scikit-learn = "1.4.2"
threadpoolctl = "3.5.0"
tqdm = "4.66.4"
joblib = "1.4.2"
psutil = "5.9.8"

# Deep learning
torch = "2.2.2"
torchvision = "0.17.2"
torchaudio = "2.2.2"
torchmetrics = "1.4.0.post0"
einops = "0.8.0"
Pillow = "10.4.0"

# Graph/SSM stack
networkx = "3.2.1"
torch-geometric = { version = "2.5.3", markers = "platform_system != 'Windows'" }

# Viz / Diagnostics
matplotlib = "3.8.4"
plotly = "5.22.0"
kaleido = "0.2.1"
umap-learn = "0.5.6"
shap = "0.45.0"
seaborn = "0.13.2"

# JSON speedups (optional)
orjson = { version = "3.10.7", optional = true }

# MLOps
dvc = "3.51.2"
mlflow = "2.14.3"
wandb = "0.17.6"

# ==============================================================================
# Dependency Groups (optional feature sets)
# ==============================================================================

[tool.poetry.group.dev.dependencies]
pytest = "8.3.2"
pytest-cov = "5.0.0"
pytest-xdist = "3.6.1"
ruff = "0.6.9"
black = "24.8.0"
isort = "5.13.2"
pre-commit = "3.8.0"
mypy = "1.11.2"
coverage = { version = "7.6.1", extras = ["toml"] }
types-PyYAML = "6.0.12.20240808"
types-requests = "2.32.0.20240712"
nbqa = "1.9.1"
nbstripout = "0.7.1"
yamllint = "1.35.1"
bandit = "1.7.9"
codespell = "2.3.0"

[tool.poetry.group.viz.dependencies]
altair = "5.3.0"
bokeh = "3.4.3"

[tool.poetry.group.docs.dependencies]
mkdocs = "1.6.1"
mkdocs-material = "9.5.30"
mkdocs-awesome-pages-plugin = "2.9.3"
mkdocs-git-revision-date-localized-plugin = "1.2.4"
mkdocs-section-index = "0.3.9"
mkdocs-glightbox = "0.4.0"
mkdocs-mermaid2-plugin = "1.1.1"
mkdocs-minify-plugin = "0.7.2"
mkdocs-redirects = "1.2.1"
mkdocs-include-markdown-plugin = "6.2.2"

[tool.poetry.group.hf.dependencies]
transformers = "4.41.2"
datasets = "2.19.0"
accelerate = "0.31.0"
tokenizers = "0.15.2"
safetensors = "0.4.3"
pyarrow = "17.0.0"
bitsandbytes = { version = "0.43.1", markers = "platform_system == 'Linux'" }

[tool.poetry.group.hpo.dependencies]
optuna = "3.6.1"
optuna-dashboard = "0.14.0"

[tool.poetry.group.lightning.dependencies]
lightning = "2.3.3"
tensorboard = "2.17.0"

[tool.poetry.group.symbolic.dependencies]
sympy = "1.13.2"
z3-solver = "4.13.0.0"
pyomo = "6.8.0"

[tool.poetry.group.astro.dependencies]
astropy = "6.1.2"
astroquery = "0.4.7"
lightkurve = "2.5.0"
exoplanet = "0.5.4"
celerite2 = "0.2.4"
corner = "2.2.2"

[tool.poetry.group.web.dependencies]
fastapi = "0.112.2"
uvicorn = "0.30.5"
flask = "3.0.3"
streamlit = "1.37.1"
gradio = "4.39.0"
dash = "2.17.0"
dash-bootstrap-components = "1.6.0"

[tool.poetry.group.gcs.dependencies]
dvc = { version = "3.51.2", extras = ["gdrive", "gcs"] }

[tool.poetry.group.s3.dependencies]
dvc = { version = "3.51.2", extras = ["s3", "boto3"] }

[tool.poetry.group.ssh.dependencies]
dvc = { version = "3.51.2", extras = ["ssh"] }

[tool.poetry.group.azure.dependencies]
dvc = { version = "3.51.2", extras = ["azure"] }

[tool.poetry.group.kaggle.dependencies]
kaggle = "1.6.17"

# ==============================================================================
# Optional features as installable "extras"
#   pip install .[viz,hf,astro,symbolic,web,kaggle,orjson]
# ==============================================================================
[tool.poetry.extras]
viz = ["altair", "bokeh"]
hf = ["transformers", "datasets", "accelerate", "tokenizers", "safetensors", "pyarrow", "bitsandbytes"]
astro = ["astropy", "astroquery", "lightkurve", "exoplanet", "celerite2", "corner"]
symbolic = ["sympy", "z3-solver", "pyomo"]
web = ["fastapi", "uvicorn", "flask", "streamlit", "gradio", "dash", "dash-bootstrap-components"]
kaggle = ["kaggle"]
orjson = ["orjson"]

# ==============================================================================
# Tooling Configs (line-length unified at 88 to match .editorconfig & pre-commit)
# ==============================================================================

[tool.ruff]
line-length = 88
target-version = "py310"
src = ["src", "tests"]
extend-exclude = ["data", "outputs", "logs", "docs", "notebooks"]

[tool.ruff.lint]
# Broader, production-ready rule-set: enables security, complexity, and best-practice checks.
select = [
  "E", "F", "I", "UP", "B", "C4", "SIM", "D", "N", "S", "ARG", "PL", "TRY", "RET", "ERA"
]
ignore = [
  "D100","D101","D102","D103","D104","D105","D107",
]
per-file-ignores = {
  "tests/**" = ["S101","D"],
  "notebooks/**" = ["E402","F401","D"]
}

[tool.ruff.lint.isort]
profile = "black"
known-first-party = ["spectramind", "asa"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "preserve"
indent-style = "space"
docstring-code-format = true

[tool.black]
line-length = 88
target-version = ["py310"]
skip-string-normalization = true
exclude = '''
/(
  \.git
 | \.venv
 | venv
 | build
 | dist
 | data
 | outputs
 | logs
 | docs
 | notebooks/.ipynb_checkpoints
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["spectramind", "asa"]
src_paths = ["src", "tests"]
skip = ["build","dist","data","outputs","logs","docs",".venv","venv"]

[tool.nbqa.config]
exclude = "notebooks/.ipynb_checkpoints|data|outputs|logs"
addopts = ["--nbqa-mutate"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra --maxfail=5 --strict-markers"
testpaths = ["tests"]
markers = [
  "slow: may take several minutes",
  "gpu: requires CUDA-capable GPU",
  "integration: covers multiple subsystems"
]
log_cli = true
log_cli_level = "INFO"
log_file = "logs/test.log"
log_file_level = "DEBUG"
log_format = "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
  "ignore::DeprecationWarning:tensorboard.*",
  "ignore::DeprecationWarning:torchmetrics.*",
  "ignore::DeprecationWarning:matplotlib.*",
]

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["tests/*","docs/*","**/__init__.py"]
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 80
precision = 2

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.paths]
source = [
  "src",
  "*/site-packages/spectramind"
]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_ignores = true
ignore_missing_imports = true
pretty = true
plugins = ["pydantic.mypy"]

[tool.bandit]
skips = ["B101"]  # allow assert in tests; security checks run via pre-commit
exclude = ["tests", "docs", "notebooks"]

# ==============================================================================
# Poetry build tweaks
# ==============================================================================
[tool.poetry.build]
generate-setup-file = false

[tool.poetry.include]
files = [
  { path = "LICENSE" },
  { path = "README.md" },
  { path = "configs", format = "sdist" },
  { path = "assets",  format = "sdist" }
]

[tool.poetry.exclude]
paths = [
  "data",
  "outputs",
  "logs",
  "docs/site",
  ".github",
  ".devcontainer",
  ".vscode",
  "**/__pycache__",
]
