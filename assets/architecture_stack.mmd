
%% --------------------------------------------------------------------
%% SpectraMind V50 — Architecture Stack (Mermaid)
%% Layered view of the system from interfaces → configs → data/versioning
%% → modeling → calibration/UQ → diagnostics → packaging/CI → runtime.
%% --------------------------------------------------------------------

flowchart TB
  %% Layout top→bottom
  %% Each subgraph = one architecture layer.
  %% Edges show primary flow of control/artifacts.

  %% =========================
  %% L0 — Entry Points (UX)
  %% =========================
  subgraph L0[Layer 0 • Entry Points (UX)]
    direction TB
    L0a[Typer CLI\nspectramind ...]:::cli
    L0b[“UI‑light” Console\n(Rich progress, tables)]:::cli
    L0c[Optional GUI hooks\n(HTML dashboard / Jupyter)]:::gui
  end

  %% =========================
  %% L1 — Configuration & Orchestration
  %% =========================
  subgraph L1[Layer 1 • Configuration & Orchestration]
    direction TB
    L1a[Hydra Configs\ndefaults + overrides\nconfigs/**.yaml]:::cfg
    L1b[Makefile Targets\n(e2e, diagnose, submit)]:::cfg
    L1c[Poetry Env + Docker Image\n(pyproject.toml / Dockerfile)]:::env
  end

  %% =========================
  %% L2 — Data & Versioning
  %% =========================
  subgraph L2[Layer 2 • Data & Versioning]
    direction TB
    L2a[DVC Pipelines (dvc.yaml)\nStages: calibrate → train → eval]:::dvc
    L2b[DVC Remotes\n(models, datasets, artifacts)]:::dvc
    L2c[Git (code, configs, docs)\ncommit hashes ↔ runs]:::git
  end

  %% =========================
  %% L3 — Calibration & Feature Build
  %% =========================
  subgraph L3[Layer 3 • Calibration & Feature Build]
    direction TB
    L3a[Frame Calibrations\nBias/Dark/Flat/CDS]:::op
    L3b[Trace Extraction / Photometry]:::op
    L3c[Background / Jitter Correction]:::op
    L3d[Normalization / Phase Align]:::op
    L3e[(Calibrated Light Curves)]:::data
  end

  %% =========================
  %% L4 — Modeling (Encoders, Fusion, Decoders)
  %% =========================
  subgraph L4[Layer 4 • Modeling]
    direction TB
    L4a[FGS1 Encoder\nMamba SSM (long seq)]:::model
    L4b[AIRS Encoder\nGraph NN (λ‑graph)]:::model
    L4c[Latent Fusion]:::model
    L4d[μ Decoder (mean spectrum)]:::model
    L4e[σ Decoder (uncertainty)]:::model
    L4f[(Predicted μ, σ)]:::data
  end

  %% =========================
  %% L5 — Uncertainty Calibration
  %% =========================
  subgraph L5[Layer 5 • Uncertainty Calibration]
    direction TB
    L5a[Temperature Scaling]:::calib
    L5b[COREL Conformal\n(binwise coverage via GNN)]:::calib
    L5c[(Calibrated μ, σ)]:::data
  end

  %% =========================
  %% L6 — Diagnostics & Explainability
  %% =========================
  subgraph L6[Layer 6 • Diagnostics & Explainability]
    direction TB
    L6a[Metrics\nGLL / RMSE / MAE]:::metric
    L6b[Spectral FFT / Smoothness / Asymmetry]:::metric
    L6c[SHAP / Attention Traces]:::xai
    L6d[Symbolic Logic Engine\n(rules, violations)]:::symbolic
    L6e[Latent Projections\nUMAP / t‑SNE]:::viz
    L6f[HTML Report & Dashboard\n(report.html / diagnostics_dashboard.html)]:::viz
    L6g[(diagnostic_summary.json)]:::data
  end

  %% =========================
  %% L7 — Packaging & Submission
  %% =========================
  subgraph L7[Layer 7 • Packaging & Submission]
    direction TB
    L7a[Submission Validator\n(shape, bins, coverage)]:::op
    L7b[Bundle CSV/ZIP + Reports]:::op
    L7c[(Kaggle Submission Artifact)]:::io
  end

  %% =========================
  %% L8 — Observability & CI
  %% =========================
  subgraph L8[Layer 8 • Observability & CI]
    direction TB
    L8a[Structured Telemetry\nevents.jsonl]:::log
    L8b[Audit Log\nlogs/v50_debug_log.md]:::log
    L8c[GitHub Actions CI\n(unit tests, selftest, mermaid export)]:::ci
    L8d[Artifacts Registry\n(models, plots, HTML)]:::dvc
  end

  %% =========================
  %% L9 — Runtime & Integrations
  %% =========================
  subgraph L9[Layer 9 • Runtime & Integrations]
    direction TB
    L9a[CUDA / cuDNN\nGPU runtime]:::env
    L9b[Kaggle Runtime\nGPU/TPU notebooks]:::env
    L9c[Hugging Face (optional)\nTransformers/PEFT/Accelerate]:::ext
    L9d[Ollama (optional)\nlocal LLM explainers]:::ext
  end

  %% ---------- Wiring ----------
  %% UX → Orchestration
  L0a --> L1a
  L0a --> L1b
  L0a --> L1c
  L0b -. console UX .-> L0a
  L0c -. post‑run view .-> L6f

  %% Orchestration → Data/Versioning
  L1a --> L2a
  L1b --> L2a
  L1c --> L2c

  %% Data/Versioning → Calibration
  L2a --> L3a
  L2b -. pull/push .-> L3e
  L2c -. code+cfg hash .-> L3e

  %% Calibration → Modeling
  L3e --> L4a
  L3e --> L4b
  L4a --> L4c
  L4b --> L4c
  L4c --> L4d
  L4c --> L4e
  L4d --> L4f
  L4e --> L4f

  %% Modeling → UQ
  L4f --> L5a --> L5b --> L5c

  %% UQ → Diagnostics & Submission
  L5c --> L6a
  L5c --> L7a
  L6a --> L6b --> L6c --> L6d --> L6e --> L6f --> L6g
  L7a --> L7b --> L7c

  %% Observability links
  L0a --> L8b
  L1a --> L8b
  L2a --> L8a
  L3e --> L8a
  L4f --> L8a
  L5c --> L8a
  L6g --> L8d
  L6f --> L8d
  L7b --> L8d
  L8c -. runs .-> L0a
  L8c -. exports .-> L6f

  %% Runtime/Integrations consumption
  L9a -. GPU .-> L4a
  L9a -. GPU .-> L4b
  L9b -. kaggle env .-> L0a
  L9c -. pretrained/PEFT .-> L4
  L9d -. local LLM assist .-> L6c

  %% ---------- Classes ----------
  classDef cli fill:#e0e0e0,stroke:#455a64,stroke-width:1px,color:#263238;
  classDef gui fill:#f0f7ff,stroke:#4aa3ff,stroke-width:1px,color:#0b3d91;
  classDef cfg fill:#f1f8e9,stroke:#7cb342,stroke-width:1px,color:#33691e;
  classDef env fill:#faf0ff,stroke:#9c27b0,stroke-width:1px,color:#4a148c;
  classDef dvc fill:#f5f5f5,stroke:#616161,stroke-width:1px,color:#212121;
  classDef git fill:#fff8e1,stroke:#ffb300,stroke-width:1px,color:#6d4c00;
  classDef op fill:#e8f5e9,stroke:#43a047,stroke-width:1px,color:#1b5e20;
  classDef data fill:#f3f3f3,stroke:#9e9e9e,stroke-width:1px,color:#333;
  classDef model fill:#ede7f6,stroke:#7e57c2,stroke-width:1px,color:#4527a0;
  classDef calib fill:#ffebee,stroke:#e53935,stroke-width:1px,color:#b71c1c;
  classDef metric fill:#e3f2fd,stroke:#1e88e5,stroke-width:1px,color:#0d47a1;
  classDef xai fill:#fff3e0,stroke:#fb8c00,stroke-width:1px,color:#e65100;
  classDef symbolic fill:#fce4ec,stroke:#d81b60,stroke-width:1px,color:#880e4f;
  classDef viz fill:#e0f7fa,stroke:#00acc1,stroke-width:1px,color:#006064;
  classDef io fill:#eef7ff,stroke:#5b9bd5,stroke-width:1px,color:#0b305b;
  classDef log fill:#fffde7,stroke:#fdd835,stroke-width:1px,color:#8d6e00;
  classDef ci fill:#edeff7,stroke:#5c6bc0,stroke-width:1px,color:#283593;
  classDef ext fill:#f7f7fb,stroke:#8e8e9d,stroke-width:1px,color:#424255;