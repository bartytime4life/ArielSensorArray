# SpectraMind V50 — Diagrams Wiring Bundle
# Purpose: render Mermaid `.mmd` → `.svg` + `.png`, wire into Makefile + CI.
# Drop these files at the indicated paths in your repo.

================================================================================
BEGIN FILE: assets/diagrams/.mermaidrc.json
================================================================================
{
  "$schema": "https://mermaid.js.org/config/schema.json",
  "theme": "neutral",
  "startOnLoad": false,
  "securityLevel": "strict",
  "arrowMarkerAbsolute": true,
  "deterministicIds": true,
  "deterministicIDSeed": "spectramind-v50",
  "logLevel": "error",
  "wrap": true,
  "fontFamily": "Inter, Roboto, Segoe UI, Helvetica Neue, Arial, ui-sans-serif, system-ui, sans-serif",
  "themeCSS": ".edgeLabel{padding:2px 6px;border-radius:6px}.node rect,.node circle,.node ellipse{shape-rendering:geometricPrecision}.cluster rect{rx:12px;ry:12px}.mermaid svg{max-width:100%;height:auto}.mermaid .messageText{font-variant-ligatures:none}",
  "themeVariables": {
    "background": "transparent",
    "primaryColor": "#38bdf8",
    "primaryTextColor": "#f8fafc",
    "primaryBorderColor": "#0ea5e9",
    "secondaryColor": "#22d3ee",
    "secondaryTextColor": "#e2e8f0",
    "secondaryBorderColor": "#0891b2",
    "tertiaryColor": "#a78bfa",
    "tertiaryTextColor": "#111827",
    "tertiaryBorderColor": "#6d28d9"
  }
}

================================================================================
BEGIN FILE: assets/diagrams/.gitignore
================================================================================
# Rendered outputs
outputs/
*.svg
*.png

# Local preview artifacts
*.html

================================================================================
BEGIN FILE: assets/diagrams/README.md
================================================================================
# Diagrams (Mermaid)

Canonical sources live here as `.mmd`. Outputs are auto-rendered to `outputs/`:

```
assets/diagrams/
  architecture_stack.mmd   # source (already provided)
  .mermaidrc.json          # rendering config
  outputs/
    architecture_stack.svg # generated (CI/Make)
    architecture_stack.png # generated (CI/Make)
```

## Quick start

Render everything locally (requires Node 20+):

```bash
npm ci
npm run diag:render
```

Or via Makefile:

```bash
make diagrams
```

Outputs land under `assets/diagrams/outputs/`.

## Conventions
- `.mmd` is the single source of truth (committed).
- `.svg` and `.png` are derived artifacts (ignored locally, built in CI, uploaded as artifacts; optionally committed by CI on `main`).
- Style is controlled by `.mermaidrc.json`.

================================================================================
BEGIN FILE: bin/render-diagrams.sh
================================================================================
#!/usr/bin/env bash
set -Eeuo pipefail

# Render all Mermaid diagrams under assets/diagrams → outputs (svg + png)
# Usage: bin/render-diagrams.sh [DIAG_DIR]

DIAG_DIR=${1:-assets/diagrams}
CFG="$DIAG_DIR/.mermaidrc.json"
OUT_DIR="$DIAG_DIR/outputs"

if [[ ! -f "$CFG" ]]; then
  echo "[render-diagrams] Missing config: $CFG" >&2
  exit 1
fi

mkdir -p "$OUT_DIR"

# Find all .mmd files (excluding outputs dir)
mapfile -t FILES < <(find "$DIAG_DIR" -type f -name '*.mmd' -not -path "*/outputs/*" | sort)

if [[ ${#FILES[@]} -eq 0 ]]; then
  echo "[render-diagrams] No .mmd files found under $DIAG_DIR" >&2
  exit 0
fi

# Use local devDependency first; fallback to npx with pinned version
MMDCCMD="node_modules/.bin/mmdc"
if [[ ! -x "$MMDCCMD" ]]; then
  MMDCCMD="npx -y @mermaid-js/mermaid-cli@10.9.1 mmdc"
fi

for f in "${FILES[@]}"; do
  rel=${f#"$DIAG_DIR/"}
  base=${rel%.mmd}
  out_svg="$OUT_DIR/${base}.svg"
  out_png="$OUT_DIR/${base}.png"
  mkdir -p "$(dirname "$out_svg")"

  echo "[render-diagrams] SVG  <- $rel"
  $MMDCCMD -i "$f" -o "$out_svg" -b transparent -t neutral -c "$CFG" >/dev/null

  echo "[render-diagrams] PNG  <- $rel"
  $MMDCCMD -i "$f" -o "$out_png" -b transparent -t neutral -c "$CFG" -s 2 >/dev/null

done

echo "[render-diagrams] Done → $OUT_DIR"

================================================================================
BEGIN FILE: mk/diagrams.mk
================================================================================
# Mermaid diagrams Makefile fragment
# Include from root Makefile: `include mk/diagrams.mk`

DIAG_DIR       ?= assets/diagrams
DIAG_OUT       ?= $(DIAG_DIR)/outputs
NODE_BIN       ?= node
NPM_BIN        ?= npm
MERMAID_BIN    ?= node_modules/.bin/mmdc

.PHONY: diagrams diagrams-clean diagrams-open

diagrams:
	@echo "[Make] Rendering Mermaid diagrams…"
	@$(NPM_BIN) ci
	@bash bin/render-diagrams.sh $(DIAG_DIR)
	@echo "[Make] Render complete → $(DIAG_OUT)"

diagrams-clean:
	@echo "[Make] Cleaning diagram outputs…"
	@rm -rf $(DIAG_OUT)

# Attempt to open a common artifact (best-effort)
diagrams-open:
	@if command -v xdg-open >/dev/null 2>&1; then xdg-open $(DIAG_OUT)/architecture_stack.svg || true; \
	elif command -v open >/dev/null 2>&1; then open $(DIAG_OUT)/architecture_stack.svg || true; \
	else echo "Open $(DIAG_OUT)/architecture_stack.svg manually"; fi

================================================================================
BEGIN FILE: package.json
================================================================================
{
  "name": "spectramind-v50-diagrams",
  "private": true,
  "version": "0.1.0",
  "description": "Mermaid diagram rendering for SpectraMind V50.",
  "type": "module",
  "engines": {
    "node": ">=20.10",
    "npm": ">=10"
  },
  "scripts": {
    "diag:clean": "rimraf assets/diagrams/outputs && shx mkdir -p assets/diagrams/outputs",
    "diag:render": "bash bin/render-diagrams.sh assets/diagrams",
    "diag:version": "mmdc -V"
  },
  "devDependencies": {
    "@mermaid-js/mermaid-cli": "^10.9.1",
    "rimraf": "^5.0.7",
    "shx": "^0.3.4"
  }
}

================================================================================
BEGIN FILE: .github/workflows/mermaid-export.yml
================================================================================
name: diagrams

on:
  push:
    paths:
      - "assets/diagrams/**.mmd"
      - "assets/diagrams/.mermaidrc.json"
      - "bin/render-diagrams.sh"
      - "mk/diagrams.mk"
  pull_request:
    paths:
      - "assets/diagrams/**.mmd"
      - "assets/diagrams/.mermaidrc.json"
      - "bin/render-diagrams.sh"
      - "mk/diagrams.mk"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  render:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install OS deps (fonts for headless chromium)
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto fonts-noto-cjk fonts-noto-color-emoji

      - name: Install JS deps
        run: npm ci

      - name: Render Mermaid diagrams
        run: npm run diag:render

      - name: Upload rendered artifacts
        uses: actions/upload-artifact@v4
        with:
          name: diagrams-rendered
          path: assets/diagrams/outputs

      - name: Commit rendered outputs (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          if ! git diff --quiet -- assets/diagrams/outputs; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add assets/diagrams/outputs
            git commit -m "ci(diagrams): render Mermaid outputs"
            git push
          else
            echo "No output changes to commit."
          fi

================================================================================
BEGIN FILE: .gitignore.snippet    # (append these lines to your root .gitignore)
================================================================================
# Mermaid
assets/diagrams/outputs/

================================================================================
BEGIN FILE: NOTE.txt
================================================================================
- `assets/diagrams/architecture_stack.mmd` already exists (in canvas). Place it under your repo's `assets/diagrams/`.
- Run `npm ci && npm run diag:render` locally, or push to GitHub to trigger the workflow and collect artifacts.
- Include `include mk/diagrams.mk` in your root Makefile to get `make diagrams`.
