upgrade, # ==============================================================================

# SpectraMind V50 — GitHub Pages Deployment (with Mermaid pre-render, light ✦ dark)

# Builds MkDocs site and deploys to GitHub Pages.

# - Pre-build: render Mermaid from Markdown fences (export\_mermaid.py) and raw .mmd

# - Uses .mermaidrc.json (light) and .mermaidrc-dark.json (dark) with deterministic IDs

# - Caching: npm, Puppeteer, pip; optional SVG/PNG optimization

# - PRs: build & link-check only (no deploy), artifact site for preview

# - Main: build & deploy to Pages

# ==============================================================================

name: pages

on:
push:
branches: \[ "main" ]
paths:
\- "README.md"
\- "ARCHITECTURE.md"
\- "docs/**"
\- "diagrams/**"
\- "scripts/export\_mermaid.py"
\- ".mermaidrc\*"
\- "mkdocs.yml"
\- "requirements\*.txt"
\- "pyproject.toml"
\- "package\*.json"
\- ".github/workflows/pages.yml"
pull\_request:
branches: \[ "**" ]
paths:
\- "README.md"
\- "ARCHITECTURE.md"
\- "docs/**"
\- "diagrams/\*\*"
\- "scripts/export\_mermaid.py"
\- ".mermaidrc\*"
\- "mkdocs.yml"
\- "requirements\*.txt"
\- "pyproject.toml"
\- "package\*.json"
\- ".github/workflows/pages.yml"
workflow\_dispatch:
inputs:
formats:
description: "Mermaid output formats (space-separated: svg png pdf)"
required: false
default: "svg"
type: string
png\_scale:
description: "PNG scale factor for mmdc -s"
required: false
default: "2"
type: string
svgo\_optimize:
description: "Optimize SVGs with svgo"
required: false
default: "true"
type: choice
options: \["false", "true"]
png\_optimize:
description: "Compress PNGs with pngquant"
required: false
default: "true"
type: choice
options: \["false", "true"]

permissions:
contents: read
pages: write
id-token: write

concurrency:
group: pages-\${{ github.ref }}
cancel-in-progress: true

env:

# Keep these in sync with mermaid-export.yml where possible

MD\_FILES: "ARCHITECTURE.md README.md"
OUT\_DIR:  "docs/diagrams"
FORMATS:  \${{ inputs.formats || 'svg' }}
PNG\_SCALE: \${{ inputs.png\_scale || '2' }}
RC\_LIGHT: ".mermaidrc.json"
RC\_DARK:  ".mermaidrc-dark.json"
RAW\_GLOBS: "diagrams/**/\*.mmd docs/**/\*.mmd"
DO\_SVGO: \${{ inputs.svgo\_optimize || 'true' }}
DO\_PNGQ: \${{ inputs.png\_optimize || 'true' }}

jobs:
render-mermaid:
name: Render Mermaid (pre-build)
runs-on: ubuntu-latest
timeout-minutes: 25

```
steps:
  - name: Checkout
    uses: actions/checkout@v4
    with: { fetch-depth: 0 }

  - name: Ensure output directories
    run: |
      mkdir -p "${OUT_DIR}/light" "${OUT_DIR}/dark" "${OUT_DIR}/raw/light" "${OUT_DIR}/raw/dark"

  # ---------- Toolchains & caches ----------
  - name: Setup Node.js (20) with npm cache
    uses: actions/setup-node@v4
    with:
      node-version: "20"
      cache: "npm"

  - name: Setup Python (3.12) with pip cache
    uses: actions/setup-python@v5
    with:
      python-version: "3.12"
      cache: "pip"

  - name: Cache Mermaid CLI (Chromium/fonts) & npm
    uses: actions/cache@v4
    with:
      path: |
        ~/.cache/puppeteer
        ~/.npm
      key: mmdc-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
      restore-keys: |
        mmdc-${{ runner.os }}-

  # ---------- Install deps ----------
  - name: Install npm deps (with fallback)
    run: |
      if [ -f package.json ]; then
        npm ci
      else
        npm init -y
        npm i -D @mermaid-js/mermaid-cli@^10
      fi

  - name: Install Python deps (Markdown fence renderer optional)
    run: |
      python -m pip install --upgrade pip
      if [ -f "scripts/export_mermaid.py" ]; then
        python -m pip install markdown-it-py beautifulsoup4
      fi

  - name: Show tool versions
    run: |
      npx --yes @mermaid-js/mermaid-cli -V || true
      node --version
      npm --version
      python --version

  # ---------- Guard .mermaidrc presence (fallback-safe defaults) ----------
  - name: Ensure .mermaidrc defaults (if missing)
    run: |
      if [ ! -f "${RC_LIGHT}" ]; then
        cat > "${RC_LIGHT}" <<'JSON'
        {
          "theme": "base",
          "startOnLoad": false,
          "deterministicIds": true,
          "deterministicIDSeed": "spectramind-v50",
          "logLevel": "error",
          "securityLevel": "strict",
          "themeVariables": { "background": "transparent" }
        }
        JSON
      fi
      if [ ! -f "${RC_DARK}" ]; then
        cat > "${RC_DARK}" <<'JSON'
        {
          "theme": "dark",
          "startOnLoad": false,
          "deterministicIds": true,
          "deterministicIDSeed": "spectramind-v50",
          "logLevel": "error",
          "securityLevel": "strict",
          "themeVariables": { "background": "transparent" }
        }
        JSON
      fi

  # ---------- Render Mermaid from Markdown fences (if script present) ----------
  - name: Render Mermaid from Markdown (light)
    if: hashFiles('scripts/export_mermaid.py') != ''
    run: |
      echo ">>> Rendering Markdown fences (light): ${MD_FILES}"
      export MERMAID_RC="${RC_LIGHT}"
      export MERMAID_OUTDIR="${OUT_DIR}/light"
      export MERMAID_FORMATS="${FORMATS}"
      python scripts/export_mermaid.py ${MD_FILES}

  - name: Render Mermaid from Markdown (dark)
    if: hashFiles('scripts/export_mermaid.py') != ''
    run: |
      echo ">>> Rendering Markdown fences (dark): ${MD_FILES}"
      export MERMAID_RC="${RC_DARK}"
      export MERMAID_OUTDIR="${OUT_DIR}/dark"
      export MERMAID_FORMATS="${FORMATS}"
      python scripts/export_mermaid.py ${MD_FILES}

  # ---------- Find raw .mmd ----------
  - name: Find .mmd files
    id: findmmd
    shell: bash
    run: |
      shopt -s globstar nullglob
      files=()
      for g in $RAW_GLOBS; do
        for f in $g; do files+=("$f"); done
      done
      printf '%s\n' "${files[@]}" > mmd_list.txt
      echo "count=${#files[@]}" >> $GITHUB_OUTPUT

  # ---------- Render raw .mmd via mmdc ----------
  - name: Render .mmd (light + dark) to requested formats
    if: steps.findmmd.outputs.count != '0'
    shell: bash
    run: |
      set -euo pipefail
      while IFS= read -r f; do
        [ -z "$f" ] && continue
        base="$(basename "$f" .mmd)"
        # Light
        for fmt in ${FORMATS}; do
          case "$fmt" in
            svg)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_LIGHT}" -i "$f" -o "${OUT_DIR}/raw/light/${base}.light.svg"
              ;;
            png)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_LIGHT}" -i "$f" -o "${OUT_DIR}/raw/light/${base}.light.png" -s "${PNG_SCALE}"
              ;;
            pdf)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_LIGHT}" -i "$f" -o "${OUT_DIR}/raw/light/${base}.light.pdf"
              ;;
            *)
              echo "Unknown format: $fmt" >&2; exit 1;;
          esac
        done
        # Dark
        for fmt in ${FORMATS}; do
          case "$fmt" in
            svg)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_DARK}" -i "$f" -o "${OUT_DIR}/raw/dark/${base}.dark.svg"
              ;;
            png)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_DARK}" -i "$f" -o "${OUT_DIR}/raw/dark/${base}.dark.png" -s "${PNG_SCALE}"
              ;;
            pdf)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_DARK}" -i "$f" -o "${OUT_DIR}/raw/dark/${base}.dark.pdf"
              ;;
          esac
        done
      done < mmd_list.txt

  # ---------- Optimize (optional) ----------
  - name: Optimize SVGs (svgo)
    if: ${{ env.DO_SVGO == 'true' }}
    run: |
      npm i -D svgo@^3
      mapfile -t svgs < <(find "${OUT_DIR}" -type f -name '*.svg' -print)
      if ((${#svgs[@]})); then
        npx --yes svgo --config='{"multipass": true}' "${svgs[@]}" || true
      fi

  - name: Compress PNGs (pngquant)
    if: ${{ env.DO_PNGQ == 'true' }}
    run: |
      sudo apt-get update -y && sudo apt-get install -y pngquant
      find "${OUT_DIR}" -type f -name '*.png' -print0 | xargs -0 -I{} pngquant --force --skip-if-larger --ext .png {} || true

  - name: List rendered outputs
    run: |
      echo ">>> Rendered files in ${OUT_DIR}:"
      find "${OUT_DIR}" -type f \( -name '*.svg' -o -name '*.png' -o -name '*.pdf' \) -print || true

  - name: Upload diagrams (artifact)
    uses: actions/upload-artifact@v4
    with:
      name: mermaid-diagrams
      path: ${{ env.OUT_DIR }}
      if-no-files-found: warn
      retention-days: 14
```

build:
name: Build MkDocs site
runs-on: ubuntu-latest
needs: render-mermaid
timeout-minutes: 25

```
steps:
  - name: Checkout
    uses: actions/checkout@v4
    with: { fetch-depth: 0 }

  - name: Download diagrams artifact
    uses: actions/download-artifact@v4
    with:
      name: mermaid-diagrams
      path: docs/diagrams

  - name: Set up Python
    uses: actions/setup-python@v5
    with:
      python-version: "3.11"
      cache: "pip"

  - name: Install mkdocs + plugins + linkcheck
    run: |
      pip install --upgrade pip
      pip install \
        mkdocs \
        mkdocs-material \
        mkdocs-mermaid2-plugin \
        mkdocs-git-revision-date-localized-plugin \
        linkchecker

  - name: Build site (MkDocs)
    run: mkdocs build --strict --verbose --clean

  - name: Link check (soft-fail for external links)
    run: |
      set +e
      linkchecker --no-status site/ | tee linkcheck.txt
      echo "::notice::External link check completed (non-blocking)."
      exit 0

  - name: Upload site artifact (for Pages / PR preview)
    uses: actions/upload-pages-artifact@v3
    with:
      path: site
```

deploy:
name: Deploy to GitHub Pages
runs-on: ubuntu-latest
needs: build
if: github.event\_name == 'push' && github.ref == 'refs/heads/main'
environment:
name: github-pages
url: \${{ steps.deployment.outputs.page\_url }}
permissions:
pages: write
id-token: write
steps:
\- name: Deploy
id: deployment
uses: actions/deploy-pages\@v4
