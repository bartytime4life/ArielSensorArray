# .github/workflows/pages.yml
# ==============================================================================
# SpectraMind V50 — GitHub Pages Deployment (with Mermaid pre-render)
# Builds MkDocs site and deploys to GitHub Pages. Before build, renders
# Mermaid diagrams (SVG/PNG/PDF) from Markdown fences and .mmd files using
# the same knobs/logic as mermaid-export.yml.
# ==============================================================================

name: pages

on:
  push:
    branches: [ "main" ]
    paths:
      - "README.md"
      - "ARCHITECTURE.md"
      - "docs/**"
      - "diagrams/**"
      - "scripts/export_mermaid.py"
      - ".mermaidrc*"
      - ".github/workflows/pages.yml"
  pull_request:
    branches: [ "**" ]
    paths:
      - "README.md"
      - "ARCHITECTURE.md"
      - "docs/**"
      - "diagrams/**"
      - "scripts/export_mermaid.py"
      - ".mermaidrc*"
      - ".github/workflows/pages.yml"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  render-mermaid:
    name: Render Mermaid (pre-build)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      # Keep these in sync with mermaid-export.yml defaults:
      MD_FILES: "ARCHITECTURE.md README.md"
      OUT_DIR:  "docs/diagrams"
      FORMATS:  "svg"
      THEME:    ""
      PNG_SCALE: "2"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Ensure output dir
        run: mkdir -p "${OUT_DIR}"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Cache Mermaid CLI artifacts (Chromium/fonts)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/puppeteer
            ~/.npm
          key: mmdc-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            mmdc-${{ runner.os }}-

      - name: Install Mermaid deps
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            npm init -y
            npm i -D @mermaid-js/mermaid-cli@^10
          fi
          python -m pip install --upgrade pip
          if [ -f scripts/export_mermaid.py ]; then
            python -m pip install markdown-it-py beautifulsoup4
          fi

      - name: Render Mermaid from Markdown (export_mermaid.py)
        run: |
          if [ -f "scripts/export_mermaid.py" ]; then
            echo "FILES=${MD_FILES}"
            echo "OUT_DIR=${OUT_DIR}  THEME='${THEME}'  FORMATS='${FORMATS}'"
            export MERMAID_THEME="${THEME}"
            export MERMAID_FORMATS="${FORMATS}"
            export MERMAID_OUTDIR="${OUT_DIR}"
            python scripts/export_mermaid.py ${MD_FILES}
          else
            echo "scripts/export_mermaid.py not found — skipping Markdown rendering"
          fi

      - name: Find .mmd files
        id: findmmd
        shell: bash
        run: |
          mapfile -t MMD < <(git ls-files -- 'diagrams/**/*.mmd' 'docs/**/*.mmd' | tr -d '\r' || true)
          echo "count=${#MMD[@]}" >> $GITHUB_OUTPUT
          printf '%s\n' "${MMD[@]}" > mmd_list.txt || true
          echo "mmd_list=$(paste -sd ' ' mmd_list.txt)" >> $GITHUB_OUTPUT

      - name: Render .mmd → svg/png/pdf
        if: steps.findmmd.outputs.count != '0'
        shell: bash
        run: |
          set -euo pipefail
          echo ">>> Rendering raw .mmd files to: ${FORMATS}"
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            base="$(basename "$f" .mmd)"
            THEME_FLAG=""
            if [ -n "${THEME}" ]; then
              THEME_FLAG="--theme ${THEME}"
            fi
            for fmt in ${FORMATS}; do
              case "$fmt" in
                svg) npx --yes @mermaid-js/mermaid-cli -i "$f" -o "${OUT_DIR}/${base}.svg" ${THEME_FLAG} ;;
                png) npx --yes @mermaid-js/mermaid-cli -i "$f" -o "${OUT_DIR}/${base}.png" ${THEME_FLAG} -s "${PNG_SCALE}" ;;
                pdf) npx --yes @mermaid-js/mermaid-cli -i "$f" -o "${OUT_DIR}/${base}.pdf" ${THEME_FLAG} ;;
                *) echo "Unknown format: $fmt" >&2; exit 1 ;;
              esac
            done
          done < mmd_list.txt

      - name: List rendered outputs
        run: |
          echo ">>> Rendered files in ${OUT_DIR}:"
          find "${OUT_DIR}" -maxdepth 2 -type f \( -name '*.svg' -o -name '*.png' -o -name '*.pdf' \) -print || true

      - name: Upload diagrams (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: mermaid-diagrams
          path: ${{ env.OUT_DIR }}
          if-no-files-found: warn
          retention-days: 14

  build:
    name: Build MkDocs site
    runs-on: ubuntu-latest
    needs: render-mermaid
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Download diagrams artifact
        uses: actions/download-artifact@v4
        with:
          name: mermaid-diagrams
          path: docs/diagrams

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install mkdocs + plugins + linkchecker
        run: |
          pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin mkdocs-git-revision-date-localized-plugin linkchecker

      - name: Build site (MkDocs)
        run: mkdocs build --strict --verbose --clean

      - name: Link check
        run: linkchecker site/

      - name: Upload site artifact (for Pages)
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
