# ==============================================================================
# SpectraMind V50 — GitHub Actions CI (hardened, fast, reproducible)
# - Lint/type/test on a Python matrix (3.10, 3.11)
# - Deterministic build with Poetry cache & optional DVC pull
# - Core pipeline: make -f makefile.ci ci
# - Optional predict artifact, scheduled/dispatch ablation, guarded Kaggle submit
# - Concurrency + minimal permissions + timeouts
# ==============================================================================

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:
    inputs:
      run_ablation_on_push:
        description: "Run fast ablation (ablate-ci) for this manual run?"
        required: false
        default: "false"
        type: choice
        options: [ "false", "true" ]
      submit_to_kaggle:
        description: "Submit predictions to Kaggle for this manual run?"
        required: false
        default: "false"
        type: choice
        options: [ "false", "true" ]
  schedule:
    # Weekly: Sundays 12:00 UTC (06:00 America/Chicago during DST / 07:00 CST)
    - cron: "0 12 * * 0"

# Cancel superseded runs on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PYTHONUNBUFFERED: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  POETRY_VERSION: "1.8.3"
  DEFAULT_PY: "3.11"
  # Honour your makefile.ci knobs if you want to tweak from CI later
  DEVICE: "cpu"
  EPOCHS: "1"

jobs:
  # ---------------------------------------------------------------------------
  # 1) Hygiene: lint → type → unit-tests (matrix)
  # ---------------------------------------------------------------------------
  hygiene:
    name: Hygiene (lint/type/test) • py${{ matrix.py }}
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        py: [ "3.10", "3.11" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.py }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}

      - name: Cache Poetry & pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ matrix.py }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ matrix.py }}-

      - name: Install deps (no-root)
        run: |
          poetry config virtualenvs.create true
          poetry install --no-root
          poetry --version
          python --version

      - name: Ruff (lint)
        run: poetry run ruff check .

      - name: Black (format check)
        run: poetry run black --check .

      - name: Mypy (strict, allow failure warnings)
        run: poetry run mypy --strict || true

      - name: Unit tests
        run: poetry run pytest -q
      - name: Upload test logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-py${{ matrix.py }}
          path: |
            logs/
          if-no-files-found: ignore
          retention-days: 7

  # ---------------------------------------------------------------------------
  # 2) Build/Test/Smoke: run your makefile.ci deterministic pipeline
  # ---------------------------------------------------------------------------
  ci:
    name: Build • Test • Smoke (makefile.ci)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: hygiene

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python (default)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PY }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}

      - name: Cache Poetry & pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ env.DEFAULT_PY }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.DEFAULT_PY }}-

      - name: Install deps (no-root)
        run: |
          poetry config virtualenvs.create true
          poetry install --no-root

      - name: Setup DVC (optional)
        run: |
          python -m pip install --upgrade "dvc[all]" || python -m pip install --upgrade dvc
          dvc --version || true

      - name: DVC pull (optional)
        run: |
          make -f makefile.ci dvc-pull || true

      - name: Run CI pipeline
        run: |
          make -f makefile.ci ci

      - name: Upload outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: outputs/
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs/
          if-no-files-found: ignore
          retention-days: 7

  # ---------------------------------------------------------------------------
  # 3) Predict (optional artifact; does not block)
  # ---------------------------------------------------------------------------
  predict:
    name: Predict (optional)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: ci
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PY }}
      - name: Install Poetry (thin)
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry install --no-root
      - name: Predict
        run: |
          make -f makefile.ci predict || true
      - name: Upload prediction
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: predictions
          path: |
            outputs/predictions/
            outputs/submission.csv
          if-no-files-found: ignore
          retention-days: 7

  # ---------------------------------------------------------------------------
  # 4) Ablation (scheduled or manual) — fast grid + leaderboard artifact
  # ---------------------------------------------------------------------------
  ablate:
    name: Ablation Leaderboard (scheduled/manual)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && inputs.run_ablation_on_push == 'true')

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PY }}
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create true
          poetry install --no-root
      - name: Run ablation (fast grid, light)
        run: |
          make -f makefile.ci ablate-ci
      - name: Upload ablation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ablation-leaderboard
          path: |
            outputs/ablate/leaderboard.csv
            outputs/ablate/leaderboard.html
            outputs/ablate/**
          if-no-files-found: ignore
          retention-days: 14

  # ---------------------------------------------------------------------------
  # 5) Kaggle submit (manual/guarded; never on PRs)
  # ---------------------------------------------------------------------------
  kaggle-submit:
    name: Kaggle Submit (manual/guarded)
    needs: ci
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: |
      github.event_name == 'workflow_dispatch' &&
      inputs.submit_to_kaggle == 'true' &&
      github.event.pull_request == null

    env:
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

    steps:
      - name: Fail early if secrets missing
        run: |
          if [ -z "${KAGGLE_USERNAME}" ] || [ -z "${KAGGLE_KEY}" ]; then
            echo "::error::Kaggle credentials are not configured (KAGGLE_USERNAME/KAGGLE_KEY)."
            exit 1
          fi

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PY }}

      - name: Install kaggle CLI & auth
        run: |
          python -m pip install --upgrade kaggle
          mkdir -p ~/.kaggle
          printf '{"username":"%s","key":"%s"}' "$KAGGLE_USERNAME" "$KAGGLE_KEY" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
          kaggle --version || true

      - name: Ensure submission exists
        run: |
          if [ ! -f "outputs/predictions/submission.csv" ] && [ -f "outputs/submission.csv" ]; then
            mkdir -p outputs/predictions
            cp outputs/submission.csv outputs/predictions/submission.csv
          fi
          test -f "outputs/predictions/submission.csv" || (echo "::error::No submission.csv found"; exit 1)
          ls -lh outputs/predictions/submission.csv

      - name: Submit to Kaggle (neurips-2025-ariel)
        run: |
          kaggle competitions submit \
            -c neurips-2025-ariel \
            -f outputs/predictions/submission.csv \
            -m "CI auto-submit: $GITHUB_SHA"