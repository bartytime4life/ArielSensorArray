# ==============================================================================
# SpectraMind V50 — GitHub Actions CI (full)
# - Poetry caching for fast installs
# - Optional DVC pull (safe no-op if not used)
# - Core CI: make -f makefile.ci ci
# - Scheduled/Manual ablation leaderboard (make -f makefile.ci ablate-ci)
# - Guarded Kaggle submit (secrets required; manual toggle)
# ==============================================================================

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:
    inputs:
      run_ablation_on_push:
        description: "Run fast ablation (ablate-ci) for this manual run?"
        required: false
        default: "false"
        type: choice
        options: [ "false", "true" ]
      submit_to_kaggle:
        description: "Submit predictions to Kaggle for this manual run?"
        required: false
        default: "false"
        type: choice
        options: [ "false", "true" ]
  schedule:
    # Weekly: Sundays 12:00 UTC (06:00 America/Chicago in DST / 07:00 CST)
    - cron: "0 12 * * 0"

permissions:
  contents: read

env:
  PYTHONUNBUFFERED: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  POETRY_VERSION: "1.8.3"
  DEFAULT_PY: "3.11"

jobs:
  # ---------------------------------------------------------------------------
  # Core build/test/smoke pipeline
  # ---------------------------------------------------------------------------
  ci:
    name: Build • Test • Smoke (makefile.ci)
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PY }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ env.DEFAULT_PY }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.DEFAULT_PY }}-

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create true
          poetry install --no-root
          poetry --version
          python --version

      - name: Setup DVC (optional)
        run: |
          python -m pip install --upgrade "dvc[all]" || python -m pip install --upgrade dvc
          dvc --version || true

      - name: DVC pull (optional)
        run: |
          make -f makefile.ci dvc-pull || true

      - name: Run CI pipeline (makefile.ci)
        run: |
          make -f makefile.ci ci

      - name: Predict (optional)
        run: |
          make -f makefile.ci predict || true

      - name: Upload outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: outputs/
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs/
          if-no-files-found: ignore
          retention-days: 7

  # ---------------------------------------------------------------------------
  # Ablation leaderboard — scheduled weekly & manual dispatch
  #   - Also supports opt-in on dispatch via input run_ablation_on_push=true
  # ---------------------------------------------------------------------------
  ablate:
    name: Ablation Leaderboard (scheduled/manual)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && inputs.run_ablation_on_push == 'true')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PY }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ env.DEFAULT_PY }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ env.DEFAULT_PY }}-

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create true
          poetry install --no-root

      - name: Run ablation (fast grid, light)
        run: |
          make -f makefile.ci ablate-ci

      - name: Upload ablation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ablation-leaderboard
          path: |
            outputs/ablate/leaderboard.csv
            outputs/ablate/leaderboard.html
            outputs/ablate/**
          if-no-files-found: ignore
          retention-days: 14

  # ---------------------------------------------------------------------------
  # Kaggle submit (guarded by secrets; never on PRs)
  #   - Manual: set submit_to_kaggle=true when dispatching
  #   - You can add an 'on push to main' branch rule if desired
  # ---------------------------------------------------------------------------
  kaggle-submit:
    name: Kaggle Submit (manual/guarded)
    needs: ci
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: |
      github.event_name == 'workflow_dispatch' &&
      inputs.submit_to_kaggle == 'true' &&
      github.event.pull_request == null

    env:
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PY }}

      - name: Install kaggle CLI
        run: |
          python -m pip install --upgrade kaggle
          mkdir -p ~/.kaggle
          printf '{"username":"%s","key":"%s"}' "$KAGGLE_USERNAME" "$KAGGLE_KEY" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Ensure submission exists
        run: |
          if [ ! -f "outputs/predictions/submission.csv" ] && [ -f "outputs/submission.csv" ]; then
            mkdir -p outputs/predictions
            cp outputs/submission.csv outputs/predictions/submission.csv
          fi
          test -f "outputs/predictions/submission.csv" || (echo "::error::No submission.csv found"; exit 1)
          ls -lh outputs/predictions/submission.csv

      - name: Submit to Kaggle (neurips-2025-ariel)
        run: |
          kaggle competitions submit \
            -c neurips-2025-ariel \
            -f outputs/predictions/submission.csv \
            -m "CI auto-submit: $GITHUB_SHA"
