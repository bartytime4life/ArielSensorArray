upgrade, name: nightly-e2e
on:
schedule:
\# 04:30 UTC every day (11:30pm US Central the day before, DST-aware by GitHub)
\- cron: '30 4 \* \* \*'
workflow\_dispatch:
inputs:
fast:
description: "Run a fast smoke instead of full E2E"
required: false
default: "false"
type: choice
options: \["false", "true"]
subset:
description: "Optional dataset subset selector (e.g. 50 or 'dev')"
required: false
default: ""
type: string
extra\_args:
description: "Extra CLI args to pass to spectramind commands"
required: false
default: ""
type: string
hydra\_overrides:
description: "Optional Hydra overrides (space-separated, e.g. +data=ariel\_nominal +training.seed=1337)"
required: false
default: ""
type: string
python\_version:
description: "Python version"
required: false
default: "3.12"
type: string
permissions:
contents: read
concurrency:
group: nightly-e2e-\${{ github.ref }}
cancel-in-progress: false
env:

# Repro + caches

POETRY\_VIRTUALENVS\_IN\_PROJECT: "true"
POETRY\_NO\_INTERACTION: "1"
PIP\_DISABLE\_PIP\_VERSION\_CHECK: "1"
PIP\_NO\_PYTHON\_VERSION\_WARNING: "1"
HF\_HOME: \${{ github.workspace }}/.cache/huggingface
TRANSFORMERS\_OFFLINE: "1"
MPLBACKEND: "Agg"

# Determinism knobs (harmless on CPU-only runners)

PYTHONHASHSEED: "0"
CUBLAS\_WORKSPACE\_CONFIG: ":16:8"
CUDA\_LAUNCH\_BLOCKING: "1"

# Optional webhook (e.g., Slack) ‚Äì set NIGHTLY\_NOTIFY\_WEBHOOK secret to enable

NOTIFY\_WEBHOOK: \${{ secrets.NIGHTLY\_NOTIFY\_WEBHOOK || '' }}
jobs:
e2e-linux:
name: Linux ‚Ä¢ Nightly E2E (\${{ github.event.inputs.fast == 'true' && 'fast' || 'full' }})
runs-on: ubuntu-latest
timeout-minutes: 150
steps:
\- name: ‚è±Ô∏è Start timer
id: t0
run: echo "start\_ts=\$(date +%s)" >> "\$GITHUB\_OUTPUT"
\- name: üßæ Checkout (full history)
uses: actions/checkout\@v4
with:
fetch-depth: 0
\- name: üêç Setup Python
id: setup-py
uses: actions/setup-python\@v5
with:
python-version: \${{ inputs.python\_version || '3.12' }}
cache: "pip"
\- name: üß≠ Runner info
run: |
uname -a || true
python -V
df -h
nproc || true
lscpu | head -n 20 || true
\- name: üì¶ Install Poetry
run: |
python -m pip install --upgrade pip
python -m pip install "poetry==1.8.3"
\- name: ‚ôªÔ∏è Restore Poetry/HF caches
uses: actions/cache\@v4
with:
path: |
.venv
\~/.cache/pypoetry
.cache/huggingface
key: nightly-e2e-\${{ runner.os }}-py\${{ inputs.python\_version || '3.12' }}-\${{ hashFiles('**/poetry.lock') }}
restore-keys: |
nightly-e2e-\${{ runner.os }}-py\${{ inputs.python\_version || '3.12' }}-
nightly-e2e-\${{ runner.os }}-
\- name: üìö Install dependencies (Poetry)
run: |
poetry env use "\${{ steps.setup-py.outputs.python-path }}"
poetry install --no-interaction --with dev
\- name: üìÇ Prime data/artifacts via DVC (if present)
run: |
if poetry run which dvc >/dev/null 2>&1 || command -v dvc >/dev/null 2>&1; then
echo ">>> DVC detected ‚Äî pulling data & run-cache"
poetry run dvc pull --run-cache --force || true
else
echo "DVC not found ‚Äî skipping."
fi
\- name: üß™ Selftest (fast, non-blocking signal)
run: |
if poetry run which spectramind >/dev/null 2>&1; then
poetry run spectramind selftest --fast || echo "::warning::spectramind selftest failed (continuing)"
else
echo "::warning::spectramind CLI not found; proceeding anyway."
fi
\- name: üóÇÔ∏è Create directories
run: |
mkdir -p artifacts logs outputs
\- name: üßÆ Resolve run switches
id: args
env:
FAST\_FLAG: \${{ github.event.inputs.fast || 'false' }}
SUBSET: \${{ github.event.inputs.subset || '' }}
EXTRA: \${{ github.event.inputs.extra\_args || '' }}
HYDRA: \${{ github.event.inputs.hydra\_overrides || '' }}
run: |
set -euo pipefail
CAL\_ARGS=""
TRN\_ARGS=""
DIA\_ARGS=""
if \[\[ "\${FAST\_FLAG}" == "true" ]]; then
CAL\_ARGS+=" --sample 20"
TRN\_ARGS+=" --epochs 1 --fast-dev-run"
DIA\_ARGS+=" --no-umap --no-tsne"
fi
if \[\[ -n "\${SUBSET}" ]]; then
CAL\_ARGS+=" --subset \${SUBSET}"
fi
echo "cal=\${CAL\_ARGS}" >> "\$GITHUB\_OUTPUT"
echo "trn=\${TRN\_ARGS}" >> "\$GITHUB\_OUTPUT"
echo "dia=\${DIA\_ARGS}" >> "\$GITHUB\_OUTPUT"
echo "xtra=\${EXTRA}" >> "\$GITHUB\_OUTPUT"
echo "hydra=\${HYDRA}" >> "\$GITHUB\_OUTPUT"
\- name: üß≠ Show final CLI plan
run: |
echo "Calibration args:   '\${{ steps.args.outputs.cal }}'"
echo "Training args:      '\${{ steps.args.outputs.trn }}'"
echo "Diagnostics args:   '\${{ steps.args.outputs.dia }}'"
echo "Extra args:         '\${{ steps.args.outputs.xtra }}'"
echo "Hydra overrides:    '\${{ steps.args.outputs.hydra }}'"
\- name: üõ∞Ô∏è Calibrate
run: |
set -euo pipefail
poetry run spectramind calibrate&#x20;
\${{ steps.args.outputs.cal }}&#x20;
\${{ steps.args.outputs.xtra }}&#x20;
\${{ steps.args.outputs.hydra }}&#x20;
|| { echo "::error::Calibration failed"; exit 1; }
\- name: üöÇ Train
run: |
set -euo pipefail
poetry run spectramind train&#x20;
\${{ steps.args.outputs.trn }}&#x20;
\${{ steps.args.outputs.xtra }}&#x20;
\${{ steps.args.outputs.hydra }}&#x20;
|| { echo "::error::Training failed"; exit 1; }
\- name: üîé Diagnostics (dashboard)
run: |
set -euo pipefail
poetry run spectramind diagnose dashboard&#x20;
\${{ steps.args.outputs.dia }}&#x20;
\--no-open&#x20;
\--outdir outputs/diagnostics-nightly&#x20;
\${{ steps.args.outputs.xtra }}&#x20;
\${{ steps.args.outputs.hydra }}&#x20;
|| true
\- name: üì¶ Package submission (dry run)
run: |
set -euo pipefail
poetry run spectramind submit --dry-run --out artifacts/submission-dryrun.zip&#x20;
\${{ steps.args.outputs.xtra }}&#x20;
\${{ steps.args.outputs.hydra }}&#x20;
|| true
\- name: üóÉÔ∏è Collect artifacts
if: always()
run: |
mkdir -p artifacts/logs artifacts/outputs
\# Gather logs (tgz)
test -d logs && tar -czf artifacts/logs/nightly-logs.tgz logs || true
\# Diagnostics / outputs snapshots
test -d outputs/diagnostics-nightly && tar -czf artifacts/outputs/diagnostics-nightly.tgz outputs/diagnostics-nightly || true
\# Lightweight outputs (<= 50 MB each)
test -d outputs && find outputs -maxdepth 2 -type f -size -50M -print0 | xargs -0 -I{} cp --parents {} artifacts/outputs 2>/dev/null || true
\# Common manifest files (best-effort)
for f in run\_hash\_summary\_v50.json logs/v50\_debug\_log.md; do
if \[\[ -f "\$f" ]]; then mkdir -p artifacts/manifests && cp -v "\$f" artifacts/manifests/; fi
done
\# Config snapshots (Hydra)
find . -maxdepth 3 -type f $-name "hydra.yaml" -o -path "*/.hydra/*"$ -print0 | tar --null -czf artifacts/configs.tgz -T - || true
\- name: üì§ Upload artifacts
if: always()
uses: actions/upload-artifact\@v4
with:
name: nightly-e2e-\${{ github.run\_id }}
path: artifacts/
if-no-files-found: warn
retention-days: 10
\- name: üßæ Build summary
if: always()
id: summary
run: |
end\_ts=\$(date +%s)
start\_ts="\${{ steps.t0.outputs.start\_ts }}"
dur=\$(( end\_ts - start\_ts ))
\# Count diagnostics
diag\_dir="outputs/diagnostics-nightly"
umap=\$(ls "\${diag\_dir}"/**/*umap* 2>/dev/null | wc -l | tr -d ' ') || umap=0
tsne=\$(ls "\${diag\_dir}"/**/*tsne* 2>/dev/null | wc -l | tr -d ' ') || tsne=0
html=\$(ls "\${diag\_dir}"/**/\*.html 2>/dev/null | wc -l | tr -d ' ') || html=0
echo "duration=\${dur}" >> "\$GITHUB\_OUTPUT"
{
echo "## Nightly E2E Summary"
echo ""
echo "- Fast mode   : \`\${{ github.event.inputs.fast || 'false' }}\`"
echo "- Subset      : \`\${{ github.event.inputs.subset || '(none)' }}\`"
echo "- Extra args  : \`\${{ github.event.inputs.extra\_args || '(none)' }}\`"
echo "- Hydra ovrd. : \`\${{ github.event.inputs.hydra\_overrides || '(none)' }}\`"
echo "- Python      : \`\${{ inputs.python\_version || '3.12' }}\`"
echo "- Duration    : \`\${dur}s\`"
echo "- Artifacts   : nightly-e2e-\${{ github.run\_id }}"
echo ""
echo "### Diagnostics snapshot"
echo "- HTML pages  : \`\${html}\`"
echo "- UMAP assets : \`\${umap}\`"
echo "- t-SNE assets: \`\${tsne}\`"
} >> "\$GITHUB\_STEP\_SUMMARY"
\- name: üîî Optional webhook notification
if: always() && env.NOTIFY\_WEBHOOK != ''
env:
STATUS: \${{ job.status }}
DURATION: \${{ steps.summary.outputs.duration || '0' }}
run: |
short\_sha="\${GITHUB\_SHA:0:7}"
payload=\$(jq -n&#x20;
\--arg status "\$STATUS"&#x20;
\--arg run   "\${GITHUB\_SERVER\_URL}/\${GITHUB\_REPOSITORY}/actions/runs/\${GITHUB\_RUN\_ID}"&#x20;
\--arg ref   "\${GITHUB\_REF\_NAME}"&#x20;
\--arg sha   "\$short\_sha"&#x20;
\--arg dur   "\$DURATION"&#x20;
'{text: ("Nightly E2E: " + \$status + " ‚Ä¢ " + \$ref + "@" + \$sha + " (" + \$dur + "s)\n" + \$run)}')
curl -sS -X POST -H 'Content-Type: application/json' -d "\$payload" "\$NOTIFY\_WEBHOOK" || true
docker-gpu:
name: Docker GPU Nightly Smoke
if: \${{ vars.DOCKER\_GPU == '1' }}
runs-on: ubuntu-latest
timeout-minutes: 90
env:
IMAGE\_TAG: spectramindv50\:nightly
BUILDKIT\_CACHE\_TO: /tmp/.buildx-cache-new
BUILDKIT\_CACHE\_FROM: /tmp/.buildx-cache
steps:
\- uses: actions/checkout\@v4
\- name: üß± Setup Buildx
uses: docker/setup-buildx-action\@v3
\- name: ‚ôªÔ∏è Restore BuildKit cache
uses: actions/cache\@v4
with:
path: \${{ env.BUILDKIT\_CACHE\_FROM }}
key: nightly-buildx-\${{ runner.os }}-\${{ hashFiles('Dockerfile', '**/pyproject.toml', '**/poetry.lock') }}
restore-keys: nightly-buildx-\${{ runner.os }}-
\- name: üê≥ Build CUDA image (cached, load)
uses: docker/build-push-action\@v6
with:
context: .
file: ./Dockerfile
tags: \${{ env.IMAGE\_TAG }}
load: true
cache-from: type=local,src=\${{ env.BUILDKIT\_CACHE\_FROM }}
cache-to: type=local,dest=\${{ env.BUILDKIT\_CACHE\_TO }},mode=max
\- name: üíæ Save BuildKit cache
if: always()
uses: actions/cache\@v4
with:
path: \${{ env.BUILDKIT\_CACHE\_TO }}
key: nightly-buildx-\${{ runner.os }}-\${{ hashFiles('Dockerfile', '**/pyproject.toml', '**/poetry.lock') }}
\- name: ‚öôÔ∏è GPU smoke (inside container)
run: |
docker run --rm --gpus all -v "\$PWD":/workspace -w /workspace&#x20;
\${{ env.IMAGE\_TAG }}&#x20;
bash -lc 'spectramind selftest --fast || exit 1'
\- name: üì§ Upload GPU-smoke logs (if any)
if: always()
uses: actions/upload-artifact\@v4
with:
name: nightly-gpu-smoke-\${{ github.run\_id }}
path: artifacts/
if-no-files-found: ignore
retention-days: 7
