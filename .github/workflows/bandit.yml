```yaml
# .github/workflows/bandit.yml
# ==============================================================================
# SpectraMind V50 — Python Security Lint (Bandit)
# ------------------------------------------------------------------------------
# Runs Bandit recursively to detect common security issues.
# • Uploads SARIF to GitHub Code Scanning (Security > Code scanning alerts)
# • Optional strict gate: fail the job on findings ≥ chosen severity threshold
# • Honors local config if present: bandit.yaml / .bandit(.yml|.yaml) or [tool.bandit] in pyproject.toml
# • Multi-Python matrix for broader coverage
# ==============================================================================

name: bandit

on:
  push:
    branches: ["**"]
    paths-ignore:
      - "docs/**"
      - "assets/**"
      - "**/*.md"
      - ".github/ISSUE_TEMPLATE/**"
  pull_request:
    branches: ["**"]
    paths-ignore:
      - "docs/**"
      - "assets/**"
      - "**/*.md"
      - ".github/ISSUE_TEMPLATE/**"
  schedule:
    # Weekly Monday 06:20 UTC
    - cron: "20 6 * * 1"
  workflow_dispatch:
    inputs:
      severity_threshold:
        description: "Fail the job on findings at/above this severity (low|medium|high)"
        default: "medium"
        required: false
      confidence_threshold:
        description: "Minimum confidence to report (low|medium|high)"
        default: "medium"
        required: false
      excludes:
        description: "Comma-separated paths to exclude (e.g. tests,venv,build)"
        default: ""
        required: false
      fail_on_findings:
        description: "If true, the job fails when findings ≥ threshold exist"
        default: "true"
        required: false

permissions:
  contents: read
  security-events: write   # needed for SARIF upload
  actions: read

concurrency:
  group: bandit-${{ github.ref }}
  cancel-in-progress: true

jobs:
  bandit:
    name: Bandit • py${{ matrix.python }}
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        python: ["3.10", "3.11", "3.12"]

    env:
      # Defaults if not provided via workflow_dispatch
      SEVERITY: ${{ inputs.severity_threshold || 'medium' }}
      CONFIDENCE: ${{ inputs.confidence_threshold || 'medium' }}
      EXCLUDES: ${{ inputs.excludes || '' }}
      FAIL_ON_FINDINGS: ${{ inputs.fail_on_findings || 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python }}
        id: setup
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          python -m pip install "bandit==1.7.9" "tomli>=2.0.1" || python -m pip install "bandit" "tomli"

      - name: Detect Bandit config and targets
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          # Determine config file (prefer explicit bandit.yaml; fall back to pyproject if [tool.bandit] exists)
          CONFIG_ARG=()
          if [[ -f "bandit.yaml" ]] || [[ -f ".bandit" ]] || [[ -f ".bandit.yml" ]] || [[ -f ".bandit.yaml" ]]; then
            for f in bandit.yaml .bandit .bandit.yml .bandit.yaml; do
              if [[ -f "$f" ]]; then CONFIG_ARG=(-c "$f"); break; fi
            done
          else
            if [[ -f "pyproject.toml" ]] && grep -q "^\[tool\.bandit\]" pyproject.toml; then
              CONFIG_ARG=()
            fi
          fi

          # Build exclude argument
          EXCLUDE_ARG=()
          if [[ -n "${EXCLUDES}" ]]; then
            EXCLUDE_ARG=(-x "${EXCLUDES}")
          fi

          # Choose root (scan entire repo)
          TARGET="."

          printf 'config=%s\n' "${CONFIG_ARG[*]}" >> "$GITHUB_OUTPUT"
          printf 'exclude=%s\n' "${EXCLUDE_ARG[*]}" >> "$GITHUB_OUTPUT"
          printf 'target=%s\n' "${TARGET}" >> "$GITHUB_OUTPUT"

      # ----------- Run Bandit: produce SARIF for Code Scanning -----------
      - name: Run Bandit (SARIF)
        shell: bash
        run: |
          set -euo pipefail
          bandit -q -r "${{ steps.detect.outputs.target }}" \
            ${{ steps.detect.outputs.config }} \
            ${{ steps.detect.outputs.exclude }} \
            --severity-level "${SEVERITY}" \
            --confidence-level "${CONFIDENCE}" \
            -f sarif -o bandit.sarif || true

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
          category: bandit

      # ----------- Optional strict gate: fail CI if any findings at/above threshold -----------
      - name: Gate on findings (fail if ≥ threshold)
        if: ${{ env.FAIL_ON_FINDINGS == 'true' }}
        shell: bash
        run: |
          set -euo pipefail

          if [[ ! -s "bandit.sarif" ]]; then
            echo "No SARIF produced; treating as no findings."
            exit 0
          fi

          # Map severity threshold to SARIF level set:
          # - high   -> error
          # - medium -> error | warning
          # - low    -> error | warning | note
          case "${SEVERITY,,}" in
            high)   jq_filter='.runs[].results[] | select(.level=="error")' ;;
            medium) jq_filter='.runs[].results[] | select(.level=="error" or .level=="warning")' ;;
            low)    jq_filter='.runs[].results[] | select(.level=="error" or .level=="warning" or .level=="note")' ;;
            *)      jq_filter='.runs[].results[] | select(.level=="error" or .level=="warning")' ;;
          esac

          # Count matching results
          COUNT=$(jq "[${jq_filter}] | length" bandit.sarif)
          echo "Findings ≥ '${SEVERITY}' severity: ${COUNT}"

          if [[ "${COUNT}" -gt 0 ]]; then
            echo "::error::Bandit reported ${COUNT} findings at/above severity '${SEVERITY}'. See Code Scanning for details."
            exit 1
          else
            echo "No findings at/above severity '${SEVERITY}'."
          fi

      - name: Summary
        if: always()
        shell: bash
        run: |
          echo "Bandit completed for Python ${{ matrix.python }}."
          if test -f bandit.sarif; then
            echo "SARIF uploaded to Code Scanning."
          fi
```
