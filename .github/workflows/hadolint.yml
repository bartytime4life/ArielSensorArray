upgrade, # .github/workflows/hadolint.yml

# ==============================================================================

# SpectraMind V50 â€” Dockerfile Lint (Hadolint)

# Lints all Dockerfiles using hadolint, uploads SARIF to Code Scanning (when

# permitted), annotates the job summary, and can fail the build on findings.

# - Respects .hadolint.yaml/.yml at repo root

# - Works for push/PR/schedule/dispatch

# - Safe for forks: stores SARIF as artifact when SARIF upload perms are missing

# ==============================================================================

name: hadolint

on:
push:
branches: \["**"]
paths:
\- "**/Dockerfile"
\- "**/Dockerfile.\*"
\- "**/*.dockerfile"
\- ".hadolint.yaml"
\- ".hadolint.yml"
\- ".github/workflows/hadolint.yml"
pull\_request:
branches: \["**"]
paths:
\- "**/Dockerfile"
\- "\*\*/Dockerfile.*"
\- "\*\*/\*.dockerfile"
\- ".hadolint.yaml"
\- ".hadolint.yml"
\- ".github/workflows/hadolint.yml"
schedule:
\# Weekly Monday 06:25 UTC
\- cron: "25 6 \* \* 1"
workflow\_dispatch:
inputs:
fail\_on\_findings:
description: "Fail the job if hadolint reports any findings (true/false)"
default: "true"
required: false
ignore\_rules:
description: "Optional space-separated hadolint rule IDs to ignore (e.g. DL3008 DL3015)"
default: ""
required: false

# Minimal default; SARIF upload needs security-events: write and is skipped on forks

permissions:
contents: read
security-events: write
actions: read

concurrency:
group: hadolint-\${{ github.ref }}
cancel-in-progress: true

jobs:
lint:
name: Hadolint
runs-on: ubuntu-latest
timeout-minutes: 15

```
env:
  FAIL_ON_FINDINGS: ${{ inputs.fail_on_findings || 'true' }}
  IGNORE_RULES: ${{ inputs.ignore_rules || '' }}
  # Fork detection (cannot upload SARIF to Code Scanning from fork PRs)
  IS_FORK_PR: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork }}

steps:
  - name: Checkout
    uses: actions/checkout@v4

  - name: Ensure jq present (for SARIF counting)
    run: |
      set -euo pipefail
      if ! command -v jq >/dev/null 2>&1; then
        sudo apt-get update -y
        sudo apt-get install -y jq
      fi
      jq --version

  - name: Find Dockerfiles
    id: find
    shell: bash
    run: |
      set -euo pipefail
      mapfile -t FILES < <(git ls-files \
        '**/Dockerfile' \
        '**/Dockerfile.*' \
        '**/*.dockerfile' 2>/dev/null || true)
      if (( ${#FILES[@]} == 0 )); then
        echo "found=0" >> "$GITHUB_OUTPUT"
        echo "::notice::No Dockerfiles found. Skipping hadolint."
        exit 0
      fi
      printf '%s\n' "${FILES[@]}" > /tmp/dockerfiles.txt
      echo "Found Dockerfiles:"
      cat /tmp/dockerfiles.txt
      echo "found=${#FILES[@]}" >> "$GITHUB_OUTPUT"

  - name: Install hadolint
    if: steps.find.outputs.found != '0'
    shell: bash
    run: |
      set -euo pipefail
      HDL_URL="https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64"
      curl -sSfL "$HDL_URL" -o /usr/local/bin/hadolint
      chmod +x /usr/local/bin/hadolint
      hadolint --version

  - name: Build hadolint args
    if: steps.find.outputs.found != '0'
    id: args
    shell: bash
    run: |
      set -euo pipefail
      CONFIG_ARG=()
      for f in .hadolint.yaml .hadolint.yml; do
        if [[ -f "$f" ]]; then CONFIG_ARG=(-c "$f"); break; fi
      done

      IGNORE_ARG=()
      if [[ -n "${IGNORE_RULES}" ]]; then
        for r in ${IGNORE_RULES}; do
          IGNORE_ARG+=(--ignore "$r")
        done
      fi

      printf 'config=%s\n' "${CONFIG_ARG[*]}" >> "$GITHUB_OUTPUT"
      printf 'ignore=%s\n' "${IGNORE_ARG[*]}" >> "$GITHUB_OUTPUT"

  - name: Run hadolint (SARIF)
    if: steps.find.outputs.found != '0'
    shell: bash
    run: |
      set -euo pipefail
      # shellcheck disable=SC2046
      hadolint \
        ${{ steps.args.outputs.config }} \
        ${{ steps.args.outputs.ignore }} \
        -f sarif $(tr '\n' ' ' < /tmp/dockerfiles.txt) \
        > hadolint.sarif || true

      if [[ ! -s hadolint.sarif ]]; then
        echo "::warning::hadolint did not produce SARIF output."
        cat > hadolint.sarif <<'EOF'
        { "version": "2.1.0", "$schema": "https://json.schemastore.org/sarif-2.1.0.json", "runs": [ { "tool": { "driver": { "name": "hadolint", "informationUri": "https://github.com/hadolint/hadolint" } }, "results": [] } ] }
        EOF
      fi

  - name: Upload SARIF to Code Scanning (skips on forks)
    if: steps.find.outputs.found != '0' && env.IS_FORK_PR != 'true'
    uses: github/codeql-action/upload-sarif@v3
    with:
      sarif_file: hadolint.sarif
      category: hadolint

  - name: Upload SARIF as artifact (fork PR fallback)
    if: steps.find.outputs.found != '0' && env.IS_FORK_PR == 'true'
    uses: actions/upload-artifact@v4
    with:
      name: hadolint-sarif
      path: hadolint.sarif
      if-no-files-found: warn
      retention-days: 7

  - name: Gate on findings (optional)
    if: steps.find.outputs.found != '0' && env.FAIL_ON_FINDINGS == 'true'
    shell: bash
    run: |
      set -euo pipefail
      COUNT=$(jq '[.runs[].results[]] | length' hadolint.sarif 2>/dev/null || echo 0)
      echo "Hadolint findings: ${COUNT}"
      if [[ "${COUNT}" -gt 0 ]]; then
        echo "::error::Hadolint reported ${COUNT} issue(s). See Code Scanning (or SARIF artifact on forks) for details."
        exit 1
      fi
      echo "No hadolint findings."

  - name: Summary
    if: always()
    shell: bash
    run: |
      if [[ "${{ steps.find.outputs.found }}" == "0" ]]; then
        {
          echo "### Hadolint Summary"
          echo ""
          echo "_No Dockerfiles found to lint._"
        } >> "$GITHUB_STEP_SUMMARY"
        exit 0
      fi

      ISSUES=$(jq '[.runs[].results[]] | length' hadolint.sarif 2>/dev/null || echo 0)
      {
        echo "### Hadolint Summary"
        echo "- Files scanned: ${{ steps.find.outputs.found }}"
        echo "- Findings: ${ISSUES}"
        if [[ "${IS_FORK_PR}" == "true" ]]; then
          echo "- SARIF: uploaded as workflow artifact (fork PR)"
        else
          echo "- SARIF: uploaded to Code Scanning"
        fi
        if [[ "${FAIL_ON_FINDINGS}" == "true" ]]; then
          echo "- Fail on findings: enabled"
        else
          echo "- Fail on findings: disabled"
        fi
      } >> "$GITHUB_STEP_SUMMARY"
```
