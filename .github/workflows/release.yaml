# .github/workflows/release.yml
# GitHub Actions workflow to cut a reproducible release:
# - Triggered by SemVer tags (vX.Y.Z) or manual dispatch
# - Runs full test matrix with Poetry
# - Builds sdist/wheel and uploads as artifacts
# - (Optional) Publishes to PyPI if PYPI_API_TOKEN is set
# - (Optional) Builds & pushes Docker image to GHCR
# - Creates a GitHub Release with autogenerated notes and attached artifacts
# - Generates a Software Bill of Materials (SBOM) for traceability

name: release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      tag:
        description: 'SemVer tag to release (e.g., v1.2.3). If empty, no tag will be created.'
        required: false
        default: ''
      prerelease:
        description: 'Mark the release as pre-release'
        required: false
        default: 'false'
      notes:
        description: 'Optional extra release notes'
        required: false
        default: ''

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

env:
  PYTHON_DEFAULT: '3.11'
  POETRY_VERSION: '1.8.3'
  PIP_CACHE_DIR: ~/.cache/pip
  POETRY_CACHE_DIR: ~/.cache/pypoetry
  # If your package name differs from repo name, set PACKAGE_NAME here:
  PACKAGE_NAME: ${{ github.event.repository.name }}

concurrency:
  group: release-${{ github.ref || github.run_id }}
  cancel-in-progress: false

jobs:
  # Optional: create the tag from workflow_dispatch if provided
  ensure-tag:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.tag != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ inputs.tag }}"
          git push origin "${{ inputs.tag }}"

  test:
    name: Test (Poetry) â€“ py${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout (full history for version, changelog)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Poetry ${{ env.POETRY_VERSION }}
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install "poetry==${{ env.POETRY_VERSION }}"

      - name: Configure Poetry & install deps
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --with dev

      - name: Static checks (if configured)
        run: |
          if [ -f pyproject.toml ]; then
            if poetry run python -c "import ruff" 2>/dev/null; then poetry run ruff check . ; fi
            if poetry run python -c "import black" 2>/dev/null; then poetry run black --check . ; fi
            if poetry run python -c "import mypy" 2>/dev/null; then poetry run mypy . || true ; fi
          fi

      - name: Run tests
        run: |
          if [ -f Makefile ] && grep -qE '(^|[: ])test([^a-zA-Z]|$)' Makefile; then
            make test
          elif [ -f pytest.ini ] || ls -1 tests test 2>/dev/null; then
            poetry run pytest -q
          else
            echo "No tests discovered; skipping." 
          fi

      - name: Smoke-check CLI (if present)
        run: |
          set -e
          if poetry run python -c "import importlib; import os; import sys; \
              m=os.environ.get('PACKAGE_NAME',''); \
              sys.exit(0 if m and importlib.util.find_spec(m) else 1)" ; then
            echo "Package import OK"
          else
            echo "Package not importable; ensure PACKAGE_NAME matches your import root." && exit 1
          fi

  build:
    name: Build distributions (sdist/wheel)
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_DEFAULT }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: 'pip'

      - name: Install Poetry ${{ env.POETRY_VERSION }}
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install "poetry==${{ env.POETRY_VERSION }}"

      - name: Build sdist & wheel
        run: |
          poetry install --no-interaction --only main
          poetry build
          ls -lah dist/

      - name: Upload artifacts (dist)
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
          if-no-files-found: error
          retention-days: 14

      - name: Generate SBOM (SPDX)
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 30

  docker:
    name: Build & Push Docker (GHCR)
    needs: [test]
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && inputs.tag != '') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive image tags
        id: img
        run: |
          REF="${{ github.ref_name }}"
          if [ -z "$REF" ] || [ "$REF" = "workflow_dispatch" ]; then REF="${{ inputs.tag }}"; fi
          # normalize without leading 'v'
          VERSION="${REF#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$REF" >> $GITHUB_OUTPUT
          echo "repo=ghcr.io/${{ github.repository }}" >> $GITHUB_OUTPUT

      - name: Set up QEMU (for multi-arch builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.img.outputs.repo }}:${{ steps.img.outputs.version }}
            ${{ steps.img.outputs.repo }}:latest
          build-args: |
            VERSION=${{ steps.img.outputs.version }}

      - name: Generate image SBOM & Attest
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.img.outputs.repo }}:${{ steps.img.outputs.version }}
          format: spdx-json
          output-file: image.sbom.spdx.json

      - name: Upload image SBOM
        uses: actions/upload-artifact@v4
        with:
          name: image-sbom
          path: image.sbom.spdx.json
          retention-days: 30

  pypi:
    name: Publish to PyPI
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' && secrets.PYPI_API_TOKEN != '' }}
    steps:
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: dist
          verbose: true
          skip_existing: true
          password: ${{ secrets.PYPI_API_TOKEN }}

  gh-release:
    name: Create GitHub Release
    needs: [build, docker, pypi]
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && inputs.tag != '') }}
    steps:
      - name: Determine tag and prerelease flag
        id: meta
        run: |
          TAG="${{ github.ref_name }}"
          if [ -z "$TAG" ] || [ "$TAG" = "workflow_dispatch" ]; then TAG="${{ inputs.tag }}"; fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          PRERELEASE="false"
          CASE="${TAG,,}" # lowercase
          if [[ "$CASE" =~ -alpha|-beta|-rc ]]; then PRERELEASE="true"; fi
          if [ "${{ inputs.prerelease }}" = "true" ]; then PRERELEASE="true"; fi
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Generate Release Notes (extra notes if provided)
        id: notes
        run: |
          EXTRA="${{ inputs.notes }}"
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "${EXTRA}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Artifacts:" >> $GITHUB_OUTPUT
          find _artifacts -type f -maxdepth 2 -print | sed 's/^/- /' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.tag }}
          prerelease: ${{ steps.meta.outputs.prerelease }}
          generate_release_notes: true
          body: ${{ steps.notes.outputs.body }}
          files: |
            _artifacts/dist/*
            _artifacts/sbom/sbom.spdx.json
            _artifacts/image-sbom/image.sbom.spdx.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
