# .github/workflows/diagnostics.yml
# ==============================================================================
# SpectraMind V50 — Diagnostics Workflow (Upgraded, CI-safe)
# Generates HTML dashboards & diagnostic artifacts (UMAP/t-SNE*, GLL heatmaps,
# SHAP*, symbolic overlays). Defaults to a CI-safe "light" run; extra Hydra
# overrides accepted via workflow_dispatch. (*heavy diagnostics may be skipped)
# - Python matrix (3.11, 3.12), Poetry in-project venv cache
# - Changes filter to skip heavy runs for docs/assets-only changes
# - Optional fast ablation + leaderboard attachment
# - Aggregated diagnostics index artifact
# ==============================================================================

name: diagnostics

on:
  workflow_dispatch:
    inputs:
      preset:
        description: "Ablation preset to visualize (default/light/strict_symbolic/fast_eval/gnn_ssm_ablate)"
        type: choice
        options: [default, light, strict_symbolic, fast_eval, gnn_ssm_ablate]
        required: false
        default: "light"
      extra_overrides:
        description: "Hydra overrides (e.g., +data.split=toy +diagnostics.light=true)"
        type: string
        required: false
        default: "+diagnostics.light=true +data.split=toy"
      run_ablation:
        description: "Also run fast ablation and attach leaderboard?"
        type: choice
        options: ["false", "true"]
        required: false
        default: "false"
  push:
    branches: ["main"]
  pull_request:
    branches: ["**"]
  schedule:
    # Weekly snapshot (Sundays 07:00 UTC)
    - cron: "0 7 * * 0"

permissions:
  contents: read

concurrency:
  group: diagnostics-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -euxo pipefail

env:
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  POETRY_NO_INTERACTION: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  TRANSFORMERS_OFFLINE: "1"
  HF_HUB_OFFLINE: "1"
  HYDRA_FULL_ERROR: "1"
  DEFAULT_OVERRIDES: "+diagnostics.light=true +data.split=toy"
  DEVICE: "cpu"
  POETRY_VERSION: "1.8.3"
  DIAG_DIR: "outputs/diagnostics"

jobs:
  # --------------------------------------------------------------------------
  # 0) Changes filter — avoid heavy jobs on docs/assets-only changes for PR/push
  # --------------------------------------------------------------------------
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.docs }}
      assets: ${{ steps.filter.outputs.assets }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            code:
              - 'src/**'
              - 'configs/**'
              - 'pyproject.toml'
              - 'poetry.lock'
              - '**/*.py'
              - '.github/workflows/**'
              - '!docs/**'
              - '!assets/**'
            docs:
              - 'docs/**'
              - '**/*.md'
            assets:
              - 'assets/**'

  # --------------------------------------------------------------------------
  # 1) Build diagnostics (matrix). Skip on docs/assets-only changes for PR/push.
  # --------------------------------------------------------------------------
  build:
    name: Diagnostics • py${{ matrix.python }}
    needs: changes
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      needs.changes.outputs.code == 'true'
    strategy:
      fail-fast: false
      matrix:
        python: ["3.11", "3.12"]

    env:
      ARTIFACT_DIR: "artifacts/diagnostics/py${{ matrix.python }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Python ${{ matrix.python }}
        id: setup-py
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install "poetry==${{ env.POETRY_VERSION }}"

      - name: Cache Poetry & venv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ matrix.python }}-

      - name: Install dependencies (no dev)
        run: |
          poetry env use "${{ steps.setup-py.outputs.python-path }}"
          poetry install --no-interaction --no-ansi --without dev

      - name: Versions
        run: |
          python --version
          poetry --version
          poetry run python - <<'PY'
import sys, platform, importlib, json
mods = ("torch","numpy","pandas","matplotlib")
info={"platform": platform.platform(), "python": sys.version.replace("\n"," ")}
for m in mods:
    try:
        mod=importlib.import_module(m)
        info[m]=getattr(mod,"__version__", "n/a")
    except Exception:
        info[m]="not installed"
print(json.dumps(info, indent=2))
PY

      - name: Validate .env (safe no-op if missing)
        run: |
          if [ -f scripts/validate_env.py ]; then
            poetry run python scripts/validate_env.py
          else
            echo "No scripts/validate_env.py — skipping."
          fi

      - name: Optional DVC pull
        run: |
          python -m pip install --upgrade "dvc[all]" || python -m pip install --upgrade dvc
          dvc --version || true
          dvc pull --run-cache --force || true

      - name: Prepare artifact folders
        run: |
          mkdir -p "${ARTIFACT_DIR}" "${DIAG_DIR}"

      - name: CLI selftest (fast)
        run: |
          poetry run spectramind selftest --fast 2>&1 | tee "${ARTIFACT_DIR}/selftest_fast.log"

      - name: Choose preset & overrides
        id: choose
        run: |
          PRESET="${{ github.event.inputs.preset }}"
          if [ -z "$PRESET" ]; then
            PRESET="light"
          fi
          EXTRA="${{ github.event.inputs.extra_overrides }}"
          [ -z "$EXTRA" ] && EXTRA="${DEFAULT_OVERRIDES}"
          echo "preset=$PRESET" >> $GITHUB_OUTPUT
          echo "overrides=$EXTRA" >> $GITHUB_OUTPUT
          echo "Using preset: $PRESET"
          echo "Using overrides: $EXTRA"

      - name: Train minimal model for diagnostics (fast)
        run: |
          poetry run spectramind train \
            ablation=${{ steps.choose.outputs.preset }} \
            +training.epochs=1 \
            ${{ steps.choose.outputs.overrides }} \
            --device ${DEVICE} \
            --outdir "${ARTIFACT_DIR}" 2>&1 | tee "${ARTIFACT_DIR}/train_fast.log"

      - name: Generate diagnostics — smoothness
        run: |
          poetry run spectramind diagnose smoothness --outdir "${ARTIFACT_DIR}" 2>&1 | tee -a "${ARTIFACT_DIR}/diagnostics.log"

      - name: Generate diagnostics — dashboard (HTML)
        run: |
          # PRs/pushes default to CI-light; schedule/dispatch may try full then fallback
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            poetry run spectramind diagnose dashboard --outdir "${ARTIFACT_DIR}" \
              2>&1 | tee -a "${ARTIFACT_DIR}/diagnostics.log" || \
            poetry run spectramind diagnose dashboard --no-umap --no-tsne --outdir "${ARTIFACT_DIR}" \
              2>&1 | tee -a "${ARTIFACT_DIR}/diagnostics.log" || true
          else
            poetry run spectramind diagnose dashboard --no-umap --no-tsne --outdir "${ARTIFACT_DIR}" \
              2>&1 | tee -a "${ARTIFACT_DIR}/diagnostics.log"
          fi

      - name: Node/Mermaid diagrams (optional)
        run: |
          if command -v npm >/dev/null 2>&1 && [ -f package.json ]; then
            npm ci || npm i
            if make -q node-diagrams 2>/dev/null; then make node-diagrams; fi
            mkdir -p "${ARTIFACT_DIR}/diagrams"
            cp -a outputs/diagrams/* "${ARTIFACT_DIR}/diagrams/" 2>/dev/null || true
          else
            echo "Skipping node/mermaid (npm or package.json not found)"
          fi

      - name: Collate artifacts
        run: |
          # Prefer artifacts in DIAG_DIR or ARTIFACT_DIR; copy to ARTIFACT_DIR
          for p in \
            "${DIAG_DIR}"/*.{html,png,svg,json,csv} \
            "${ARTIFACT_DIR}"/*.{html,png,svg,json,csv} \
          ; do
            [ -f "$p" ] && cp -v "$p" "${ARTIFACT_DIR}/" || true
          done
          # optional logs & run hash
          [ -f logs/v50_debug_log.md ] && cp -v logs/v50_debug_log.md "${ARTIFACT_DIR}/" || true
          [ -f outputs/run_hash_summary_v50.json ] && cp -v outputs/run_hash_summary_v50.json "${ARTIFACT_DIR}/" || true

      - name: Summarize diagnostics run
        run: |
          {
            echo "## SpectraMind V50 — Diagnostics Summary"
            echo "- Date (UTC): $(date -u)"
            echo "- Python: ${{ matrix.python }}"
            echo "- Preset: ${{ steps.choose.outputs.preset }}"
            echo "- Device: ${DEVICE}"
            echo "- Overrides: ${{ steps.choose.outputs.overrides }}"
            echo ""
            echo "### Files"
            ls -lh "${ARTIFACT_DIR}" || true
          } > "${ARTIFACT_DIR}/summary.md"
          cat "${ARTIFACT_DIR}/summary.md" >> "$GITHUB_STEP_SUMMARY"

      - name: Upload diagnostics artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-py${{ matrix.python }}
          path: ${{ env.ARTIFACT_DIR }}
          if-no-files-found: warn
          retention-days: 30

  # --------------------------------------------------------------------------
  # 2) Optional fast ablation pass, attached to diagnostics (sched/dispatch)
  # --------------------------------------------------------------------------
  ablate:
    name: Ablation Leaderboard (scheduled/manual)
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && inputs.run_ablation == 'true')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install "poetry==${{ env.POETRY_VERSION }}"
          poetry install --no-interaction --no-ansi --without dev
      - name: Run ablation (fast grid)
        run: |
          poetry run spectramind ablate \
            ablation=fast_eval \
            +grid.enable=false \
            export.outdir="outputs/ablate" \
            2>&1 | tee "ablation_fast_eval.log" || true
      - name: Upload ablation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ablation-leaderboard
          path: |
            outputs/ablate/**
            ablation_fast_eval.log
          if-no-files-found: ignore
          retention-days: 30

  # --------------------------------------------------------------------------
  # 3) Aggregate artifact index for convenient browsing in Actions UI
  # --------------------------------------------------------------------------
  aggregate:
    name: Aggregate Diagnostics Index
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    steps:
      - name: Download diagnostics artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: diagnostics-py*
          merge-multiple: true

      - name: Build aggregated index
        run: |
          mkdir -p aggregated
          {
            echo "# SpectraMind V50 — Diagnostics Index"
            echo ""
            echo "_Generated: $(date -u)_"
            echo ""
            if [ -d artifacts ]; then
              find artifacts -type f -maxdepth 6 | sed 's/^/- /'
            else
              echo "- No artifacts folder found"
            fi
          } > aggregated/DIAGNOSTICS_INDEX.md
          echo "Created aggregated/DIAGNOSTICS_INDEX.md"
          head -n 100 aggregated/DIAGNOSTICS_INDEX.md || true

      - name: Upload aggregated index
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-aggregated
          path: aggregated/DIAGNOSTICS_INDEX.md
          if-no-files-found: warn
          retention-days: 30
```
