# .github/workflows/diagnostics.yml
# SpectraMind V50 — Diagnostics Workflow
# Generates HTML dashboards and diagnostic artifacts (UMAP/t‑SNE, GLL heatmaps, SHAP, symbolic overlays)
# on a small, CI‑safe slice of data. Artifacts are uploaded for review.

name: diagnostics

on:
  workflow_dispatch:
    inputs:
      extra_overrides:
        description: "Optional Hydra overrides (e.g., +data.split=toy +diagnostics.light=true)"
        type: string
        required: false
        default: "+diagnostics.light=true +data.split=toy"
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "**" ]
  schedule:
    # Weekly diagnostics snapshot (Sundays 07:00 UTC)
    - cron: "0 7 * * 0"

permissions:
  contents: read

concurrency:
  group: diagnostics-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Diagnostics • py${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    env:
      POETRY_VIRTUALENVS_IN_PROJECT: "true"
      POETRY_NO_INTERACTION: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_NO_PYTHON_VERSION_WARNING: "1"
      HYDRA_FULL_ERROR: "1"
      # Diagnostics output
      DIAG_DIR: "outputs/diagnostics"
      ARTIFACT_DIR: "artifacts/diagnostics/py${{ matrix.python-version }}"
      # Keep default fast settings; allow workflow_dispatch to add more
      DEFAULT_OVERRIDES: "+diagnostics.light=true +data.split=toy"
      DEVICE: "cpu"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pipx
        uses: pipxproject/action-install-pipx@v1

      - name: Install Poetry
        run: pipx install poetry==1.8.3

      - name: Cache Poetry & venv
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          poetry env use "${{ steps.setup-python.outputs.python-path }}"
          poetry install --no-interaction

      - name: Show versions
        run: |
          python --version
          poetry --version
          poetry run python -c "import sys, platform; print('platform:', platform.platform()); print('python:', sys.version.replace('\\n',' '))"
          poetry run python - <<'PY'
          import importlib, json, sys
          info={}
          for m in ("torch","numpy","pandas","matplotlib"):
              try:
                  mod=importlib.import_module(m)
                  info[m]=getattr(mod,"__version__", "n/a")
              except Exception:
                  info[m]="not installed"
          print(json.dumps(info, indent=2))
          PY

      - name: Pipeline selftest (fast)
        run: |
          poetry run spectramind test --fast

      - name: Prepare artifact folders
        run: |
          mkdir -p "${ARTIFACT_DIR}"
          mkdir -p "${DIAG_DIR}"

      - name: Train minimal model for diagnostics (fast)
        run: |
          # Keep this lean to ensure CI completes quickly; merge user overrides if provided.
          OVERRIDES="${DEFAULT_OVERRIDES} ${{ inputs.extra_overrides }}"
          echo "Using overrides: ${OVERRIDES}"
          poetry run spectramind train \
            +training.epochs=1 \
            ${OVERRIDES} \
            --device ${DEVICE} \
            --outdir "${ARTIFACT_DIR}"

      - name: Generate diagnostics — smoothness
        run: |
          poetry run spectramind diagnose smoothness \
            --outdir "${ARTIFACT_DIR}"

      - name: Generate diagnostics — dashboard (HTML)
        run: |
          # Prefer a light dashboard (skip heavy projections) but attempt full if available
          poetry run spectramind diagnose dashboard \
            --no-umap --no-tsne \
            --outdir "${ARTIFACT_DIR}" || \
          poetry run spectramind diagnose dashboard \
            --outdir "${ARTIFACT_DIR}" || true

      - name: Copy common artifacts
        run: |
          # Copy known diagnostics outputs if they exist
          for p in \
            "${DIAG_DIR}"/*.html \
            "${DIAG_DIR}"/*.png \
            "${DIAG_DIR}"/*.svg \
            "${DIAG_DIR}"/*.json \
            "${DIAG_DIR}"/*.csv \
            "${ARTIFACT_DIR}"/*.html \
            "${ARTIFACT_DIR}"/*.png \
            "${ARTIFACT_DIR}"/*.svg \
            "${ARTIFACT_DIR}"/*.json \
            "${ARTIFACT_DIR}"/*.csv \
          ; do
            [ -f "$p" ] && cp -v "$p" "${ARTIFACT_DIR}/" || true
          done

      - name: Summarize diagnostics run
        run: |
          {
            echo "SpectraMind V50 — Diagnostics Summary";
            date;
            echo "Python: ${{ matrix.python-version }}";
            echo "Device: ${DEVICE}";
            echo "Artifacts:";
            ls -lh "${ARTIFACT_DIR}" || true;
          } > "${ARTIFACT_DIR}/summary.txt"
          cat "${ARTIFACT_DIR}/summary.txt"

      - name: Upload diagnostics artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-py${{ matrix.python-version }}
          path: ${{ env.ARTIFACT_DIR }}
          if-no-files-found: warn
          retention-days: 14

  aggregate:
    name: Aggregate Diagnostics Index
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download diagnostics artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: diagnostics-py*
          merge-multiple: true

      - name: Build aggregated index
        run: |
          mkdir -p aggregated
          {
            echo "# SpectraMind V50 — Diagnostics Index"
            echo ""
            echo "_Generated: $(date -u)_"
            echo ""
            find artifacts -type f -maxdepth 3 | sed 's/^/- /'
          } > aggregated/DIAGNOSTICS_INDEX.md
          echo "Created aggregated/DIAGNOSTICS_INDEX.md"
          head -n 40 aggregated/DIAGNOSTICS_INDEX.md || true

      - name: Upload aggregated index
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-aggregated
          path: aggregated/DIAGNOSTICS_INDEX.md
          if-no-files-found: warn
          retention-days: 30