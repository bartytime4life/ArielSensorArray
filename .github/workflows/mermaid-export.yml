upgrade, # ==============================================================================

# SpectraMind V50 — Mermaid Export (light ✦ dark • SVG/PNG/PDF • optimized)

# Renders from:

# • Markdown-embedded mermaid fences (optional: scripts/export\_mermaid.py)

# • Raw .mmd sources (via @mermaid-js/mermaid-cli)

# Triggers on docs/diagrams changes, PRs (preview), and manual dispatch.

# Features:

# • Deterministic IDs via .mermaidrc\* (light/dark), fallback-safe if missing

# • Caching: npm + Puppeteer + pip

# • Optional SVG optimization (svgo) and PNG compression (pngquant)

# • Artifact upload, gated auto-commit to main, PR with rendered assets on branches

# • Rich run summary (counts, sizes) and fork-safe operation

# ==============================================================================

name: Mermaid Export

on:
push:
branches: \[ "main" ]
paths:
\- "ARCHITECTURE.md"
\- "README.md"
\- "docs/**/\*.md"
\- "docs/**/*.mmd"
\- "diagrams/\*\*/*.mmd"
\- "scripts/export\_mermaid.py"
\- ".mermaidrc.json"
\- ".mermaidrc-dark.json"
\- "package.json"
\- "package-lock.json"
pull\_request:
branches: \[ "**" ]
paths:
\- "ARCHITECTURE.md"
\- "README.md"
\- "docs/**/*.md"
\- "docs/\*\*/*.mmd"
\- "diagrams/\*\*/\*.mmd"
\- "scripts/export\_mermaid.py"
\- ".mermaidrc.json"
\- ".mermaidrc-dark.json"
\- "package.json"
\- "package-lock.json"
workflow\_dispatch:
inputs:
files:
description: "Space-separated Markdown files to scan (default: ARCHITECTURE.md README.md)"
required: false
default: "ARCHITECTURE.md README.md"
type: string
formats:
description: "Output formats (space-separated): svg png pdf"
required: false
default: "svg"
type: string
png\_scale:
description: "PNG scale (mmdc -s, e.g., 2)"
required: false
default: "2"
type: string
outdir:
description: "Output directory"
required: false
default: "docs/diagrams"
type: string
auto\_commit:
description: "Commit rendered diagrams back (main only)"
required: false
default: "true"
type: choice
options: \["false", "true"]
create\_pr:
description: "Create a PR with rendered diagrams on non-main branches"
required: false
default: "true"
type: choice
options: \["false", "true"]
svgo\_optimize:
description: "Optimize SVGs with svgo"
required: false
default: "true"
type: choice
options: \["false", "true"]
png\_optimize:
description: "Compress PNGs with pngquant"
required: false
default: "true"
type: choice
options: \["false", "true"]

permissions:
contents: write
pull-requests: write

concurrency:
group: mermaid-export-\${{ github.ref }}
cancel-in-progress: true

jobs:
render:
name: Render Mermaid diagrams
runs-on: ubuntu-latest
timeout-minutes: 30

```
env:
  # Inputs (with safe fallbacks for push/PR events)
  MD_FILES:  ${{ inputs.files || 'ARCHITECTURE.md README.md' }}
  OUT_DIR:   ${{ inputs.outdir || 'docs/diagrams' }}
  FORMATS:   ${{ inputs.formats || 'svg' }}
  PNG_SCALE: ${{ inputs.png_scale || '2' }}

  # Config paths (root)
  RC_LIGHT: .mermaidrc.json
  RC_DARK:  .mermaidrc-dark.json

  # Render roots
  RAW_GLOBS: "diagrams/**/*.mmd docs/**/*.mmd"

  # Flags
  DO_SVGO: ${{ inputs.svgo_optimize || 'true' }}
  DO_PNGQ: ${{ inputs.png_optimize || 'true' }}

steps:
  - name: Checkout
    uses: actions/checkout@v4
    with:
      fetch-depth: 0

  - name: Ensure output directories
    run: |
      mkdir -p "${OUT_DIR}/light" "${OUT_DIR}/dark" "${OUT_DIR}/raw/light" "${OUT_DIR}/raw/dark"

  # ---------- Runtimes & Caches ----------
  - name: Setup Node.js (20) with npm cache
    uses: actions/setup-node@v4
    with:
      node-version: "20"
      cache: "npm"

  - name: Setup Python (3.12) with pip cache
    uses: actions/setup-python@v5
    with:
      python-version: "3.12"
      cache: "pip"

  - name: Cache Mermaid CLI (Puppeteer) + npm
    uses: actions/cache@v4
    with:
      path: |
        ~/.cache/puppeteer
        ~/.npm
      key: mmdc-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
      restore-keys: |
        mmdc-${{ runner.os }}-

  # ---------- Install deps ----------
  - name: Install npm deps (with fallback)
    run: |
      if [ -f package.json ]; then
        npm ci
      else
        npm init -y
        npm i -D @mermaid-js/mermaid-cli@^10
      fi
      # Optional optimizers installed on demand later

  - name: Install Python deps (Markdown fence renderer optional)
    run: |
      python -m pip install --upgrade pip
      if [ -f "scripts/export_mermaid.py" ]; then
        python -m pip install markdown-it-py beautifulsoup4
      fi

  - name: Show tool versions
    run: |
      npx --yes @mermaid-js/mermaid-cli -V || true
      node --version
      npm --version
      python --version

  # ---------- Guard .mermaidrc presence (fallback-safe) ----------
  - name: Ensure .mermaidrc defaults (if missing)
    run: |
      if [ ! -f "${RC_LIGHT}" ]; then
        cat > "${RC_LIGHT}" <<'JSON'
        {
          "theme": "base",
          "startOnLoad": false,
          "deterministicIds": true,
          "deterministicIDSeed": "spectramind-v50",
          "logLevel": "error",
          "securityLevel": "strict",
          "themeVariables": { "background": "transparent" }
        }
        JSON
      fi
      if [ ! -f "${RC_DARK}" ]; then
        cat > "${RC_DARK}" <<'JSON'
        {
          "theme": "dark",
          "startOnLoad": false,
          "deterministicIds": true,
          "deterministicIDSeed": "spectramind-v50",
          "logLevel": "error",
          "securityLevel": "strict",
          "themeVariables": { "background": "transparent" }
        }
        JSON
      fi

  # ---------- Render Mermaid from Markdown fences (if script present) ----------
  - name: Render Mermaid from Markdown (light)
    if: hashFiles('scripts/export_mermaid.py') != ''
    run: |
      echo ">>> Rendering Markdown fences (light): ${MD_FILES}"
      export MERMAID_RC="${RC_LIGHT}"
      export MERMAID_OUTDIR="${OUT_DIR}/light"
      export MERMAID_FORMATS="${FORMATS}"
      python scripts/export_mermaid.py ${MD_FILES}

  - name: Render Mermaid from Markdown (dark)
    if: hashFiles('scripts/export_mermaid.py') != ''
    run: |
      echo ">>> Rendering Markdown fences (dark): ${MD_FILES}"
      export MERMAID_RC="${RC_DARK}"
      export MERMAID_OUTDIR="${OUT_DIR}/dark"
      export MERMAID_FORMATS="${FORMATS}"
      python scripts/export_mermaid.py ${MD_FILES}

  # ---------- Find raw .mmd ----------
  - name: Find .mmd files
    id: findmmd
    shell: bash
    run: |
      shopt -s globstar nullglob
      files=()
      for g in $RAW_GLOBS; do
        for f in $g; do files+=("$f"); done
      done
      printf '%s\n' "${files[@]}" > mmd_list.txt
      echo "count=${#files[@]}" >> $GITHUB_OUTPUT

  # ---------- Render raw .mmd via mmdc ----------
  - name: Render .mmd (light + dark) to requested formats
    if: steps.findmmd.outputs.count != '0'
    shell: bash
    run: |
      set -euo pipefail
      while IFS= read -r f; do
        [ -z "$f" ] && continue
        base="$(basename "$f" .mmd)"
        # Light
        for fmt in ${FORMATS}; do
          case "$fmt" in
            svg)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_LIGHT}" -i "$f" -o "${OUT_DIR}/raw/light/${base}.light.svg"
              ;;
            png)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_LIGHT}" -i "$f" -o "${OUT_DIR}/raw/light/${base}.light.png" -s "${PNG_SCALE}"
              ;;
            pdf)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_LIGHT}" -i "$f" -o "${OUT_DIR}/raw/light/${base}.light.pdf"
              ;;
            *)
              echo "Unknown format: $fmt" >&2; exit 1;;
          esac
        done
        # Dark
        for fmt in ${FORMATS}; do
          case "$fmt" in
            svg)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_DARK}" -i "$f" -o "${OUT_DIR}/raw/dark/${base}.dark.svg"
              ;;
            png)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_DARK}" -i "$f" -o "${OUT_DIR}/raw/dark/${base}.dark.png" -s "${PNG_SCALE}"
              ;;
            pdf)
              npx --yes @mermaid-js/mermaid-cli -c "${RC_DARK}" -i "$f" -o "${OUT_DIR}/raw/dark/${base}.dark.pdf"
              ;;
          esac
        done
      done < mmd_list.txt

  # ---------- Optimize (optional) ----------
  - name: Optimize SVGs (svgo)
    if: ${{ (inputs.svgo_optimize == 'true' || inputs.svgo_optimize == '') }}
    run: |
      npm i -D svgo@^3
      mapfile -t svgs < <(find "${OUT_DIR}" -type f -name '*.svg' -print)
      if ((${#svgs[@]})); then
        npx --yes svgo --config='{"multipass": true}' "${svgs[@]}" || true
      fi

  - name: Compress PNGs (pngquant)
    if: ${{ (inputs.png_optimize == 'true' || inputs.png_optimize == '') }}
    run: |
      sudo apt-get update -y && sudo apt-get install -y pngquant
      find "${OUT_DIR}" -type f -name '*.png' -print0 | xargs -0 -I{} pngquant --force --skip-if-larger --ext .png {} || true

  # ---------- List output ----------
  - name: List rendered outputs
    run: |
      echo ">>> Rendered files in ${OUT_DIR}:"
      find "${OUT_DIR}" -type f \( -name '*.svg' -o -name '*.png' -o -name '*.pdf' \) -print || true

  # ---------- Upload artifacts ----------
  - name: Upload rendered diagrams
    uses: actions/upload-artifact@v4
    with:
      name: mermaid-diagrams
      path: ${{ env.OUT_DIR }}
      if-no-files-found: warn
      retention-days: 21

  # ---------- Auto-commit to main (gated) ----------
  - name: Auto-commit diagrams (main only + enabled)
    if: github.ref == 'refs/heads/main' && (inputs.auto_commit == 'true' || inputs.auto_commit == '')
    uses: stefanzweifel/git-auto-commit-action@v5
    with:
      commit_message: "ci(diagrams): export Mermaid diagrams (light+dark)"
      file_pattern: |
        ${{ env.OUT_DIR }}/**/*.svg
        ${{ env.OUT_DIR }}/**/*.png
        ${{ env.OUT_DIR }}/**/*.pdf
      branch: main

  # ---------- Detect changes on PR branches ----------
  - name: Detect diagram changes
    id: detect
    if: github.ref != 'refs/heads/main'
    run: |
      git add "${OUT_DIR}"
      if git diff --cached --quiet; then
        echo "changed=false" >> $GITHUB_OUTPUT
      else
        echo "changed=true" >> $GITHUB_OUTPUT
      fi

  # ---------- Create PR with rendered assets ----------
  - name: Create pull request with rendered diagrams
    if: >
      github.ref != 'refs/heads/main' &&
      steps.detect.outputs.changed == 'true' &&
      (inputs.create_pr == 'true' || inputs.create_pr == '')
    uses: peter-evans/create-pull-request@v6
    with:
      commit-message: "ci(diagrams): export Mermaid diagrams (light+dark)"
      title: "ci(diagrams): update rendered Mermaid diagrams"
      body: |
        This PR updates rendered Mermaid diagrams from Markdown fences and .mmd sources.

        - Formats: `${{ env.FORMATS }}`
        - Output dir: `${{ env.OUT_DIR }}`
        - Themes: `.mermaidrc.json` (light), `.mermaidrc-dark.json` (dark)
        - Optimizations: SVG=${{ inputs.svgo_optimize || 'true' }}, PNG=${{ inputs.png_optimize || 'true' }}
        - Triggered by: ${{ github.event_name }} on `${{ github.ref_name }}`

        Download the workflow artifact **mermaid-diagrams** for local preview.
      add-paths: |
        ${{ env.OUT_DIR }}/**/*.svg
        ${{ env.OUT_DIR }}/**/*.png
        ${{ env.OUT_DIR }}/**/*.pdf
      branch: chore/diagrams/${{ github.run_id }}
      base: ${{ github.ref_name }}
      delete-branch: true

  # ---------- Summary ----------
  - name: Build run summary
    if: always()
    run: |
      echo "### Mermaid Export Summary" >> "$GITHUB_STEP_SUMMARY"
      echo "" >> "$GITHUB_STEP_SUMMARY"
      echo "- Formats: \`${{ env.FORMATS }}\`" >> "$GITHUB_STEP_SUMMARY"
      echo "- Output dir: \`${{ env.OUT_DIR }}\`" >> "$GITHUB_STEP_SUMMARY"
      echo "- PNG scale: \`${{ env.PNG_SCALE }}\`" >> "$GITHUB_STEP_SUMMARY"
      echo "- SVG optimize: \`${{ env.DO_SVGO }}\` • PNG optimize: \`${{ env.DO_PNGQ }}\`" >> "$GITHUB_STEP_SUMMARY"
      echo "" >> "$GITHUB_STEP_SUMMARY"
      if [ -d "${OUT_DIR}" ]; then
        for ext in svg png pdf; do
          COUNT=$(find "${OUT_DIR}" -type f -name "*.${ext}" | wc -l | tr -d ' ')
          SIZE=$(find "${OUT_DIR}" -type f -name "*.${ext}" -printf "%s\n" 2>/dev/null | awk '{s+=$1} END {print s+0}')
          echo "- ${ext^^}: ${COUNT} file(s), total bytes: ${SIZE}" >> "$GITHUB_STEP_SUMMARY"
        done
      else
        echo "_No outputs produced._" >> "$GITHUB_STEP_SUMMARY"
      fi
```
