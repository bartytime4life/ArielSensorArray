# .github/workflows/mermaid-export.yml
# ==============================================================================
# SpectraMind V50 — Mermaid Export (v2)
# Renders Mermaid diagrams (SVG/PNG/PDF) from:
#  • Markdown-embedded code fences (via scripts/export_mermaid.py)
#  • Raw .mmd sources (via @mermaid-js/mermaid-cli)
# Triggers on doc changes, PRs (to validate), and manual dispatch with knobs.
# Adds caching, matrix formats, theme support, PR previews, and commit gating.
# ==============================================================================

name: Mermaid Export

on:
  push:
    branches: [ "main" ]
    paths:
      - "ARCHITECTURE.md"
      - "README.md"
      - "docs/**/*.md"
      - "docs/**/*.mmd"
      - "diagrams/**/*.mmd"
      - "scripts/export_mermaid.py"
      - ".mermaidrc*"
      - "package.json"
      - "package-lock.json"
  pull_request:
    branches: [ "**" ]
    paths:
      - "ARCHITECTURE.md"
      - "README.md"
      - "docs/**/*.md"
      - "docs/**/*.mmd"
      - "diagrams/**/*.mmd"
      - "scripts/export_mermaid.py"
      - ".mermaidrc*"
      - "package.json"
      - "package-lock.json"
  workflow_dispatch:
    inputs:
      files:
        description: "Space-separated Markdown files to scan (default scans ARCHITECTURE.md README.md)."
        required: false
        default: "ARCHITECTURE.md README.md"
        type: string
      formats:
        description: "Output formats (space-separated): svg png pdf"
        required: false
        default: "svg"
        type: string
      export_png_scale:
        description: "PNG scale (mmdc -s, e.g., 2)."
        required: false
        default: "2"
        type: string
      theme:
        description: "Mermaid theme: default|dark|forest|neutral (blank = .mermaidrc)."
        required: false
        default: ""
        type: string
      outdir:
        description: "Output directory."
        required: false
        default: "docs/diagrams"
        type: string
      auto_commit:
        description: "Commit rendered diagrams back (main only)."
        required: false
        default: "true"
        type: choice
        options: ["false", "true"]
      create_pr:
        description: "Create a PR with rendered diagrams on non-main branches."
        required: false
        default: "true"
        type: choice
        options: ["false", "true"]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: mermaid-export-${{ github.ref }}
  cancel-in-progress: true

jobs:
  render:
    name: Render Mermaid diagrams
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      MD_FILES: ${{ inputs.files || 'ARCHITECTURE.md README.md' }}
      OUT_DIR:  ${{ inputs.outdir || 'docs/diagrams' }}
      FORMATS:  ${{ inputs.formats || 'svg' }}
      THEME:    ${{ inputs.theme || '' }}
      PNG_SCALE: ${{ inputs.export_png_scale || '2' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure output dir
        run: mkdir -p "${OUT_DIR}"

      # ---------- Caches ----------
      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Use Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      # Cache mmdc fonts and puppeteer chromium to speed up runs
      - name: Cache Mermaid CLI artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/puppeteer
            ~/.npm
          key: mmdc-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            mmdc-${{ runner.os }}-

      # ---------- Install deps ----------
      - name: Install npm deps (if package.json present)
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            npm init -y
            npm i -D @mermaid-js/mermaid-cli@^10
          fi

      - name: Install Python deps (if script exists)
        run: |
          python -m pip install --upgrade pip
          if [ -f "scripts/export_mermaid.py" ]; then
            # Add your Python requirements here if any (e.g., markdown-it, beautifulsoup4)
            python -m pip install markdown-it-py beautifulsoup4
          fi

      # ---------- Render Markdown-embedded diagrams ----------
      - name: Render Mermaid from Markdown (export_mermaid.py)
        run: |
          if [ -f "scripts/export_mermaid.py" ]; then
            echo ">>> Rendering Mermaid fences from Markdown files:"
            echo "FILES=${MD_FILES}"
            echo "OUT_DIR=${OUT_DIR}  THEME='${THEME}'  FORMATS='${FORMATS}'"
            # Respect THEME & FORMATS via env vars if your script supports them.
            export MERMAID_THEME="${THEME}"
            export MERMAID_FORMATS="${FORMATS}"
            export MERMAID_OUTDIR="${OUT_DIR}"
            python scripts/export_mermaid.py ${MD_FILES}
          else
            echo "scripts/export_mermaid.py not found — skipping Markdown rendering"
          fi

      # ---------- Render raw .mmd sources via mmdc ----------
      - name: Find .mmd files
        id: findmmd
        shell: bash
        run: |
          mapfile -t MMD < <(git ls-files -- 'diagrams/**/*.mmd' 'docs/**/*.mmd' | tr -d '\r' || true)
          echo "count=${#MMD[@]}" >> $GITHUB_OUTPUT
          printf '%s\n' "${MMD[@]}" > mmd_list.txt || true
          echo "mmd_list=$(paste -sd ' ' mmd_list.txt)" >> $GITHUB_OUTPUT

      - name: Render .mmd to requested formats
        if: steps.findmmd.outputs.count != '0'
        shell: bash
        run: |
          set -euo pipefail
          echo ">>> Rendering raw .mmd files to: ${FORMATS}"
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            base="$(basename "$f" .mmd)"
            # Theme flag only if provided (else rely on .mermaidrc)
            THEME_FLAG=""
            if [ -n "${THEME}" ]; then
              THEME_FLAG="--theme ${THEME}"
            fi
            for fmt in ${FORMATS}; do
              case "$fmt" in
                svg)
                  npx --yes @mermaid-js/mermaid-cli -i "$f" -o "${OUT_DIR}/${base}.svg" ${THEME_FLAG}
                  ;;
                png)
                  npx --yes @mermaid-js/mermaid-cli -i "$f" -o "${OUT_DIR}/${base}.png" ${THEME_FLAG} -s "${PNG_SCALE}"
                  ;;
                pdf)
                  npx --yes @mermaid-js/mermaid-cli -i "$f" -o "${OUT_DIR}/${base}.pdf" ${THEME_FLAG}
                  ;;
                *)
                  echo "Unknown format: $fmt" >&2
                  exit 1
                  ;;
              esac
            done
          done < mmd_list.txt

      # ---------- List output ----------
      - name: List output
        run: |
          echo ">>> Rendered files in ${OUT_DIR}:"
          find "${OUT_DIR}" -maxdepth 2 -type f \( -name '*.svg' -o -name '*.png' -o -name '*.pdf' \) -print || true

      # ---------- Upload artifact ----------
      - name: Upload diagrams artifact
        uses: actions/upload-artifact@v4
        with:
          name: mermaid-diagrams
          path: ${{ env.OUT_DIR }}
          if-no-files-found: warn
          retention-days: 21

      # ---------- Auto-commit to main (gated) ----------
      - name: Auto-commit diagrams (main only + enabled)
        if: github.ref == 'refs/heads/main' && (inputs.auto_commit == 'true' || inputs.auto_commit == '')
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci(diagrams): export Mermaid diagrams"
          file_pattern: |
            ${{ env.OUT_DIR }}/**/*.svg
            ${{ env.OUT_DIR }}/**/*.png
            ${{ env.OUT_DIR }}/**/*.pdf
          branch: main

      # ---------- Detect diagram changes on PR branches ----------
      - name: Detect diagram changes
        id: detect
        if: github.ref != 'refs/heads/main'
        run: |
          git add "${OUT_DIR}"
          if git diff --cached --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      # ---------- Create PR with rendered assets ----------
      - name: Create pull request with rendered diagrams
        if: >
          github.ref != 'refs/heads/main' &&
          steps.detect.outputs.changed == 'true' &&
          (inputs.create_pr == 'true' || inputs.create_pr == '')
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "ci(diagrams): export Mermaid diagrams"
          title: "ci(diagrams): update rendered Mermaid diagrams"
          body: |
            This PR updates rendered Mermaid diagrams from the latest Markdown/mmd sources.

            - Renderer: @mermaid-js/mermaid-cli + scripts/export_mermaid.py
            - Formats: `${{ env.FORMATS }}`
            - Theme: `${{ env.THEME || '.mermaidrc' }}`
            - Output dir: `${{ env.OUT_DIR }}`
            - Triggered by: ${{ github.event_name }} on `${{ github.ref_name }}`

            <details><summary>Preview links</summary>

            Download the artifact from the workflow run named **mermaid-diagrams** to preview all assets locally.

            </details>
          add-paths: |
            ${{ env.OUT_DIR }}/**/*.svg
            ${{ env.OUT_DIR }}/**/*.png
            ${{ env.OUT_DIR }}/**/*.pdf
          branch: chore/diagrams/${{ github.run_id }}
          base: ${{ github.ref_name }}
          delete-branch: true