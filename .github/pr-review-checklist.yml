.github/workflows/pr-review-checklist.yml

—————————————————————————–

Auto-post (and keep updated) the PR Review Checklist on each pull request.

- Triggers on PR open/synchronize/reopen, edits, draft/ready toggles, and label changes.

- Uses pull_request_target so it can comment on PRs from forks without checking out code.

- Updates an existing bot comment (idempotent) instead of spamming new ones.

- Skips if PR has label no-auto-checklist.

- Hardened permissions (issues:write only), safe concurrency, and pagination for long threads.

—————————————————————————–

name: PR Review Checklist

on:
pull_request_target:
types:
- opened
- reopened
- synchronize
- labeled
- unlabeled
- edited
- ready_for_review
- converted_to_draft

permissions:
contents: read
pull-requests: read
issues: write

concurrency:
group: pr-review-checklist-${{ github.event.pull_request.number || github.ref }}
cancel-in-progress: true

jobs:
post-checklist:
if: >-
github.event.pull_request &&
!contains(github.event.pull_request.labels.*.name, ‘no-auto-checklist’)
runs-on: ubuntu-latest

steps:
  - name: Build checklist body
    id: body
    run: |
      cat > body.md <<'MD'
      <!-- SPECTRAMIND_V50_REVIEW_CHECKLIST:DO-NOT-REMOVE -->
      # ✅ SpectraMind V50 — PR Review Checklist (Quick Triage)

      This **one-pager** gives reviewers a **fast triage table** for pull requests.  
      Use alongside the full **[Pull Request Review Guide](.github/PULL_REQUEST_REVIEW_GUIDE.md)**.

      Mark ✅ = pass, ❌ = fail, ⚠️ = needs clarification.

      ---

      ## 📝 Metadata
      | Check | Status |
      |-------|--------|
      | PR title imperative & concise | ☐ |
      | Linked to issue(s)/milestones | ☐ |

      ---

      ## 🎯 Summary & Motivation
      | Check | Status |
      |-------|--------|
      | Rationale clear & scientific context provided | ☐ |
      | Impact on μ/σ, GLL, calibration, runtime, symbolic rules explained | ☐ |

      ---

      ## ⚙️ Design & Reproducibility
      | Check | Status |
      |-------|--------|
      | CLI commands exact & runnable (`spectramind …`) | ☐ |
      | Hydra config diffs shown, no hidden constants | ☐ |
      | DVC stages updated & `dvc repro` passes | ☐ |
      | Run hash recorded in `logs/v50_debug_log.md` | ☐ |

      ---

      ## 🔬 Scientific Integrity & Diagnostics
      | Check | Status |
      |-------|--------|
      | Metrics table filled (baseline vs new) | ☐ |
      | Dashboard/plots attached (HTML, UMAP/t-SNE, FFT, GLL heatmap) | ☐ |
      | Symbolic/physics rules respected (smoothness, nonnegativity, priors) | ☐ |

      ---

      ## 🔄 Compatibility & Risk
      | Check | Status |
      |-------|--------|
      | Breaking changes listed (CLI/config/schema) | ☐ |
      | Migration/fallback path documented | ☐ |
      | Risk assessment & mitigation provided | ☐ |

      ---

      ## 🧪 Tests & Validation
      | Check | Status |
      |-------|--------|
      | Unit tests added/updated, pytest green | ☐ |
      | `spectramind selftest --fast/--deep` passes | ☐ |
      | CI smoke run passes | ☐ |
      | Determinism checked (seeds consistent) | ☐ |

      ---

      ## ⚡ Performance & Runtime
      | Check | Status |
      |-------|--------|
      | Runtime ≤ 9h Kaggle limit | ☐ |
      | Memory/VRAM within container limits | ☐ |
      | Variance across seeds acceptable | ☐ |

      ---

      ## 🛡️ Security & Compliance
      | Check | Status |
      |-------|--------|
      | No secrets/keys in code/configs | ☐ |
      | New deps/actions pinned to versions/SHAs | ☐ |
      | Licenses respected, no PII introduced | ☐ |

      ---

      ## 📚 Docs & Changelog
      | Check | Status |
      |-------|--------|
      | README/docs updated if user-facing | ☐ |
      | CLI `--help` accurate | ☐ |
      | Configs commented inline | ☐ |
      | CHANGELOG updated | ☐ |

      ---

      ## 🚀 Post-Merge Tasks
      | Check | Status |
      |-------|--------|
      | CI pipeline green on main | ☐ |
      | Run hash tagged & artifacts published | ☐ |
      | Dashboard backfilled & linked | ☐ |
      | Stakeholders notified / issues closed | ☐ |

      ---

      ### 🔭 Mission Reminder
      **Every PR must be reproducible, validated, and scientifically safe before merge.**
      MD
      echo "body<<EOF" >> "$GITHUB_OUTPUT"
      cat body.md >> "$GITHUB_OUTPUT"
      echo "EOF" >> "$GITHUB_OUTPUT"

  - name: Create or update checklist comment
    uses: actions/github-script@v7
    with:
      github-token: ${{ secrets.GITHUB_TOKEN }}
      script: |
        /**
         * Idempotently upsert a single checklist comment on the PR.
         * - Finds our prior comment by marker and bot login (paginated).
         * - Updates it if present, otherwise creates a new one.
         * - Safe under pull_request_target with least privileges.
         */
        const marker = '<!-- SPECTRAMIND_V50_REVIEW_CHECKLIST:DO-NOT-REMOVE -->';
        const body = core.getInput('body', { required: true });
        const { owner, repo } = context.repo;
        const issue_number = context.payload.pull_request.number;

        // Resolve bot login once
        const botLogin = (await github.rest.users.getAuthenticated()).data.login;

        // Paginate all comments (handles >100)
        const comments = await github.paginate(
          github.rest.issues.listComments,
          { owner, repo, issue_number, per_page: 100 }
        );

        const existing = comments.find(c =>
          c.user?.login === botLogin && typeof c.body === 'string' && c.body.includes(marker)
        );

        if (existing) {
          await github.rest.issues.updateComment({
            owner,
            repo,
            comment_id: existing.id,
            body
          });
          core.info(`Updated existing checklist comment #${existing.id}`);
        } else {
          const res = await github.rest.issues.createComment({
            owner,
            repo,
            issue_number,
            body
          });
          core.info(`Created new checklist comment #${res.data.id}`);
        }
      body: ${{ steps.body.outputs.body }}