# 🛰️ SpectraMind V50 — `configs/architecture/`

## 0. Purpose & Scope

The `configs/architecture/` directory defines **system-wide architecture blueprints** for the SpectraMind V50 pipeline (NeurIPS 2025 Ariel Data Challenge).
It captures how **scientific models, symbolic constraints, calibration routines, and diagnostic subsystems** are structurally composed, ensuring **reproducibility, modularity, and physical fidelity**.

Every `.yaml` here describes **architectural integration patterns** rather than low-level hyperparameters. Think of these as **orchestration schematics**: they specify how encoders, decoders, fusion layers, constraints, calibration methods, and explainability tools interconnect in a pipeline run.

---

## 1. Directory Layout

```
configs/architecture/
├── README.md                # You are here
├── pipeline.yaml             # End-to-end DAG: ingestion → calibration → training → diagnostics
├── model_arch.yaml           # Defines encoder/decoder families & fusion logic
├── constraints.yaml          # Physics- & symbol-informed loss modules
├── calib_chain.yaml          # Calibration “kill chain” (ADC, flat, dark, COREL, temp scaling)
├── diagnostics.yaml          # FFT, SHAP, symbolic overlays, UMAP/t-SNE projections
├── profiles/
│   ├── fast.yaml             # Lightweight profile (Kaggle quick-run, smoke tests)
│   ├── nominal.yaml          # Default production-grade architecture
│   └── heavy.yaml            # Full diagnostics + ablation/ensemble runs
└── fusion.yaml               # Explicit fusion operator config (concat, cross-attn, gated-sum)
```

---

## 2. Design Philosophy

* **Hydra-Safe Composition** — Every file can be imported via Hydra group syntax:

  ```bash
  spectramind train architecture=pipeline profiles=fast
  ```
* **Separation of Concerns** — Encoders, calibration, constraints, and diagnostics live in separate config groups but are integrated here.
* **Scientific Integrity** — Architecture configs must enforce physical priors (e.g., non-negative flux, FFT smoothness, asymmetry penalties).
* **Reproducibility** — Every architecture choice is version-locked via `run_hash_summary_v50.json` and logged to `logs/v50_debug_log.md`.
* **CLI-First** — All configs are surfaced via the `spectramind` Typer CLI (`--help` exposes options automatically).

---

## 3. Core Components

### 3.1 Encoders

* **FGS1 Mamba SSM** — Long-sequence state-space model for photometric jitter and transit shape.
* **AIRS GNN** — Edge-feature-aware graph network for spectral correlations.

### 3.2 Fusion

* Configurable operators (`concat`, `cross_attention`, `gated_sum`).
* Cross-attention allows FGS1 temporal latent → AIRS spectral reasoning.
* Gated sum provides residual fallback.

### 3.3 Decoders

* **Mean (μ) head** — Predicts transmission spectrum (283 bins).
* **Uncertainty (σ) head** — Flow-based or quantile-based; integrates symbolic overlays.

### 3.4 Constraints

* Gaussian Log-Likelihood (GLL).
* Symbolic loss engine: smoothness, non-negativity, asymmetry, photonic alignment .
* FFT-based regularization.
* Conformal uncertainty calibration (COREL).

### 3.5 Calibration Chain

* Dark correction, flat, ADC, nonlinearity, CDS.
* Temperature scaling + COREL calibration overlay  .
* Binwise coverage diagnostics .

### 3.6 Diagnostics

* **FFT & autocorrelation** overlays .
* **SHAP + symbolic fusion overlays** .
* **UMAP/t-SNE projections** with symbolic cluster coloring .
* **HTML dashboard** generated by `generate_html_report.py` .

---

## 4. Usage Examples

**Nominal architecture run**:

```bash
spectramind train architecture=pipeline profiles=nominal
```

**Quick smoke run (CI/Kaggle-safe)**:

```bash
spectramind train architecture=pipeline profiles=fast
```

**Heavy diagnostics run**:

```bash
spectramind diagnose dashboard architecture=diagnostics profiles=heavy
```

---

## 5. Extending

When adding new architectural modules:

1. Create a `.yaml` in this folder (or subfolder).
2. Register it in `pipeline.yaml` under the correct stage.
3. Add to `defaults` in `profiles/*.yaml` for discoverability.
4. Ensure logging + hash capture in `v50_debug_log.md`.
5. Add unit tests in `/tests/architecture/`.

---

## 6. Mermaid Overview

```mermaid
flowchart LR
    A[FGS1 Encoder (Mamba SSM)] --> F[Fusion Layer]
    B[AIRS Encoder (GNN)] --> F
    F --> D1[μ Decoder]
    F --> D2[σ Decoder]
    D1 & D2 --> C[Constraints Engine]
    C --> Cal[Calibration Chain]
    Cal --> Diag[Diagnostics Dashboard]
```

---

✅ **Mission-grade guarantee**: These configs ensure **NASA-level reproducibility**, align with **Hydra best practices**, and integrate symbolic/physics-informed AI methods.

---
