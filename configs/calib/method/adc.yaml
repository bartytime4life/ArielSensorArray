# FILE: configs/calib/method/adc.yaml
# ==============================================================================
# ðŸ”§ ADC (Analog-to-Digital Conversion) â€” Method Config (v1.4, Mission-Grade)
# ------------------------------------------------------------------------------
# Purpose
#   Apply offset & gain normalization (PRNU), optional reference-pixel / overscan
#   correction, response linearization, and (optionally) re-quantize outputs for
#   downstream calibration (dark â†’ flat â†’ CDS â†’ photometry â†’ trace â†’ phase).
#   Adds instrument-aware options, bias/stripe mitigation, smear/bleed handling,
#   uncertainty scaffolding, and rich QC/diagnostics.
#
# Hydra usage (examples)
#   spectramind calibrate calib.method.adc.offset.method=per_channel \
#     calib.method.adc.offset.table_path=data/calib/adc/offsets_per_channel.npy
#   spectramind calibrate calib.method.adc.linearization.method=lut \
#     calib.method.adc.linearization.lut_path=data/calib/adc/lin_lut.npy
#   spectramind calibrate calib.method.adc.overscan.enabled=true \
#     calib.method.adc.overscan.regions.A.y='[0,2047]' calib.method.adc.overscan.regions.A.x='[2048,2095]'
# ==============================================================================

_meta:
  schema_version: "1.4.0"
  last_updated: "${now:%Y-%m-%d}"

adc:
  enabled: true

  # ---------------------------------------------------------------------------
  # Detector I/O & quantization
  # ---------------------------------------------------------------------------
  detector:
    name: "ArielSimCam"
    instrument: "auto"                    # auto | fgs1 | airs
    bit_depth_in: 16
    bit_depth_out: 16
    dtype_out: "float32"                   # float32 | float16 | uint16 | uint32
    conversion_gain_e_per_adu: 1.0         # e-/DN for optional unit conversions
    saturation_level_dn: 65535
    saturation_level_e: 180000.0

  # ---------------------------------------------------------------------------
  # Reference pixels & overscan (optional; generally first)
  # ---------------------------------------------------------------------------
  reference_pixel:
    use: false
    strategy: "border_mean"               # border_mean | mask_mean | strip_per_col | strip_per_row
    border: { top: 4, bottom: 4, left: 4, right: 4 }
    mask_path: "data/calib/adc/reference_pixels_mask.npy"
    strip:
      robust:
        sigma_clip: 4.0
        max_iters: 2
      poly_order: 0

  overscan:
    enabled: false
    regions: {}                           # e.g., A: { y: [0, 2047], x: [2048, 2095] }
    strategy: "median"                    # median | polyfit (fit along columns)
    poly_order: 1
    subtract_per_amp: true
    robust:
      sigma_clip: 4.0
      max_iters: 2

  # ---------------------------------------------------------------------------
  # Per-amplifier handling (optional)
  # ---------------------------------------------------------------------------
  amplifiers:
    enabled: false
    layout: ["A", "B", "C", "D"]
    regions: {}                           # e.g., A: { y: [0, 2047], x: [0, 1023] }
    trim_overscan: true
    per_amp_gain:
      enabled: false
      table_path: "data/calib/adc/gain_per_amp.npy"
    per_amp_offset:
      enabled: false
      table_path: "data/calib/adc/offset_per_amp.npy"
    bias_striping:
      enabled: false
      axis: "row"                         # row | column
      method: "median"                    # median | polynomial
      poly_order: 1

  # ---------------------------------------------------------------------------
  # Offset correction (bias removal)
  #   Order: reference/overscan â†’ offset â†’ gain â†’ linearization
  # ---------------------------------------------------------------------------
  offset:
    method: "per_channel"                 # none | global | per_channel | per_pixel
    value_adu: 0.0                        # if method==global
    table_path: "data/calib/adc/offsets_per_channel.npy"
    map_path: "data/calib/adc/offsets_map.npy"   # HxW or CxHxW if per_pixel
    auto_black:
      enabled: false
      method: "hist_peak"                 # roi | hist_peak
      roi: { y: [0, 63], x: [0, 63] }
      hist:
        bins: 2048
        smooth_sigma_bins: 3.0

  # ---------------------------------------------------------------------------
  # Gain / PRNU correction (multiplicative): frame <- frame / gain_map
  # ---------------------------------------------------------------------------
  gain:
    method: "per_channel"                 # none | global | per_channel | per_pixel
    value: 1.0
    table_path: "data/calib/adc/gains_per_channel.npy"   # [C]
    prnu_map_path: "data/calib/adc/prnu_map.npy"         # HxW or CxHxW
    epsilon: 1.0e-6
    renormalize_to_mean_one: true
    illumination:
      enabled: false                      # pre-flat vignette removal (large-scale)
      method: "spline2d"                  # poly2d | spline2d | gaussian
      spline: { grid: [24, 24] }
      poly:   { degree_x: 2, degree_y: 2 }
      gaussian: { sigma_px: 25.0 }
      robust:
        sigma_clip: 3.0
        max_iters: 3
      renormalize_to_mean_one: true

  # ---------------------------------------------------------------------------
  # Linearization (response curve / non-linearity correction)
  #   Converts non-linear DN response to linear space.
  # ---------------------------------------------------------------------------
  linearization:
    method: "none"                        # none | lut | poly
    lut_path: "data/calib/adc/linearization_lut.npy"
    lut_interp: "linear"                  # nearest | linear
    poly_coeffs: [1.0, 0.0, 0.0]          # y_lin = c0 + c1*x + c2*x^2 + ...
    poly_norm_adu: 65535.0
    per_amp:
      enabled: false
      lut_dir: "data/calib/adc/lin_luts_per_amp"        # e.g., A.npy, B.npy, ...

  # ---------------------------------------------------------------------------
  # Smear / blooming / bleed mitigation (optional)
  # ---------------------------------------------------------------------------
  smear:
    enabled: false
    column_fraction: 0.0                  # subtract fraction of column mean
    row_fraction: 0.0                     # subtract fraction of row mean

  blooming:
    enabled: false
    taper_kernel: "gaussian3"             # median4 | gaussian3
    grow_radius_px: 1

  # ---------------------------------------------------------------------------
  # Saturation & masks (propagated downstream)
  # ---------------------------------------------------------------------------
  saturation:
    enabled: true
    threshold_dn: 65500
    write_mask_key: "adc_saturation_mask"

  bad_pixels:
    enabled: false
    bpm_path: "data/calib/masks/bad_pixel_map.npy"
    replace_mode: "median4"               # median4 | median8 | gaussian3
    max_replace_fraction: 0.05

  # ---------------------------------------------------------------------------
  # Uncertainty scaffolding (optional; map creation for downstream)
  # ---------------------------------------------------------------------------
  uncertainty:
    enabled: false
    write_variance_map: true
    model: "poisson"                      # poisson | empirical | none
    include_read_noise: true
    # If poisson: var â‰ˆ max(frame_e, 0) + read_noise_e^2; convert to DN^2 if staying in DN
    convert_to_dn2: true

  # ---------------------------------------------------------------------------
  # Re-quantization / clamping
  # ---------------------------------------------------------------------------
  quantization:
    clip:
      min_adu: 0.0
      max_adu: 65535.0
    rounding: "nearest"                   # nearest | floor | ceil | stochastic
    enforce_range: true
    post_subtraction_clamp:
      enabled: true
      min_adu: -5.0

  # ---------------------------------------------------------------------------
  # Quality control (soft guards; do not mutate data)
  # ---------------------------------------------------------------------------
  qc:
    enabled: true
    histogram_after:
      bins: 256
      max_zero_frac: 0.15
      max_saturated_frac: 0.10
    stats_after:
      mean_adu_range: [50.0, 50000.0]
      std_adu_max: 20000.0
    per_amp:
      enabled: false
      max_mean_delta_frac: 0.05
      max_median_delta_frac: 0.05
    on_fail: "warn"                       # warn | raise | skip
    report:
      save: true
      path: "${oc.env:RUN_DIR, runs}/diag/adc/qc_report.json"

  # ---------------------------------------------------------------------------
  # IO mapping (pipeline/executor contract)
  # ---------------------------------------------------------------------------
  io:
    input_key: "raw_frames"
    output_key: "adc_corrected"
    variance_key_out: "var_adc"
    debug_keys:
      overscan_estimate: "adc_overscan_est"
      bias_map: "adc_bias_map"
      gain_map_used: "adc_gain_map_used"
      lin_applied: "adc_lin_applied"

  # ---------------------------------------------------------------------------
  # Diagnostics & logging
  # ---------------------------------------------------------------------------
  diagnostics:
    enabled: true
    save_samples: 2
    output_dir: "${oc.env:RUN_DIR, runs}/diag/adc"
    save_images: false
    filename_prefix: "adc"
    plot_format: "png"

  logging:
    level: "INFO"                          # DEBUG | INFO | WARNING | ERROR

  # ---------------------------------------------------------------------------
  # Runtime & validation
  # ---------------------------------------------------------------------------
  runtime:
    num_workers: 2
    seed: 1337

  validation:
    require_existing_paths: true           # any referenced files must exist
    check_shape_compatibility: true        # verify [C,H,W] vs loaded maps/LUTs
    assert_finite_output: true

  # ---------------------------------------------------------------------------
  # Profile overrides (fast / strict)
  # ---------------------------------------------------------------------------
  profile_overrides:
    fast:
      linearization.method: "none"
      overscan.enabled: false
      reference_pixel.use: false
      amplifiers.enabled: false
      uncertainty.enabled: false
      diagnostics.enabled: false
    strict:
      overscan.enabled: true
      reference_pixel.use: true
      amplifiers.enabled: true
      amplifiers.bias_striping.enabled: true
      linearization.method: "lut"
      uncertainty.enabled: true
      bad_pixels.enabled: true

  notes: |
    â€¢ Recommended order: reference/overscan â†’ offset â†’ PRNU/gain â†’ linearization â†’
      smear/bloom â†’ clamp/quantize. Keep units consistent (DN vs e-).
    â€¢ Renormalize PRNU/gains to mean 1 to prevent global flux drift.
    â€¢ Enable per-amp bias/gain options when quadrant electronics differ.
    â€¢ QC is advisory; use the report.json for CI gating and audit trails.