# ==============================================================================
# üöÄ cuDNN Autotune ‚Äî Aggressive Performance Mode (v1.2)
# ------------------------------------------------------------------------------
# Purpose
#   ‚Ä¢ Enable cuDNN autotuner for maximum throughput.
#   ‚Ä¢ Benchmarks available kernels for each layer and picks the fastest.
#   ‚Ä¢ Ideal for Kaggle leaderboard runs or long epochs with fixed input shapes.
# ------------------------------------------------------------------------------
# Trade-offs
#   ‚Ä¢ ‚ö° Speed: Significant speedup if batch size & tensor shapes are constant.
#   ‚Ä¢ ‚ùå Reproducibility: Kernel choice may vary by driver, CUDA/cuDNN version,
#       or hardware ‚Üí results may differ slightly run-to-run.
#   ‚Ä¢ üîí If strict determinism is required, pair with:
#         local/precision/strict_deterministic.yaml
# ==============================================================================
cudnn_benchmark: true

# ------------------------------------------------------------------------------
# Extended Controls (optional)
# ------------------------------------------------------------------------------
# allow_tf32: true          # (Ampere+) enable TensorFloat32 for matmul (perf boost)
# torch_compile_tune: true  # (PyTorch 2.x) allow Inductor to fuse/cuDNN-optimize ops
# kernel_cache_dir: null    # (future) explicit cache path if runtime supports it

# ------------------------------------------------------------------------------
# üìì Notes
# ------------------------------------------------------------------------------
notes: |
  Aggressive cuDNN autotuner enabled.

  ‚Ä¢ Best choice for leaderboard training with consistent input shapes
    (e.g. fixed batch size, sequence length, resolution).
  ‚Ä¢ Kernel selection may vary across drivers/GPUs ‚Äî not bitwise reproducible.
  ‚Ä¢ Expect 5‚Äì25% throughput gain vs. cudnn_benchmark=false on CNN/Conv-heavy
    architectures.
  ‚Ä¢ For strict reproducibility, disable this and use `strict_deterministic`.

  ‚úÖ Recommended: Kaggle / HPC leaderboard runs  
  ‚ùå Avoid: CI pipelines, ablations, or audits where bitwise determinism matters.
