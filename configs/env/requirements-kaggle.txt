# ==============================================================================
# SpectraMind V50 — requirements-kaggle.txt
# Kaggle-friendly runtime (CPU/GPU). Torch is preinstalled on Kaggle images.
#
# Notes:
# • Avoids heavy/dev tooling (MLflow, W&B, GUI libs, PyG).
# • Pins align with the full stack to prevent drift across CI/Kaggle/local.
# • Safe on Kaggle GPU; install PyG separately inside a notebook only if needed.
# ==============================================================================

############################
# Core CLI & Configuration
############################
typer==0.12.3
rich==13.7.1
hydra-core==1.3.2
omegaconf==2.3.0
pyyaml==6.0.2
pydantic==2.8.2
python-dotenv==1.0.1
packaging==24.1
click==8.1.7
jinja2==3.1.4
typing_extensions==4.12.2

###########################
# Scientific Python Stack
###########################
numpy==1.26.4
scipy==1.13.1
pandas==2.2.2
scikit-learn==1.4.2
threadpoolctl==3.5.0
joblib==1.4.2
tqdm==4.66.4
psutil==5.9.8

################################
# PyTorch (preinstalled on Kaggle)
################################
# Do NOT install torch/torchvision/torchaudio here — Kaggle images include them.
# If you need to pin locally, do it in requirements.txt or via pip flags outside Kaggle.
Pillow==10.4.0   # imaging backend used by torchvision

###################################
# Visualization / Diagnostics (light)
###################################
matplotlib==3.8.4
umap-learn==0.5.6
shap==0.45.0

########
# DVC
########
# Core DVC is fine for parsing pipelines locally; remote backends may be restricted on Kaggle.
dvc==3.51.2

# ==============================================================================
# Optional: Install PyTorch Geometric (PyG) in a Kaggle Notebook
# ------------------------------------------------------------------------------
# import sys, subprocess, torch
# ver = torch.__version__.split('+')[0]                   # e.g. '2.2.2'
# cu  = (torch.version.cuda or 'cpu').replace('.', '')    # e.g. '121' or 'cpu'
# idx = f"https://data.pyg.org/whl/torch-{ver}+{'cu'+cu if torch.version.cuda else 'cpu'}.html"
# subprocess.check_call([
#     sys.executable, "-m", "pip", "install",
#     "torch-geometric==2.5.3", "-f", idx
# ])
# ==============================================================================
