# configs/ablate.yaml
# ==============================================================================
# SpectraMind V50 — Ablation Sweep Configuration
# ------------------------------------------------------------------------------
# Purpose
#   Defines parameter grids and sweep strategies for systematic ablation studies.
#   Supports symbolic-aware perturbations, loss weight sweeps, optimizer variants,
#   and diagnostic toggles. This file is consumed by `auto_ablate_v50.py` and
#   orchestrated via Hydra multirun.
#
# Usage Examples
#   # Run GLL vs Smoothness ablation (2x2 grid)
#   spectramind ablate -m loss=gll,smoothness optimizer=adam,adamw
#
#   # Top-N leaderboard with diagnostics
#   spectramind ablate -m +ablate.yaml --top_n 5 --md outputs/ablate.md
#
# Notes
#   • All values defined as lists → Hydra multirun sweeps.
#   • Interpolations (${...}) link values across groups.
#   • Safe for Kaggle/CI (no internet, 9h runtime guardrails).
# ==============================================================================

defaults:
  - data: nominal
  - model: v50
  - optimizer: adam
  - loss: gll
  - trainer: default
  - logger: tensorboard

# ----------------------------------------------------------------------
# Sweep Parameters
# ----------------------------------------------------------------------
ablate:
  experiment_name: "ablation_sweep"
  output_dir: "outputs/ablation"
  seed: [42, 1337]             # reproducibility seeds
  repetitions: 2               # number of repeats per config (stability check)

# ----------------------------------------------------------------------
# Optimizers to sweep
# ----------------------------------------------------------------------
optimizer:
  - adam
  - adamw
  - sgd

# ----------------------------------------------------------------------
# Trainer variants
# ----------------------------------------------------------------------
trainer:
  - default
  - gpu
  - kaggle_safe

# ----------------------------------------------------------------------
# Symbolic/Physics Loss Weights
# ----------------------------------------------------------------------
loss:
  gll:
    weight: [1.0]              # fixed baseline
  smoothness:
    weight: [0.0, 0.1, 0.5]    # toggle & ramp
  symbolic:
    weight: [0.0, 0.25, 0.5]   # symbolic rules (smoothness, non-negativity, FFT)

# ----------------------------------------------------------------------
# Model toggles
# ----------------------------------------------------------------------
model:
  v50:
    fgs1_mamba_dropout: [0.0, 0.1]
    airs_gnn_type: ["gat", "rgcn"]   # edge-feature aware GNN backends:contentReference[oaicite:3]{index=3}
    decoder_type: ["multi_scale", "quantile"]

# ----------------------------------------------------------------------
# Diagnostics toggles
# ----------------------------------------------------------------------
diagnostics:
  shap_overlay: [true, false]
  symbolic_overlay: [true, false]
  fft_analysis: [true, false]
  uncertainty_calibration: [true, false]

# ----------------------------------------------------------------------
# Hydra sweep settings
# ----------------------------------------------------------------------
hydra:
  sweep:
    dir: ${ablate.output_dir}/${now:%Y-%m-%d_%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    # Local multirun, CI/Kaggle safe
    class: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    class: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    params:
      optimizer: ${optimizer}
      trainer: ${trainer}
      loss.gll.weight: ${loss.gll.weight}
      loss.smoothness.weight: ${loss.smoothness.weight}
      loss.symbolic.weight: ${loss.symbolic.weight}
      model.v50.fgs1_mamba_dropout: ${model.v50.fgs1_mamba_dropout}
      model.v50.airs_gnn_type: ${model.v50.airs_gnn_type}
      model.v50.decoder_type: ${model.v50.decoder_type}
      diagnostics.shap_overlay: ${diagnostics.shap_overlay}
      diagnostics.symbolic_overlay: ${diagnostics.symbolic_overlay}
      diagnostics.fft_analysis: ${diagnostics.fft_analysis}
      diagnostics.uncertainty_calibration: ${diagnostics.uncertainty_calibration}
      ablate.seed: ${ablate.seed}

# ----------------------------------------------------------------------
# CI / Kaggle Guardrails
# ----------------------------------------------------------------------
runtime:
  max_hours: 9
  safe_mode: true
