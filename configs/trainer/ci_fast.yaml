# configs/trainer/ci_fast.yaml
# ==============================================================================
# ðŸ§ª CI-Fast Trainer Config â€” SpectraMind V50
#
# Purpose
#   Ultra-short, CPU/GPU-agnostic sanity run for CI:
#   â€¢ Verifies end-to-end wiring (data â†’ model â†’ loss â†’ metrics)
#   â€¢ Catches shape/dtype/NaN issues quickly
#   â€¢ Keeps wall-clock under ~20 minutes on typical CI runners
#
# Usage
#   spectramind train trainer=ci_fast
#
# Notes
#   â€¢ Disables checkpointing & early stopping to minimize I/O.
#   â€¢ Limits batches to exercise one full optimizer step and validation pass.
# ==============================================================================

trainer:
  # Hardware: prefer whatever CI runner provides (CPU/GPU)
  device: "auto"              # "cpu" | "gpu" | "auto"
  accelerator: "auto"
  strategy: "auto"
  precision: 32               # CPU-safe; avoids AMP setup in CI

  # Tight runtime budget
  max_epochs: 1
  max_time: "0:20:00"         # H:MM:SS safety wall

  # Batch/step limits to exercise full loop quickly
  limit_train_batches: 8
  limit_val_batches: 4
  limit_test_batches: 4

  # Training stability
  accumulate_grad_batches: 1
  gradient_clip_val: 0.0

  # Determinism for reproducible CI
  deterministic: true
  benchmark: false
  seed: 123

  # Disable heavy features in CI
  checkpoint:
    enabled: false

  early_stopping:
    enabled: false

  # Lightweight logging
  logger:
    type: "csv"               # small on-disk footprint
    save_dir: "logs/"
    name: "ci_fast"

  # Dataloader safety on CI (single-process loaders)
  dataloader:
    num_workers: 0
    pin_memory: false
    persistent_workers: false

  # Optional profiler off to save time
  profiler: null

  notes: |
    CI-fast run verifies the end-to-end training/validation loop with minimal batches.
    Designed to catch interface and numerical issues without relying on GPUs or long jobs.
