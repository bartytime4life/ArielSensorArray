# configs/trainer/ci_fast.yaml
# ==============================================================================
# ðŸ§ª CI-Fast Trainer Config â€” SpectraMind V50
#
# Purpose
#   Ultra-short, CPU/GPU-agnostic sanity run for CI:
#   â€¢ Verifies end-to-end wiring (data â†’ model â†’ loss â†’ metrics)
#   â€¢ Catches shape/dtype/NaN issues quickly
#   â€¢ Keeps wall-clock under ~20 minutes on typical CI runners
#
# Usage
#   spectramind train trainer=ci_fast
#
# Notes
#   â€¢ Disables checkpointing & early stopping to minimize I/O.
#   â€¢ Limits batches to exercise one full optimizer step and validation pass.
#   â€¢ Enforces determinism for reproducibility across CI environments.
# ==============================================================================

trainer:
  # ---------------------------------------------------------------------------
  # Hardware & Precision
  # ---------------------------------------------------------------------------
  device: "auto"              # options: "cpu" | "gpu" | "auto"
  accelerator: "auto"         # Lightning/Hydra will choose CPU/GPU as available
  strategy: "auto"            # fallback strategy (ddp, single, etc.)
  precision: 32               # CPU-safe (avoid AMP in CI)

  # ---------------------------------------------------------------------------
  # Runtime Budget (tight)
  # ---------------------------------------------------------------------------
  max_epochs: 1
  max_time: "0:20:00"         # CI safety wall-clock limit (H:MM:SS)

  # ---------------------------------------------------------------------------
  # Batch/Step Limits
  # ---------------------------------------------------------------------------
  limit_train_batches: 8      # ensures at least one optimizer step
  limit_val_batches: 4
  limit_test_batches: 4

  accumulate_grad_batches: 1
  gradient_clip_val: 0.0

  # ---------------------------------------------------------------------------
  # Reproducibility
  # ---------------------------------------------------------------------------
  deterministic: true         # reproducibility guarantee
  benchmark: false            # disables CuDNN nondeterminism
  seed: 123                   # fixed seed for consistency

  # ---------------------------------------------------------------------------
  # Checkpointing / Early Stopping
  # ---------------------------------------------------------------------------
  checkpoint:
    enabled: false            # no checkpoints in CI (fast I/O only)
    dirpath: null
    save_top_k: 0

  early_stopping:
    enabled: false

  # ---------------------------------------------------------------------------
  # Logging (lightweight, disk-safe)
  # ---------------------------------------------------------------------------
  logger:
    type: "csv"               # minimal log footprint
    save_dir: "logs/"
    name: "ci_fast"
    version: "ci_${now:%Y-%m-%d_%H-%M-%S}"

  # ---------------------------------------------------------------------------
  # Dataloader Settings
  # ---------------------------------------------------------------------------
  dataloader:
    num_workers: 0            # single-process loaders for CI safety
    pin_memory: false
    persistent_workers: false

  # ---------------------------------------------------------------------------
  # Profiling
  # ---------------------------------------------------------------------------
  profiler: null              # profiling disabled for speed

  # ---------------------------------------------------------------------------
  # CI Notes
  # ---------------------------------------------------------------------------
  notes: |
    CI-fast run verifies the end-to-end training/validation loop with minimal batches.
    Designed to catch interface and numerical issues without relying on GPUs or long jobs.
    â€¢ Determinism enforced: seed=123, benchmark=False.
    â€¢ Logging is CSV-only for minimal footprint.
    â€¢ Disables checkpointing and early stopping to reduce I/O.
    â€¢ Tight limits ensure job completes under 20 minutes on GitHub Actions or Kaggle CI.
